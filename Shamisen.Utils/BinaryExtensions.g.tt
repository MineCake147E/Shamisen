<#@ template debug = "false" hostspecific = "false" language = "C#"#>
<#@ assembly name = "System.Core"#>
<#@ import namespace = "System.Linq"#>
<#@ import namespace = "System.Text"#>
<#@ import namespace = "System.Collections.Generic"#>
<#@ output extension = ".cs"#>
<#    var types = new [] {("ushort", "UInt16"),("short", "Int16"),("uint", "UInt32"),("int", "Int32"),("ulong", "UInt64"),("long", "Int64"), };#>
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Buffers.Binary;

namespace Shamisen
{
    /// <summary>
    /// Provides some functions that helps you about binary things.
    /// </summary>
    public static partial class BinaryExtensions
    {
<#foreach ((var friendly, var full) in types) {#>
        /// <summary>
        /// Converts the specified <paramref name="systemEndianedValue"/> to/from little endian.
        /// </summary>
        /// <param name="systemEndianedValue">The value in system endian.</param>
        /// <returns>The endian-reversed value if the system is BIG-ENDIAN, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        [MethodImpl(OptimizationUtils.InlineAndOptimizeIfPossible)]
        public static <#=friendly#> ConvertToLittleEndian(<#=friendly#> systemEndianedValue)
            => BitConverter.IsLittleEndian ? systemEndianedValue : BinaryPrimitives.ReverseEndianness(systemEndianedValue);

<#}#>

<#foreach ((var friendly, var full) in types) {#>
        /// <summary>
        /// Converts the specified <paramref name="systemEndianedValue"/> to/from BIG ENDIAN.
        /// </summary>
        /// <param name="systemEndianedValue">The value in system endian.</param>
        /// <returns>The endian-reversed value if the system is little-endian, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        [MethodImpl(OptimizationUtils.InlineAndOptimizeIfPossible)]
        public static <#=friendly#> ConvertToBigEndian(<#=friendly#> systemEndianedValue)
            => !BitConverter.IsLittleEndian ? systemEndianedValue : BinaryPrimitives.ReverseEndianness(systemEndianedValue);

<#}#>
    }
}
