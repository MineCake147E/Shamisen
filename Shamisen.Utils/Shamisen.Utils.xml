<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Shamisen.Utils</name>
    </assembly>
    <members>
        <member name="T:Shamisen.Analysis.CooleyTukeyFft">
            <summary>
            Contains functionality of Fast Fourier Transform.
            </summary>
        </member>
        <member name="F:Shamisen.Analysis.CooleyTukeyFft.PowerRootsOfUnity">
            <summary>
            Contains (1 &lt;&lt; n) root of unity.
            </summary>
        </member>
        <member name="M:Shamisen.Analysis.CooleyTukeyFft.FFT(System.Span{System.Numerics.Complex},Shamisen.Analysis.FftMode)">
            <summary>
            Transforms the specified span using Cooley-Tukey algorithm.
            </summary>
            <param name="span">The buffer.</param>
            <param name="mode">The FFT's Mode.</param>
            <exception cref="T:System.ArgumentException">The length of span must be power of 2! - span</exception>
        </member>
        <member name="M:Shamisen.Analysis.CooleyTukeyFft.FFT(System.Span{Shamisen.ComplexF},Shamisen.Analysis.FftMode)">
            <summary>
            Transforms the specified span using Cooley-Tukey algorithm.
            </summary>
            <param name="span">The buffer.</param>
            <param name="mode">The FFT's Mode.</param>
            <exception cref="T:System.ArgumentException">The length of span must be power of 2! - span</exception>
        </member>
        <member name="M:Shamisen.Analysis.CooleyTukeyFft.FFT(System.Numerics.Complex[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified buffer using Cooley-Tukey algorithm.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Shamisen.Analysis.CooleyTukeyFft.FFT(Shamisen.ComplexF[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified buffer using Cooley-Tukey algorithm.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Shamisen.Analysis.CooleyTukeyFft.Reverse``1(System.Span{``0})">
            <summary>
            Performs Bit-Reversal permutation of the <paramref name="span"/>.
            </summary>
            <param name="span">The in/out span.</param>
        </member>
        <member name="M:Shamisen.Analysis.CooleyTukeyFft.CalculateCache(Shamisen.Analysis.FftMode,System.Int32,System.Span{System.Numerics.Complex})">
            <summary>
            Calculates the cache of the powers of root of unity.
            </summary>
            <param name="mode">The mode.</param>
            <param name="index">The index.</param>
            <param name="omegas">The omegas.</param>
        </member>
        <member name="M:Shamisen.Analysis.CooleyTukeyFft.CalculateCache(Shamisen.Analysis.FftMode,System.Int32,System.Span{Shamisen.ComplexF})">
            <summary>
            Calculates the cache of the powers of root of unity.
            </summary>
            <param name="mode">The mode.</param>
            <param name="index">The index.</param>
            <param name="omegas">The omegas.</param>
        </member>
        <member name="M:Shamisen.Analysis.CooleyTukeyFft.Perform(System.Span{System.Numerics.Complex},Shamisen.Analysis.FftMode)">
            <summary>
            Performs forward transform to the specified span.
            </summary>
            <param name="span">The span.</param>
            <param name="mode">The FFT's Mode.</param>
        </member>
        <member name="M:Shamisen.Analysis.CooleyTukeyFft.Perform(System.Span{Shamisen.ComplexF},Shamisen.Analysis.FftMode)">
            <summary>
            Performs forward transform to the specified span.
            </summary>
            <param name="span">The span.</param>
            <param name="mode">The FFT's Mode.</param>
        </member>
        <member name="T:Shamisen.Analysis.FftMode">
            <summary>
            Fast Fourier Transformation Modes
            </summary>
        </member>
        <member name="F:Shamisen.Analysis.FftMode.Forward">
            <summary>
            The forward transform.
            </summary>
        </member>
        <member name="F:Shamisen.Analysis.FftMode.Backward">
            <summary>
            The backward transform.
            </summary>
        </member>
        <member name="T:Shamisen.Analysis.FixedSizeCooleyTukeyFftSingle">
            <summary>
            Provides a way to perform FFT with fixed size for monaural signal.
            Useful for making real-time FFT analyzer.
            </summary>
        </member>
        <member name="P:Shamisen.Analysis.FixedSizeCooleyTukeyFftSingle.Size">
            <summary>
            The size of FFT.
            </summary>
        </member>
        <member name="P:Shamisen.Analysis.FixedSizeCooleyTukeyFftSingle.Mode">
            <summary>
            The FFT mode.
            </summary>
        </member>
        <member name="M:Shamisen.Analysis.FixedSizeCooleyTukeyFftSingle.#ctor(System.Int32,Shamisen.Analysis.FftMode)">
            <summary>
            Initializes a new instance of <see cref="T:Shamisen.Analysis.FixedSizeCooleyTukeyFftSingle"/>.
            </summary>
            <param name="size">The FFT Size. Must be a power of two and be larger than 7.</param>
            <param name="mode">The FFT Mode.</param>
        </member>
        <member name="M:Shamisen.Analysis.FixedSizeCooleyTukeyFftSingle.PerformFft(System.Span{Shamisen.ComplexF})">
            <summary>
            Transforms the specified span using Cooley-Tukey algorithm.
            </summary>
            <param name="destination">The buffer.</param>
            <exception cref="T:System.ArgumentException">The length of <paramref name="destination"/> must be the same as <see cref="P:Shamisen.Analysis.FixedSizeCooleyTukeyFftSingle.Size"/>! - span</exception>
        </member>
        <member name="M:Shamisen.Analysis.FixedSizeCooleyTukeyFftSingle.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.Analysis.IWindowFunction">
            <summary>
            Defines a base infrastructure of a Window function for FFT.
            </summary>
        </member>
        <member name="M:Shamisen.Analysis.IWindowFunction.Generate(System.Span{System.Single})">
            <summary>
            Generates a cache for this <see cref="T:Shamisen.Analysis.IWindowFunction"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Shamisen.Analysis.IWindowFunction.Generate(System.Span{System.Double})">
            <summary>
            Generates a cache for this <see cref="T:Shamisen.Analysis.IWindowFunction"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="T:Shamisen.BinaryExtensions">
            <summary>
            Provides some functions that helps you about binary things.
            </summary>
            <summary>
            Provides some functions that helps you about binary things.
            </summary>
        </member>
        <member name="P:Shamisen.BinaryExtensions.SystemEndianness">
            <summary>
            Gets the system endianness.
            </summary>
            <value>
            The system endianness.
            </value>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ReverseEndianness(System.Guid)">
            <summary>
            Reverses internal primitive values by performing an endianness swap of the specified <see cref="T:System.Guid"/> <paramref name="value"/>.
            </summary>
            <param name="value">The value to reverse.</param>
            <returns>The reversed value.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ReverseEndianness(Shamisen.Int24)">
            <summary>
            Reverses internal primitive values by performing an endianness swap of the specified <see cref="T:Shamisen.Int24" /> value.
            </summary>
            <param name="value">The value to reverse.</param>
            <returns>
            The reversed value.
            </returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ReverseEndianness(Shamisen.UInt24)">
            <summary>
            Reverses internal primitive values by performing an endianness swap of the specified <see cref="T:Shamisen.UInt24" /> value.
            </summary>
            <param name="value">The value to reverse.</param>
            <returns>
            The reversed value.
            </returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToLittleEndian(Shamisen.Int24)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from little endian.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is BIG-ENDIAN, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToLittleEndian(Shamisen.UInt24)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from little endian.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is BIG-ENDIAN, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToBigEndian(Shamisen.Int24)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from BIG ENDIAN.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is little-endian, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToBigEndian(Shamisen.UInt24)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from BIG ENDIAN.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is little-endian, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.TryReadDoubleLittleEndian(System.ReadOnlySpan{System.Byte},System.Double@)">
            <summary>
            Reads a <see cref="T:System.Double"/> from the beginning of a read-only span of bytes, as little endian.<br/>
            This method poly-fills the <see cref="M:System.Buffers.Binary.BinaryPrimitives.ReadDoubleLittleEndian(System.ReadOnlySpan{System.Byte})"/> method for non-supported frameworks.
            </summary>
            <param name="source">The read-only span of bytes to read.</param>
            <param name="value">When this method returns, contains the value read out of the read-only span of bytes, as little endian.</param>
            <returns><c>true</c> if the span is large enough to contain a <see cref="T:System.Double"/>; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.Buffers.Binary.BinaryPrimitives.TryReadDoubleLittleEndian(System.ReadOnlySpan{System.Byte},System.Double@)"/>
        </member>
        <member name="M:Shamisen.BinaryExtensions.TryReadDoubleBigEndian(System.ReadOnlySpan{System.Byte},System.Double@)">
            <summary>
            Reads a <see cref="T:System.Double"/> from the beginning of a read-only span of bytes, as big endian.<br/>
            This method poly-fills the <see cref="M:System.Buffers.Binary.BinaryPrimitives.ReadDoubleLittleEndian(System.ReadOnlySpan{System.Byte})"/> method for non-supported frameworks.
            </summary>
            <param name="source">The read-only span of bytes to read.</param>
            <param name="value">When this method returns, contains the value read out of the read-only span of bytes, as Big endian.</param>
            <returns><c>true</c> if the span is large enough to contain a <see cref="T:System.Double"/>; otherwise, <c>false</c>.</returns>
            <seealso cref="M:System.Buffers.Binary.BinaryPrimitives.TryReadDoubleLittleEndian(System.ReadOnlySpan{System.Byte},System.Double@)"/>
        </member>
        <member name="M:Shamisen.BinaryExtensions.TryReadSingleLittleEndian(System.ReadOnlySpan{System.Byte},System.Single@)">
            <summary>
            Reads a <see cref="T:System.Single"/> from the beginning of a read-only span of bytes, as little endian.
            </summary>
            <param name="source">The read-only span of bytes to read.</param>
            <param name="value">When this method returns, contains the value read out of the read-only span of bytes, as little endian.</param>
            <returns><c>true</c> if the span is large enough to contain a <see cref="T:System.Single"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.TryReadSingleBigEndian(System.ReadOnlySpan{System.Byte},System.Single@)">
            <summary>
            Reads a <see cref="T:System.Single"/> from the beginning of a read-only span of bytes, as big endian.
            </summary>
            <param name="source">The read-only span of bytes to read.</param>
            <param name="value">When this method returns, contains the value read out of the read-only span of bytes, as big endian.</param>
            <returns><c>true</c> if the span is large enough to contain a <see cref="T:System.Single"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.SingleToInt32Bits(System.Single)">
            <summary>
            Converts a single-precision floating-point value into an integer.
            </summary>
            <param name="value">The single-precision floating-point value to convert.</param>
            <returns>An integer representing the converted single-precision floating-point value.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.Int32BitsToSingle(System.Int32)">
            <summary>
            Reinterprets the specified 32-bit integer as a single-precision floating-point value.
            </summary>
            <param name="value">The integer to convert.</param>
            <returns>A single-precision floating-point value that represents the converted integer.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.SingleToUInt32Bits(System.Single)">
            <summary>
            Converts a single-precision floating-point value into an unsigned integer.
            </summary>
            <param name="value">The single-precision floating-point value to convert.</param>
            <returns>An unsigned integer representing the converted single-precision floating-point value.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.UInt32BitsToSingle(System.UInt32)">
            <summary>
            Reinterprets the specified 32-bit unsigned integer as a single-precision floating-point value.
            </summary>
            <param name="value">The unsigned integer to convert.</param>
            <returns>A single-precision floating-point value that represents the converted unsigned integer.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToLittleEndian(System.UInt16)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from little endian.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is BIG-ENDIAN, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToLittleEndian(System.Int16)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from little endian.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is BIG-ENDIAN, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToLittleEndian(System.UInt32)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from little endian.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is BIG-ENDIAN, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToLittleEndian(System.Int32)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from little endian.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is BIG-ENDIAN, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToLittleEndian(System.UInt64)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from little endian.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is BIG-ENDIAN, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToLittleEndian(System.Int64)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from little endian.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is BIG-ENDIAN, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToBigEndian(System.UInt16)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from BIG ENDIAN.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is little-endian, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToBigEndian(System.Int16)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from BIG ENDIAN.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is little-endian, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToBigEndian(System.UInt32)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from BIG ENDIAN.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is little-endian, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToBigEndian(System.Int32)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from BIG ENDIAN.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is little-endian, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToBigEndian(System.UInt64)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from BIG ENDIAN.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is little-endian, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="M:Shamisen.BinaryExtensions.ConvertToBigEndian(System.Int64)">
            <summary>
            Converts the specified <paramref name="systemEndianedValue"/> to/from BIG ENDIAN.
            </summary>
            <param name="systemEndianedValue">The value in system endian.</param>
            <returns>The endian-reversed value if the system is little-endian, otherwise, <paramref name="systemEndianedValue"/>.</returns>
        </member>
        <member name="T:Shamisen.Data.PooledArray`1">
            <summary>
            Represents a pooled <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The contents of array.</typeparam>
        </member>
        <member name="M:Shamisen.Data.PooledArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.PooledArray`1"/> class.
            </summary>
            <param name="size">The desired size.</param>
        </member>
        <member name="P:Shamisen.Data.PooledArray`1.Array">
            <summary>
            Gets the array.
            </summary>
            <value>
            The array.
            </value>
        </member>
        <member name="P:Shamisen.Data.PooledArray`1.Length">
            <summary>
            Gets the initially desired length of the <see cref="P:Shamisen.Data.PooledArray`1.Array"/>.
            </summary>
            <value>
            The initially desired length of the <see cref="P:Shamisen.Data.PooledArray`1.Array"/>.
            </value>
        </member>
        <member name="P:Shamisen.Data.PooledArray`1.Span">
            <summary>
            Gets the span of the <see cref="P:Shamisen.Data.PooledArray`1.Array"/> with <see cref="P:Shamisen.Data.PooledArray`1.Length"/>.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:Shamisen.Data.PooledArray`1.Memory">
            <summary>
            Gets the memory of the <see cref="P:Shamisen.Data.PooledArray`1.Array"/> with <see cref="P:Shamisen.Data.PooledArray`1.Length"/>.
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="M:Shamisen.Data.PooledArray`1.Finalize">
            <summary>
            Finalizes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.PooledArray`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Endianness">
            <summary>
            Represents an endianness.
            </summary>
        </member>
        <member name="F:Shamisen.Endianness.Little">
            <summary>
            The little endian
            </summary>
        </member>
        <member name="F:Shamisen.Endianness.Big">
            <summary>
            The big endian
            </summary>
        </member>
        <member name="T:Shamisen.MathI">
            <summary>
            Provides constants and static methods for bitwise, arithmetic, and other common mathematical functions.
            </summary>
        </member>
        <member name="M:Shamisen.MathI.FloorStep(System.Int32,System.Int32)">
            <summary>
            Aligns the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.FloorStepRem(System.Int32,System.Int32)">
            <summary>
            Aligns the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.Rectify(System.Int32)">
            <summary>
            Rectifies the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value to rectify.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.Min(System.IntPtr,System.IntPtr)">
            <inheritdoc cref="M:System.Math.Min(System.Int64,System.Int64)"/>
        </member>
        <member name="M:Shamisen.MathI.Min(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Math.Min(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Shamisen.MathI.Min(System.UInt32,System.UInt32)">
            <inheritdoc cref="M:System.Math.Min(System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:Shamisen.MathI.Max(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Math.Max(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Shamisen.MathI.Max(System.UInt32,System.UInt32)">
            <inheritdoc cref="M:System.Math.Max(System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:Shamisen.MathI.AndNot(System.Int32,System.Int32)">
            <summary>
            Performs a bitwise <c>and</c> operation on two specified <see cref="T:System.Int32"/> values after negating <paramref name="a"/>.
            </summary>
            <param name="a">The value to be negated.</param>
            <param name="b">The value to be performed bitwise <c>and</c> operation with negated <paramref name="a"/>.</param>
            <returns>The and product of <paramref name="b"/> and negated <paramref name="a"/>.</returns>
        </member>
        <member name="M:Shamisen.MathI.AndNot(System.UInt32,System.UInt32)">
            <summary>
            Performs a bitwise <c>and</c> operation on two specified <see cref="T:System.UInt32"/> values after negating <paramref name="a"/>.
            </summary>
            <param name="a">The value to be negated.</param>
            <param name="b">The value to be performed bitwise <c>and</c> operation with negated <paramref name="a"/>.</param>
            <returns>The and product of <paramref name="b"/> and negated <paramref name="a"/>.</returns>
        </member>
        <member name="M:Shamisen.MathI.AndNot(System.Int64,System.Int64)">
            <summary>
            Performs a bitwise <c>and</c> operation on two specified <see cref="T:System.Int64"/> values after negating <paramref name="a"/>.
            </summary>
            <param name="a">The value to be negated.</param>
            <param name="b">The value to be performed bitwise <c>and</c> operation with negated <paramref name="a"/>.</param>
            <returns>The and product of <paramref name="b"/> and negated <paramref name="a"/>.</returns>
        </member>
        <member name="M:Shamisen.MathI.AndNot(System.UInt64,System.UInt64)">
            <summary>
            Performs a bitwise <c>and</c> operation on two specified <see cref="T:System.UInt64"/> values after negating <paramref name="a"/>.
            </summary>
            <param name="a">The value to be negated.</param>
            <param name="b">The value to be performed bitwise <c>and</c> operation with negated <paramref name="a"/>.</param>
            <returns>The and product of <paramref name="b"/> and negated <paramref name="a"/>.</returns>
        </member>
        <member name="M:Shamisen.MathI.AndNot(System.IntPtr,System.IntPtr)">
            <summary>
            Performs a bitwise <c>and</c> operation on two specified <see cref="T:System.IntPtr"/> values after negating <paramref name="a"/>.
            </summary>
            <param name="a">The value to be negated.</param>
            <param name="b">The value to be performed bitwise <c>and</c> operation with negated <paramref name="a"/>.</param>
            <returns>The and product of <paramref name="b"/> and negated <paramref name="a"/>.</returns>
        </member>
        <member name="M:Shamisen.MathI.AndNot(System.UIntPtr,System.UIntPtr)">
            <summary>
            Performs a bitwise <c>and</c> operation on two specified <see cref="T:System.UIntPtr"/> values after negating <paramref name="a"/>.
            </summary>
            <param name="a">The value to be negated.</param>
            <param name="b">The value to be performed bitwise <c>and</c> operation with negated <paramref name="a"/>.</param>
            <returns>The and product of <paramref name="b"/> and negated <paramref name="a"/>.</returns>
        </member>
        <member name="M:Shamisen.MathI.Abs(System.Int64)">
            <summary>
            Returns the absolute value of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.Abs(System.Int32)">
            <summary>
            Returns the absolute value of the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.BigMul(System.Int64,System.Int64)">
            <summary>
            Multiplies the specified <paramref name="x"/> and <paramref name="y"/> and returns the whole 128bit result.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.BigMul(System.UInt64,System.UInt64)">
            <summary>
            Multiplies the specified <paramref name="x"/> and <paramref name="y"/> and returns the whole 128bit result.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ModularMultiplicativeInverse(System.Int32,System.Int32)">
            <summary>
            Calculates and returns Modular Multiplicative Inverse of <paramref name="a"/>.
            <paramref name="a"/> * x % <paramref name="n"/> = 1.
            </summary>
            <param name="a">The multiplier.</param>
            <param name="n">The modulus.</param>
            <returns>The Modular Multiplicative Inverse of <paramref name="a"/>.</returns>
        </member>
        <member name="M:Shamisen.MathI.Max(Shamisen.ReadResult,Shamisen.ReadResult)">
            <summary>
            Determines the maximum of the parameters.
            </summary>
            <param name="a">The value a.</param>
            <param name="b">The value b.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.TrailingZeroCount(System.UInt32)">
            <summary>
            Counts the consecutive zero bits on the right.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.TrailingZeroCount(System.UInt64)">
            <summary>
            Counts the consecutive zero bits on the right.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.LogBase2(System.UInt32)">
            <summary>
            Finds last 1's position from LSB.<br/>
            When the value is 0, it returns 0.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.LogBase2(System.UInt64)">
            <summary>
            Finds last 1's position from LSB.<br/>
            When the value is 0, it returns 0.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.LeadingZeroCount(System.UInt32)">
            <summary>
            Finds last 0's position from MSB.<br/>
            When the value is 0, it returns 32.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.LeadingZeroCount(System.UInt64)">
            <summary>
            Finds last 0's position from MSB.<br/>
            When the value is 0, it returns 32.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.PopCount(System.UInt32)">
            <summary>
            Counts how many the bits are 1.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.PopCount(System.UInt64)">
            <summary>
            Counts how many the bits are 1.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ExtractHighestSetBit(System.UInt32)">
            <summary>
            Returns the largest power-of-two number less than or equals to <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ExtractHighestSetBit(System.UInt64)">
            <summary>
            Returns the largest power-of-two number less than or equals to <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ReverseBitOrder(System.UInt32)">
            <summary>
            Reverses the bit order of the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ReverseBitOrder(System.UInt64)">
            <summary>
            Reverses the bit order of the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ExtractBitField(System.UInt32,System.Byte,System.Byte)">
            <summary>
            Extracts the bit field inside <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="start">The start from LSB.</param>
            <param name="length">The length in bits.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ExtractBitField(System.UInt64,System.Byte,System.Byte)">
            <summary>
            Extracts the bit field inside <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="start">The start from LSB.</param>
            <param name="length">The length in bits.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ZeroHighBits(System.Int32,System.UInt32)">
            <summary>
            Sets the bits of <paramref name="value"/> higher than specified <paramref name="index"/> to 0.
            </summary>
            <param name="index">The index counting from LSB.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ZeroHighBits(System.Int32,System.UInt64)">
            <summary>
            Sets the bits of <paramref name="value"/> higher than specified <paramref name="index"/> to 0.
            </summary>
            <param name="index">The index counting from LSB.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ZeroHighBitsFromHigh(System.Int32,System.UInt32)">
            <summary>
            Sets the bits of <paramref name="value"/> higher than specified <paramref name="index"/> counted from MSB, to 0.
            </summary>
            <param name="index">The index counting from MSB.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ZeroHighBitsFromHigh(System.Int32,System.UInt64)">
            <summary>
            Sets the bits of <paramref name="value"/> higher than specified <paramref name="index"/> counted from MSB, to 0.
            </summary>
            <param name="index">The index counting from MSB.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathI.ZeroIfFalse(System.Boolean,System.UInt32)">
            <summary>
            Returns zero when <paramref name="condition"/> is false, otherwise <paramref name="value"/>.
            </summary>
            <param name="condition">The condition to test.</param>
            <param name="value">The value to return if <paramref name="condition"/> were true.</param>
            <returns><paramref name="value"/> if <paramref name="condition"/> is true, otherwise 0.</returns>
        </member>
        <member name="M:Shamisen.MathI.ZeroIfFalse(System.Boolean,System.Int32)">
            <summary>
            Returns zero when <paramref name="condition"/> is false, otherwise <paramref name="value"/>.
            </summary>
            <param name="condition">The condition to test.</param>
            <param name="value">The value to return if <paramref name="condition"/> were true.</param>
            <returns><paramref name="value"/> if <paramref name="condition"/> is true, otherwise 0.</returns>
        </member>
        <member name="M:Shamisen.MathI.ZeroIfFalse(System.Boolean,System.UInt64)">
            <summary>
            Returns zero when <paramref name="condition"/> is false, otherwise <paramref name="value"/>.
            </summary>
            <param name="condition">The condition to test.</param>
            <param name="value">The value to return if <paramref name="condition"/> were true.</param>
            <returns><paramref name="value"/> if <paramref name="condition"/> is true, otherwise 0.</returns>
        </member>
        <member name="M:Shamisen.MathI.ZeroIfFalse(System.Boolean,System.Int64)">
            <summary>
            Returns zero when <paramref name="condition"/> is false, otherwise <paramref name="value"/>.
            </summary>
            <param name="condition">The condition to test.</param>
            <param name="value">The value to return if <paramref name="condition"/> were true.</param>
            <returns><paramref name="value"/> if <paramref name="condition"/> is true, otherwise 0.</returns>
        </member>
        <member name="M:Shamisen.MathI.ZeroIfFalse(System.Boolean,System.IntPtr)">
            <summary>
            Returns zero when <paramref name="condition"/> is false, otherwise <paramref name="value"/>.
            </summary>
            <param name="condition">The condition to test.</param>
            <param name="value">The value to return if <paramref name="condition"/> were true.</param>
            <returns><paramref name="value"/> if <paramref name="condition"/> is true, otherwise 0.</returns>
        </member>
        <member name="M:Shamisen.MathI.ZeroIfFalse(System.Boolean,System.UIntPtr)">
            <summary>
            Returns zero when <paramref name="condition"/> is false, otherwise <paramref name="value"/>.
            </summary>
            <param name="condition">The condition to test.</param>
            <param name="value">The value to return if <paramref name="condition"/> were true.</param>
            <returns><paramref name="value"/> if <paramref name="condition"/> is true, otherwise 0.</returns>
        </member>
        <member name="M:Shamisen.MathI.IsPowerOfTwo(System.UInt32)">
            <summary>
            Determines whether the specified <paramref name="i"/> is power of two.
            </summary>
            <param name="i">The value.</param>
            <returns>
              <c>true</c> if the specified value is power of two; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.MathI.IsPowerOfTwo(System.Int32)">
            <summary>
            Determines whether the specified <paramref name="i"/> is power of two.
            </summary>
            <param name="i">The value.</param>
            <returns>
              <c>true</c> if the specified value is power of two; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.MathI.SingleToInt32BitsTwosComplement(System.Single)">
            <summary>
            Returns the internal representation of a specified floating-point number from signed absolute value representation converted to two's complement representation.
            </summary>
            <param name="value">The value to convert</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.MathIFallbacks">
             <summary>
             WARNING: This class is exposed only for testing purposes.<br/>
             Provides constants and static methods for bitwise, arithmetic, and other common mathematical functions as MathI does.<br/>
             This class contains hand-written software fallbacks for the places that the HW Intrinsics are not available.<br/>
            
             </summary>
        </member>
        <member name="M:Shamisen.MathIFallbacks.TrailingZeroCount(System.UInt32)">
            <summary>
            Counts the consecutive zero bits on the right.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.TrailingZeroCount(System.UInt64)">
            <summary>
            Counts the consecutive zero bits on the right.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.LogBase2(System.UInt32)">
            <summary>
            Finds last 1's position from LSB.<br/>
            When the value is 0, it returns 0.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.LogBase2(System.UInt64)">
            <summary>
            Finds last 1's position from LSB.<br/>
            When the value is 0, it returns 0.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.LeadingZeroCount(System.UInt32)">
            <summary>
            Finds last 0's position from MSB.<br/>
            When the value is 0, it returns 32.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.LeadingZeroCount(System.UInt64)">
            <summary>
            Finds last 0's position from MSB.<br/>
            When the value is 0, it returns 64.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.PopCount(System.UInt64)">
            <summary>
            Counts how many the bits are 1.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.PopCount(System.UInt32)">
            <summary>
            Counts how many the bits are 1.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.ExtractHighestSetBit(System.UInt32)">
            <summary>
            Returns the largest power-of-two number less than or equals to <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.ExtractHighestSetBit(System.UInt64)">
            <summary>
            Returns the largest power-of-two number less than or equals to <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.ReverseBitOrder(System.UInt32)">
            <summary>
            Reverses the bits of the specified value in 32bit.
            </summary>
            <param name="value">The value to reverse bit order.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.ReverseBitOrder(System.UInt64)">
            <summary>
            Reverses the bits of the specified value in 64bit.
            </summary>
            <param name="value">The value to reverse bit order.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.ExtractBitField(System.UInt32,System.Byte,System.Byte)">
            <summary>
            Extracts the bit field inside <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="start">The start from LSB.</param>
            <param name="length">The length in bits.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.ExtractBitField(System.UInt64,System.Byte,System.Byte)">
            <summary>
            Extracts the bit field inside <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="start">The start from LSB.</param>
            <param name="length">The length in bits.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathIFallbacks.BigMul(System.UInt64,System.UInt64)">
            <summary>
            Multiplies the specified <paramref name="x"/> and <paramref name="y"/> and returns the high part of whole 128bit result.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.MathR">
            <summary>
            Contains some utility functions for manipulating <c>ref</c> values.
            </summary>
        </member>
        <member name="M:Shamisen.MathR.Add``1(``0@,System.IntPtr,System.IntPtr)">
            <summary>
            Adds the p0 and p1 and p2.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p0">The p0.</param>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathR.Add(System.IntPtr,System.IntPtr)">
            <summary>
            Adds the <paramref name="right"/> to the <paramref name="left"/>.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathR.Subtract(System.IntPtr,System.IntPtr)">
            <summary>
            Subtracts the <paramref name="right"/> from the <paramref name="left"/>.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>left - right.</returns>
        </member>
        <member name="M:Shamisen.MathR.Multiply(System.IntPtr,System.IntPtr)">
            <summary>
            Multiplies the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathR.ToRefByte(System.IntPtr)">
            <summary>
            Converts the specified <see cref="T:System.IntPtr"/> value to <c>ref <see cref="T:System.Byte"/></c>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathR.ToIntPtr(System.Byte@)">
            <summary>
            Converts the specified <paramref name="value"/> to <see cref="T:System.IntPtr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathR.ToPointer(System.IntPtr)">
            <summary>
            Converts the specified <paramref name="value"/> to pointer.
            </summary>
            <param name="value">The <see cref="T:System.IntPtr"/> getting converted.</param>
            <returns>
            The converted pointer.
            </returns>
        </member>
        <member name="T:Shamisen.MathX">
            <summary>
            Contains some mathematical functions for Fixed-Point numbers.
            </summary>
        </member>
        <member name="M:Shamisen.MathX.SinCosPi(Shamisen.Fixed64,System.UInt64)">
            <summary>
            Returns the <see cref="T:System.Numerics.Complex"/> value with specified angle.
            </summary>
            <param name="value">The value.</param>
            <param name="mask">The precision mask.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathX.Sin(Shamisen.Fixed64)">
            <summary>
            Calculates the <see cref="M:System.Math.Sin(System.Double)"/> of the <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MathX.SinF(Shamisen.Fixed64)">
            <summary>
            Calculates the <see cref="M:System.MathF.Sin(System.Single)"/> of the <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.ComplexD">
            <summary>
            <see cref="T:System.Numerics.Complex"/> like structure based on <see cref="T:System.Double"/>, which is sometimes hardware-accelerated.
            </summary>
        </member>
        <member name="P:Shamisen.ComplexD.Value">
            <summary>
            Gets the actual value as <see cref="T:System.Numerics.Complex"/>.
            </summary>
        </member>
        <member name="M:Shamisen.ComplexD.#ctor(System.Numerics.Complex)">
            <summary>
            Initializes a new instance of <see cref="T:Shamisen.ComplexD"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.ComplexD.#ctor(System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            Initializes a new instance of <see cref="T:Shamisen.ComplexD"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.ComplexD.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.ComplexD.Equals(Shamisen.ComplexD)">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.ComplexD.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.ComplexD.op_Equality(Shamisen.ComplexD,Shamisen.ComplexD)">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.ComplexD.op_Inequality(Shamisen.ComplexD,Shamisen.ComplexD)">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.ComplexD.op_UnaryNegation(Shamisen.ComplexD)">
            <inheritdoc cref="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)"/>
        </member>
        <member name="M:Shamisen.ComplexD.op_Addition(Shamisen.ComplexD,Shamisen.ComplexD)">
            <summary>
            Adds two complex numbers.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The sum of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexD.op_Subtraction(Shamisen.ComplexD,Shamisen.ComplexD)">
            <summary>
            Subtracts a complex number from another complex number.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexD.Conjugate(Shamisen.ComplexD)">
            <summary>
            Computes the conjugate of a complex number and returns the result.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The conjugate of <paramref name="value"/>.</returns>
        </member>
        <member name="T:Shamisen.ComplexF">
            <summary>
            <see cref="T:System.Numerics.Complex"/> like structure based on <see cref="T:System.Single"/>.<br/>
            Mainly used for storage purposes.
            </summary>
        </member>
        <member name="P:Shamisen.ComplexF.Value">
            <summary>
            Gets the actual value stored in <see cref="T:Shamisen.ComplexF"/>.
            </summary>
        </member>
        <member name="P:Shamisen.ComplexF.Real">
            <inheritdoc cref="P:System.Numerics.Complex.Real"/>
        </member>
        <member name="P:Shamisen.ComplexF.Imaginary">
            <inheritdoc cref="P:System.Numerics.Complex.Imaginary"/>
        </member>
        <member name="M:Shamisen.ComplexF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.ComplexF"/> struct.
            </summary>
            <param name="real">The real part.</param>
            <param name="imaginary">The imaginary part.</param>
        </member>
        <member name="M:Shamisen.ComplexF.#ctor(System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.ComplexF"/> struct.
            </summary>
            <param name="value">The value vector X=Real, Y=Imaginary.</param>
        </member>
        <member name="M:Shamisen.ComplexF.op_UnaryNegation(Shamisen.ComplexF@)">
            <summary>
            Returns the additive inverse of a specified complex number.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>
            The result of the <see cref="P:Shamisen.ComplexF.Real"/> and <see cref="P:Shamisen.ComplexF.Imaginary"/> components of the value parameter multiplied by -1.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.op_Subtraction(Shamisen.ComplexF@,Shamisen.ComplexF@)">
            <summary>
            Subtracts a complex number from another complex number.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.op_Addition(Shamisen.ComplexF@,Shamisen.ComplexF@)">
            <summary>
            Adds two complex numbers.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The sum of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.op_Multiply(Shamisen.ComplexF@,Shamisen.ComplexF@)">
            <summary>
            Multiplies two specified complex numbers.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The product of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.op_Multiply(Shamisen.ComplexF@,System.Single)">
            <summary>
            Multiplies specified complex number with specified real number.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The product of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.op_Division(Shamisen.ComplexF@,Shamisen.ComplexF@)">
            <summary>
            Divides a specified complex number by another specified complex number.
            </summary>
            <param name="left">The value to be divided.</param>
            <param name="right">The value to divide by.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="P:Shamisen.ComplexF.Magnitude">
            <inheritdoc cref="P:System.Numerics.Complex.Magnitude"/>
        </member>
        <member name="P:Shamisen.ComplexF.Phase">
            <inheritdoc cref="P:System.Numerics.Complex.Phase"/>
        </member>
        <member name="F:Shamisen.ComplexF.InverseLog10">
            <summary>
            The inverse of ln(10)
            </summary>
            <autogeneratedoc />
        </member>
        <member name="P:Shamisen.ComplexF.Zero">
            <summary>
            Returns a new Complex instance with a real number equal to zero and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="P:Shamisen.ComplexF.One">
            <summary>
            Returns a new Complex instance with a real number equal to one and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="P:Shamisen.ComplexF.ImaginaryOne">
            <summary>
            Returns a new Complex instance with a real number equal to zero and an imaginary number equal to one.
            </summary>
        </member>
        <member name="M:Shamisen.ComplexF.op_Equality(Shamisen.ComplexF,Shamisen.ComplexF)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.ComplexF"/> objects are equal.
            </summary>
            <param name="complex1">The first <see cref="T:Shamisen.ComplexF"/> to compare.</param>
            <param name="complex2">The second <see cref="T:Shamisen.ComplexF"/> to compare.</param>
            <returns>
              <c>true</c> if the value of complex1 is the same as the value of complex2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.op_Inequality(Shamisen.ComplexF,Shamisen.ComplexF)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.ComplexF"/> objects are not equal.
            </summary>
            <param name="complex1">The first <see cref="T:Shamisen.ComplexF"/> to compare.</param>
            <param name="complex2">The second <see cref="T:Shamisen.ComplexF"/> to compare.</param>
            <returns>
              <c>true</c> if complex1 and complex2 are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.Equals(Shamisen.ComplexF)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this instance to string.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.op_Implicit(Shamisen.ComplexF)~System.Numerics.Complex">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.ComplexF"/> to <see cref="T:System.Numerics.Complex"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.op_Implicit(System.Single)~Shamisen.ComplexF">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Shamisen.ComplexF"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.op_Explicit(System.Numerics.Complex@)~Shamisen.ComplexF">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Numerics.Complex"/> to <see cref="T:Shamisen.ComplexF"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.Abs(Shamisen.ComplexF)">
            <summary>
            Gets the absolute value (or magnitude) of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The absolute value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Shamisen.ComplexF.Conjugate(Shamisen.ComplexF)">
            <summary>
            Computes the conjugate of a complex number and returns the result.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The conjugate of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Shamisen.ComplexF.Reciprocal(Shamisen.ComplexF)">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The reciprocal of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Shamisen.ComplexF.Add(Shamisen.ComplexF,Shamisen.ComplexF)">
            <summary>
            Adds two complex numbers and returns the result.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The sum of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.Subtract(Shamisen.ComplexF,Shamisen.ComplexF)">
            <summary>
            Subtracts a complex number from another complex number and returns the result.
            </summary>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.Multiply(Shamisen.ComplexF,Shamisen.ComplexF)">
            <summary>
            Multiplies two specified complex numbers.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The product of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.Divide(Shamisen.ComplexF,Shamisen.ComplexF)">
            <summary>
            Divides a specified complex number by another specified complex number.
            </summary>
            <param name="left">The value to be divided.</param>
            <param name="right">The value to divide by.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.Negate(Shamisen.ComplexF)">
            <summary>
            Returns the additive inverse of a specified complex number.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>
            The result of the <see cref="P:Shamisen.ComplexF.Real"/> and <see cref="P:Shamisen.ComplexF.Imaginary"/> components of the value parameter multiplied by -1.
            </returns>
        </member>
        <member name="M:Shamisen.ComplexF.FromPolarCoordinates(System.Double,System.Double)">
            <summary>
            Creates a complex number from a point's polar coordinates.
            </summary>
            <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
            <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
            <returns>A complex number.</returns>
        </member>
        <member name="M:Shamisen.ComplexF.FromPolarCoordinates(System.Single,System.Single)">
            <summary>
            Creates a complex number from a point's polar coordinates.
            </summary>
            <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
            <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
            <returns>A complex number.</returns>
        </member>
        <member name="M:Shamisen.ComplexF.Sqrt(Shamisen.ComplexF)">
            <summary>
            Returns the square root of a specified complex number.
            </summary>
            <param name="value">A complex number.</param>
            <returns>The square root of <paramref name="value"/>.</returns>
        </member>
        <member name="M:Shamisen.ComplexF.AsComplexF(System.Runtime.Intrinsics.Vector128{System.Single}@)">
            <summary>
            Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1"/> as a new <see cref="T:Shamisen.ComplexF"/>.
            </summary>
            <param name="value">The vector to reinterpret.</param>
            <returns><paramref name="value"/> reinterpreted as a new <see cref="T:System.Numerics.Vector4"/>.</returns>
        </member>
        <member name="M:Shamisen.ComplexF.AsComplexF(System.Numerics.Vector2@)">
            <summary>
            Reinterprets a <see cref="T:System.Numerics.Vector2"/> as a new <see cref="T:Shamisen.ComplexF"/>.
            </summary>
            <param name="value">The vector to reinterpret.</param>
            <returns><paramref name="value"/> reinterpreted as a new <see cref="T:Shamisen.ComplexF"/>.</returns>
        </member>
        <member name="T:Shamisen.Numerics.ComplexUtils">
            <summary>
            Contains some utility functions to deal with <see cref="T:System.Numerics.Complex"/>, <see cref="T:Shamisen.ComplexF"/>, and <see cref="T:Shamisen.ComplexD"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Numerics.ComplexUtils.MultiplyAll(System.Span{Shamisen.ComplexF},System.ReadOnlySpan{Shamisen.ComplexF},Shamisen.ComplexF)">
            <summary>
            Multiplies all the contents of <paramref name="source"/> with <paramref name="value"/>, and stores to <paramref name="destination"/>.
            </summary>
            <param name="destination">The place to store.</param>
            <param name="source">The multiplying values.</param>
            <param name="value">The multiplying constant value.</param>
        </member>
        <member name="M:Shamisen.Numerics.ComplexUtils.MultiplyAll(System.Span{System.Numerics.Complex},System.ReadOnlySpan{System.Numerics.Complex},System.Numerics.Complex)">
            <summary>
            Multiplies all the contents of <paramref name="source"/> with <paramref name="value"/>, and stores to <paramref name="destination"/>.
            </summary>
            <param name="destination">The place to store.</param>
            <param name="source">The multiplying values.</param>
            <param name="value">The multiplying constant value.</param>
        </member>
        <member name="M:Shamisen.Numerics.ComplexUtils.ConvertRealToComplex(System.Span{Shamisen.ComplexF},System.ReadOnlySpan{System.Single})">
            <summary>
            Converts each elements of <paramref name="source"/> to <see cref="T:Shamisen.ComplexF"/>, and stores to <paramref name="destination"/>.
            </summary>
            <param name="destination">The destination to store converted numbers.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Shamisen.Numerics.ComplexUtils.ExtractMagnitudeSquared(System.Span{System.Single},System.ReadOnlySpan{Shamisen.ComplexF})">
            <summary>
            Calculates magnitude squared for elements of <paramref name="source"/> and stores to <paramref name="destination"/>.
            </summary>
            <param name="destination">The place to store values.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:Shamisen.Utils.Numerics.Vector2Int16">
            <summary>
            Represents a vector with 2 <see cref="T:System.Int16"/> values.
            </summary>
        </member>
        <member name="T:Shamisen.Utils.Numerics.Vector4Int32">
            <summary>
            Represents a vector of 4 <see cref="T:System.Int32"/> numbers.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Numerics.Vector4Int32.X">
            <summary>
            Gets the value of 1st component of this <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Numerics.Vector4Int32.Y">
            <summary>
            Gets the value of 2nd component of this <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Numerics.Vector4Int32.Z">
            <summary>
            Gets the value of 3rd component of this <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Numerics.Vector4Int32.W">
            <summary>
            Gets the value of 4th component of this <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Numerics.Vector4Int32.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/>.
            </summary>
            <param name="x">The 1st value of the vector.</param>
            <param name="y">The 2nd value of the vector.</param>
            <param name="z">The 3rd value of the vector.</param>
            <param name="w">The 4th value of the vector.</param>
        </member>
        <member name="M:Shamisen.Utils.Numerics.Vector4Int32.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Numerics.Vector4Int32.Equals(Shamisen.Utils.Numerics.Vector4Int32)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Numerics.Vector4Int32.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Numerics.Vector4Int32.op_Equality(Shamisen.Utils.Numerics.Vector4Int32,Shamisen.Utils.Numerics.Vector4Int32)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Numerics.Vector4Int32.op_Inequality(Shamisen.Utils.Numerics.Vector4Int32,Shamisen.Utils.Numerics.Vector4Int32)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Utils.Numerics.Vector4Int32"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.AudioUtils">
            <summary>
            Contains some utility functions for manipulating audio data.
            </summary>
            <summary>
            Contains some utility functions for manipulating audio data.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.FastAdd(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>
            Adds the <paramref name="samplesToAdd"/> to <paramref name="buffer"/>.<br/>
            The length of the <paramref name="samplesToAdd"/> and <paramref name="buffer"/> must be the same:
            if the <paramref name="samplesToAdd"/> is longer, the trailing extra element will be ignored;
            if the <paramref name="buffer"/> is longer, the trailing extra element will remain unchanged.
            </summary>
            <param name="samplesToAdd">The samples to add.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentException">samplesToAdd</exception>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.FastAdd(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>
            Adds the <paramref name="samplesA"/> and <paramref name="samplesB"/>, and stores to <paramref name="buffer"/>.
            </summary>
            <param name="samplesA">The samples to add.</param>
            <param name="samplesB">The samples to add.</param>
            <param name="buffer">The destination.</param>
            <exception cref="T:System.ArgumentException">samplesToAdd</exception>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.FastScalarMultiply(System.Span{System.Single},System.Single)">
            <summary>
            Multiplies the specified samples faster, with the given <paramref name="scale"/>.
            </summary>
            <param name="span">The span to multiply.</param>
            <param name="scale">The value to be multiplied.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.FastScalarMultiply(System.Span{System.Double},System.Double)">
            <summary>
            Multiplies the specified samples faster, with the given <paramref name="scale"/>.
            </summary>
            <param name="span">The span to multiply.</param>
            <param name="scale">The value to be multiplied.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.FastScalarMultiplyStandardVariable(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Vectorized path using <see cref="T:System.Numerics.Vector`1"/> which uses variable-sized vectors.<br/>
            Performs better in either ARMv8, Rocket Lake or later, or pre-Sandy-Bridge x64 CPUs due to CPU clock limits.<br/>
            Future versions of .NET may improve performance if <see cref="T:System.Numerics.Vector`1"/> utilizes either x64 AVX-512 or ARMv8.2-A SVE.
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.FastScalarMultiplyStandardVariable(System.Span{System.Double},System.ReadOnlySpan{System.Double},System.Double)">
            <summary>
            Vectorized path using <see cref="T:System.Numerics.Vector`1"/> which uses variable-sized vectors.<br/>
            Future versions of .NET may improve performance if <see cref="T:System.Numerics.Vector`1"/> utilizes either x64 AVX-512 or ARMv8.2-A SVE.
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.FastMultiply(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>
            Multiplies specified <paramref name="sourceA"/> and <paramref name="sourceB"/> and stores to <paramref name="destination"/>.<br/>
            The length of <paramref name="sourceA"/>, <paramref name="sourceB"/>, and <paramref name="destination"/> must be the same.
            Otherwise, only the forward elements of sourceA and sourceB will be calculated, and only the forward elements of destination will be updated, both according to the shortest length of one of them.
            </summary>
            <param name="destination">The place to store the product of <paramref name="sourceA"/> and <paramref name="sourceB"/>.</param>
            <param name="sourceA">The values to multiply.</param>
            <param name="sourceB">The values to multiply.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.FastMix(System.ReadOnlySpan{System.Single},System.Span{System.Single},System.Single)">
            <summary>
            Mixes the <paramref name="samplesToMix"/> to <paramref name="buffer"/>.
            </summary>
            <param name="samplesToMix">The samples to add.</param>
            <param name="buffer">The buffer.</param>
            <param name="scale">The scale to scale <paramref name="samplesToMix"/>.</param>
            <exception cref="T:System.ArgumentException">samplesToMix</exception>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.FastMix(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Single,System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Mixes the <paramref name="samplesA"/> and <paramref name="samplesB"/> to <paramref name="buffer"/>.
            The length of <paramref name="samplesA"/>, <paramref name="samplesB"/>, and <paramref name="buffer"/> must be the same.
            Otherwise, only the forward elements of <paramref name="samplesA"/> and <paramref name="samplesB"/> will be calculated, and only the forward elements of <paramref name="buffer"/> will be updated, both according to the shortest length of one of them.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="samplesA">The samples a.</param>
            <param name="volumeA">The volume of <paramref name="samplesA"/>.</param>
            <param name="samplesB">The samples b.</param>
            <param name="volumeB">The volume of <paramref name="samplesB"/>.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.Offset(System.Span{System.Int32},System.ReadOnlySpan{System.Int32},System.Int32)">
            <summary>
            Adds <paramref name="offset"/> to each elements in <paramref name="source"/> and stores to <paramref name="destination"/>.
            </summary>
            <param name="destination">The place to put sum in.</param>
            <param name="source">The values to add <paramref name="offset"/>.</param>
            <param name="offset">The value to add.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.InterleaveStereo(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>
            Interleaves and stores Stereo samples to <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="left">The input buffer for left channel.</param>
            <param name="right">The input buffer for right channel.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.InterleaveStereo(System.Span{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32})">
            <summary>
            Interleaves and stores Stereo samples to <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="left">The input buffer for left channel.</param>
            <param name="right">The input buffer for right channel.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.InterleaveThree(System.Span{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32})">
            <summary>
            Interleaves and stores Stereo samples to <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="left">The input buffer for left channel.</param>
            <param name="right">The input buffer for right channel.</param>
            <param name="center">The input buffer for center channel.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.InterleaveQuad(System.Span{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32})">
            <summary>
            Interleaves and stores Stereo samples to <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="frontLeft">The input buffer for front left channel.</param>
            <param name="frontRight">The input buffer for front right channel.</param>
            <param name="rearLeft">The input buffer for rear left channel.</param>
            <param name="rearRight">The input buffer for rear right channel.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.DuplicateMonauralToStereo(System.Span{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>
            Duplicates specified monaural signal <paramref name="source"/> to the specified stereo <paramref name="destination"/>.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.DuplicateMonauralToThree(System.Span{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>
            Duplicates specified monaural signal <paramref name="source"/> to the specified <paramref name="destination"/> with 3 channels.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.DuplicateMonauralToQuad(System.Span{System.Single},System.ReadOnlySpan{System.Single})">
            <summary>
            Duplicates specified monaural signal <paramref name="source"/> to the specified <paramref name="destination"/> with 4 channels.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.DuplicateMonauralToChannels(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Int32)">
            <summary>
            Duplicates specified monaural samples <paramref name="source"/> to <paramref name="channels"/>, and writes to <paramref name="destination"/>.<br/>
            This method assumes that either <paramref name="source"/> and <paramref name="destination"/> don't overlap at all,
             or <paramref name="source"/> is at the very end of the <paramref name="destination"/> if you allow <paramref name="source"/> to be overwritten.<br/>
            Otherwise both the <paramref name="source"/> and <paramref name="destination"/> will be corrupted and results in complete chaos!
            </summary>
            <param name="destination">The multi-channel destination.</param>
            <param name="source">The monaural source.</param>
            <param name="channels">The number of channels.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.DeinterleaveStereoSingle(System.ReadOnlySpan{System.Single},System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Deinterleaves <paramref name="buffer"/> to <paramref name="left"/> and <paramref name="right"/>.
            </summary>
            <param name="buffer">The source.</param>
            <param name="left">The destination to store even-indexed samples.</param>
            <param name="right">The destination to store odd-indexed samples.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.ReplaceNaNsWith(System.Span{System.Single},System.Single)">
            <summary>
            Replaces all elements in <paramref name="span"/> that satisfies <see cref="M:System.Single.IsNaN(System.Single)"/> == <see langword="true"/>, with specified <paramref name="value"/>.
            </summary>
            <param name="span">The values to replace NaNs with <paramref name="value"/>.</param>
            <param name="value">The value to replace NaNs in <paramref name="span"/> with.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.ReplaceNaNsWith(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Replaces all elements in <paramref name="source"/> that satisfies <see cref="M:System.Single.IsNaN(System.Single)"/> == <see langword="true"/>, with specified <paramref name="value"/>.
            </summary>
            <param name="destination">The place to store value to.</param>
            <param name="source">The values to replace NaNs with <paramref name="value"/>.</param>
            <param name="value">The value to replace NaNs in <paramref name="source"/> with.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.Max(System.ReadOnlySpan{System.Single})">
            <summary>
            Returns the maximum value in <paramref name="values"/>.
            </summary>
            <param name="values">The values.</param>
            <returns>The maximum value in <paramref name="values"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.Min(System.ReadOnlySpan{System.Single})">
            <summary>
            Returns the minimum value in <paramref name="values"/>.
            </summary>
            <param name="values">The values.</param>
            <returns>The minimum value in <paramref name="values"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.Log2ApproximationOrder5(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Boolean)">
            <summary>
            Calculates the approximation of the binary logarithm for each element of <paramref name="source"/> using a 5th order polynomial and stores it in <paramref name="destination"/>.<br/>
            The maximum error in the range [1.0, 2.0) is:<br/>
            1.4534581828540283E-05 without FMA<br/>
            1.4488913925525537E-05 with FMA<br/>
            The length of the <paramref name="source"/> and <paramref name="destination"/> must be the same:
            if the <paramref name="source"/> is longer, the trailing extra element will be ignored;
            if the <paramref name="destination"/> is longer, the trailing extra element will remain unchanged.
            </summary>
            <param name="destination">The place to store the approximation of the binary logarithm for each element of <paramref name="source"/>.</param>
            <param name="source">The values to calculate the approximation of the binary logarithm.</param>
            <param name="allowFma">
            The value which indicates whether the <see cref="M:Shamisen.Utils.AudioUtils.Log2ApproximationOrder5(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Boolean)"/> can utilize Fused Multiply-Adds.<br/>
            Polynomial computation using FMA yields different results than polynomial computation without FMA, but it can be faster without significantly increasing the average error.
            </param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.Log10ApproximationOrder5(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Boolean)">
            <summary>
            Calculates the approximation of the decimal logarithm for each element of <paramref name="source"/> using a 5th order polynomial and stores it in <paramref name="destination"/>.<br/>
            The calculation is done by calculating binary logarithm with <see cref="M:Shamisen.Utils.AudioUtils.Log2ApproximationOrder5(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Boolean)"/> first, then multiplying the constant 0.3010299956639812f.<br/>
            The length of the <paramref name="source"/> and <paramref name="destination"/> must be the same:
            if the <paramref name="source"/> is longer, the trailing extra element will be ignored;
            if the <paramref name="destination"/> is longer, the trailing extra element will remain unchanged.
            </summary>
            <param name="destination">The place to store the approximation of the decimal logarithm for each element of <paramref name="source"/>.</param>
            <param name="source">The values to calculate the approximation of the decimal logarithm.</param>
            <param name="allowFma">
            The value which indicates whether the <see cref="M:Shamisen.Utils.AudioUtils.Log2ApproximationOrder5(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Boolean)"/> can utilize Fused Multiply-Adds.<br/>
            Polynomial computation using FMA yields different results than polynomial computation without FMA, but it can be faster without significantly increasing the average error.
            </param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.Interleave5Channels(System.Span{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32})">
            <summary>
            Interleaves and stores audio samples with 5 channels, to <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="a0">The input buffer for channel No.0.</param>
            <param name="a1">The input buffer for channel No.1.</param>
            <param name="a2">The input buffer for channel No.2.</param>
            <param name="a3">The input buffer for channel No.3.</param>
            <param name="a4">The input buffer for channel No.4.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.Interleave6Channels(System.Span{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32})">
            <summary>
            Interleaves and stores audio samples with 6 channels, to <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="a0">The input buffer for channel No.0.</param>
            <param name="a1">The input buffer for channel No.1.</param>
            <param name="a2">The input buffer for channel No.2.</param>
            <param name="a3">The input buffer for channel No.3.</param>
            <param name="a4">The input buffer for channel No.4.</param>
            <param name="a5">The input buffer for channel No.5.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.Interleave7Channels(System.Span{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32})">
            <summary>
            Interleaves and stores audio samples with 7 channels, to <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="a0">The input buffer for channel No.0.</param>
            <param name="a1">The input buffer for channel No.1.</param>
            <param name="a2">The input buffer for channel No.2.</param>
            <param name="a3">The input buffer for channel No.3.</param>
            <param name="a4">The input buffer for channel No.4.</param>
            <param name="a5">The input buffer for channel No.5.</param>
            <param name="a6">The input buffer for channel No.6.</param>
        </member>
        <member name="M:Shamisen.Utils.AudioUtils.Interleave8Channels(System.Span{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32})">
            <summary>
            Interleaves and stores audio samples with 8 channels, to <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="a0">The input buffer for channel No.0.</param>
            <param name="a1">The input buffer for channel No.1.</param>
            <param name="a2">The input buffer for channel No.2.</param>
            <param name="a3">The input buffer for channel No.3.</param>
            <param name="a4">The input buffer for channel No.4.</param>
            <param name="a5">The input buffer for channel No.5.</param>
            <param name="a6">The input buffer for channel No.6.</param>
            <param name="a7">The input buffer for channel No.7.</param>
        </member>
        <member name="T:Shamisen.Utils.EndiannessExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="F:Shamisen.Utils.EndiannessExtensions.EnvironmentEndianness">
            <summary>
            Gets the environment's endianness.
            </summary>
            <value>
            The environment endianness.
            </value>
        </member>
        <member name="T:Shamisen.Utils.FastMath">
            <summary>
            Contains some mathematical functions for Floating-Point numbers.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.FastMath.Max(System.Single,System.Single)">
            <returns>
            Parameter x or y, whichever is larger.
            If <paramref name="x"/>, or <paramref name="y"/>, or both <paramref name="x"/> and <paramref name="y"/> are equal to <see cref="F:System.Single.NaN"/>,
            the result might depend on CPUs.
            </returns>
            <inheritdoc cref="M:System.Math.Max(System.Single,System.Single)"/>
        </member>
        <member name="M:Shamisen.Utils.FastMath.Max(System.Double,System.Double)">
            <returns>
            Parameter x or y, whichever is larger.
            If <paramref name="x"/>, or <paramref name="y"/>, or both <paramref name="x"/> and <paramref name="y"/> are equal to <see cref="F:System.Double.NaN"/>,
            the result might depend on CPUs.
            </returns>
            <inheritdoc cref="M:System.Math.Max(System.Double,System.Double)"/>
        </member>
        <member name="M:Shamisen.Utils.FastMath.Min(System.Single,System.Single)">
            <returns>
            Parameter x or y, whichever is smaller.
            If <paramref name="x"/>, or <paramref name="y"/>, or both <paramref name="x"/> and <paramref name="y"/> are equal to <see cref="F:System.Single.NaN"/>,
            the result might depend on CPUs.
            </returns>
            <inheritdoc cref="M:System.Math.Min(System.Single,System.Single)"/>
        </member>
        <member name="M:Shamisen.Utils.FastMath.Min(System.Double,System.Double)">
            <returns>
            Parameter x or y, whichever is smaller.
            If <paramref name="x"/>, or <paramref name="y"/>, or both <paramref name="x"/> and <paramref name="y"/> are equal to <see cref="F:System.Double.NaN"/>,
            the result might depend on CPUs.
            </returns>
            <inheritdoc cref="M:System.Math.Min(System.Double,System.Double)"/>
        </member>
        <member name="M:Shamisen.Utils.FastMath.MaxUnsignedInputs(System.Single,System.Single)">
            <summary>
            Returns the smaller of two single-precision floating-point numbers.
            This one assumes both <paramref name="x"/> and <paramref name="y"/> to be positive.
            </summary>
            <returns>
            Parameter x or y, whichever is larger.
            If <paramref name="x"/>, or <paramref name="y"/>, or both <paramref name="x"/> and <paramref name="y"/> are equal to <see cref="F:System.Single.NaN"/>,
            the result might depend on CPUs.
            This one assumes both <paramref name="x"/> and <paramref name="y"/> to be positive.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.FastMath.MinUnsignedInputs(System.Single,System.Single)">
            <summary>
            Returns the smaller of two single-precision floating-point numbers.
            This one assumes both <paramref name="x"/> and <paramref name="y"/> to be positive.
            </summary>
            <returns>
            Parameter x or y, whichever is smaller.
            If <paramref name="x"/>, or <paramref name="y"/>, or both <paramref name="x"/> and <paramref name="y"/> are equal to <see cref="F:System.Single.NaN"/>,
            the result might depend on CPUs.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.FastMath.Round(System.Single)">
            <summary>
            Rounds a single-precision floating-point value to the nearest integral value,
            and rounds midpoint values to the nearest even number.
            </summary>
            <param name="x">A single-precision floating-point number to be rounded.</param>
            <returns>The integer nearest <paramref name="x"/>. If the fractional component of <paramref name="x"/> is halfway between two
            integers, one of which is even and the other odd, then the even number is returned.
            Note that this method returns a <see cref="T:System.Single"/> instead of an integral type.</returns>
        </member>
        <member name="T:Shamisen.Utils.Intrinsics.AdvSimdUtils">
            <summary>
            Contains some utility functions for <see cref="T:System.Runtime.Intrinsics.Arm.AdvSimd"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Intrinsics.AdvSimdUtils.IsSupported">
            <inheritdoc cref="P:System.Runtime.Intrinsics.Arm.AdvSimd.IsSupported"/>
        </member>
        <member name="T:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64">
            <summary>
            Contains some utility functions for <see cref="T:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.IsSupported">
            <inheritdoc cref="P:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.IsSupported"/>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Single@,System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Single@,System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Single*,System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Double@,System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Double@,System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Double*,System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Byte@,System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Byte@,System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Byte*,System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.UInt16@,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.UInt16@,System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt16*,System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.UInt32@,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.UInt32@,System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt32*,System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.UInt64@,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.UInt64@,System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.UInt64*,System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.SByte@,System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.SByte@,System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.SByte*,System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Int16@,System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Int16@,System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int16*,System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Int32@,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Int32@,System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int32*,System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Int64@,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AdvSimdUtils.Arm64.StorePair(System.Int64@,System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
            <summary>
            Executes <see cref="M:System.Runtime.Intrinsics.Arm.AdvSimd.Arm64.StorePair(System.Int64*,System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})" /> when in Release mode, but falls back in Debug mode.
            </summary>
            <param name="address">The target address.</param>
            <param name="value1">The first value to write.</param>
            <param name="value2">The second value to write.</param>
        </member>
        <member name="T:Shamisen.Utils.Intrinsics.Avx2Utils">
            <summary>
            Contains some utility functions for <see cref="T:System.Runtime.Intrinsics.X86.Avx2"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Intrinsics.Avx2Utils.IsSupported">
            <summary>
            Gets the value which indicates whether the <see cref="T:Shamisen.Utils.Intrinsics.Avx2Utils"/> can be used in this machine.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.Avx2Utils.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
            <inheritdoc cref="M:System.Runtime.Intrinsics.X86.Avx.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})"/>
        </member>
        <member name="T:Shamisen.Utils.Intrinsics.AvxUtils">
            <summary>
            Contains some utility functions for <see cref="T:System.Runtime.Intrinsics.X86.Avx"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Intrinsics.AvxUtils.IsSupported">
            <summary>
            Gets the value which indicates whether the <see cref="T:Shamisen.Utils.Intrinsics.AvxUtils"/> can be used in this machine.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AvxUtils.BroadcastScalarToVector128(System.Single@)">
            <inheritdoc cref="M:System.Runtime.Intrinsics.X86.Avx.BroadcastScalarToVector128(System.Single*)"/>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.AvxUtils.Xor(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
            <inheritdoc cref="M:System.Runtime.Intrinsics.X86.Avx.Xor(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})"/>
        </member>
        <member name="T:Shamisen.Utils.Intrinsics.Sse2Utils">
            <summary>
            Contains some utility functions for <see cref="T:System.Runtime.Intrinsics.X86.Sse2"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Intrinsics.Sse2Utils.IsSupported">
            <summary>
            Gets the value which indicates whether the <see cref="T:Shamisen.Utils.Intrinsics.Sse2Utils"/> can be used in this machine.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.Sse2Utils.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
            <inheritdoc cref="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)"/>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.Sse2Utils.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
            <inheritdoc cref="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)"/>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.Sse2Utils.MoveAndDuplicate(System.Runtime.Intrinsics.Vector128{System.Double})">
            <inheritdoc cref="M:System.Runtime.Intrinsics.X86.Sse3.MoveAndDuplicate(System.Runtime.Intrinsics.Vector128{System.Double})"/>
        </member>
        <member name="T:Shamisen.Utils.Intrinsics.Ssse3Utils">
            <summary>
            Contains some utility functions for <see cref="T:System.Runtime.Intrinsics.X86.Ssse3"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Intrinsics.Ssse3Utils.IsSupported">
            <summary>
            Gets the value which indicates whether the <see cref="T:Shamisen.Utils.Intrinsics.Ssse3Utils"/> can be used in this machine.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Intrinsics.Ssse3Utils.AlignRight(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
            <inheritdoc cref="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)"/>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX2`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX2`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX2`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX2`1.#ctor(`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX2`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX2`1.Deconstruct(`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX2`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX2`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX2{`0})~System.ValueTuple{`0,`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX2`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX2`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX2`1.op_Implicit(System.ValueTuple{`0,`0})~Shamisen.Utils.Tuples.UnmanagedTupleX2{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX2`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`2"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX3`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX3`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX3`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX3`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX3`1.#ctor(`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX3`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX3`1.Deconstruct(`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX3`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX3`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX3{`0})~System.ValueTuple{`0,`0,`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX3`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX3`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX3`1.op_Implicit(System.ValueTuple{`0,`0,`0})~Shamisen.Utils.Tuples.UnmanagedTupleX3{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX3`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`3"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX4`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX4`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX4`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX4`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX4`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX4`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX4`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX4`1.Deconstruct(`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX4`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX4`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX4{`0})~System.ValueTuple{`0,`0,`0,`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX4`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX4`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX4`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0})~Shamisen.Utils.Tuples.UnmanagedTupleX4{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX4`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`4"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX5`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX5`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX5`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX5`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX5`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX5`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX5`1.#ctor(`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX5`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX5`1.Deconstruct(`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX5`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX5`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX5{`0})~System.ValueTuple{`0,`0,`0,`0,`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX5`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX5`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX5`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0})~Shamisen.Utils.Tuples.UnmanagedTupleX5{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX5`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`5"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX6`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX6`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX6`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX6`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX6`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX6`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX6`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX6`1.#ctor(`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX6`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX6`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX6`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX6`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX6{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX6`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX6`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX6`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0})~Shamisen.Utils.Tuples.UnmanagedTupleX6{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX6`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`6"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX7`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.Item6">
            <summary>
            The item No.6.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.#ctor(`0,`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX7`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
            <param name="v6">The value No.6.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX7`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
            <param name="v6">The output value No.6.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX7{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0,`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX7`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX7`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX7`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0,`0})~Shamisen.Utils.Tuples.UnmanagedTupleX7{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX7`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`7"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX8`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.Item6">
            <summary>
            The item No.6.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.Item7">
            <summary>
            The item No.7.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX8`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
            <param name="v6">The value No.6.</param>
            <param name="v7">The value No.7.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX8`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
            <param name="v6">The output value No.6.</param>
            <param name="v7">The output value No.7.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX8{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0}}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX8`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX8`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX8`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0}})~Shamisen.Utils.Tuples.UnmanagedTupleX8{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX8`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`8"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX9`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.Item6">
            <summary>
            The item No.6.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.Item7">
            <summary>
            The item No.7.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.Item8">
            <summary>
            The item No.8.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX9`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
            <param name="v6">The value No.6.</param>
            <param name="v7">The value No.7.</param>
            <param name="v8">The value No.8.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX9`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
            <param name="v6">The output value No.6.</param>
            <param name="v7">The output value No.7.</param>
            <param name="v8">The output value No.8.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX9{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0}}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX9`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX9`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX9`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0}})~Shamisen.Utils.Tuples.UnmanagedTupleX9{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX9`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX10`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Item6">
            <summary>
            The item No.6.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Item7">
            <summary>
            The item No.7.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Item8">
            <summary>
            The item No.8.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Item9">
            <summary>
            The item No.9.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX10`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
            <param name="v6">The value No.6.</param>
            <param name="v7">The value No.7.</param>
            <param name="v8">The value No.8.</param>
            <param name="v9">The value No.9.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX10`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
            <param name="v6">The output value No.6.</param>
            <param name="v7">The output value No.7.</param>
            <param name="v8">The output value No.8.</param>
            <param name="v9">The output value No.9.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX10{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0}}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX10`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX10`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX10`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0}})~Shamisen.Utils.Tuples.UnmanagedTupleX10{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX10`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX11`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item6">
            <summary>
            The item No.6.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item7">
            <summary>
            The item No.7.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item8">
            <summary>
            The item No.8.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item9">
            <summary>
            The item No.9.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Item10">
            <summary>
            The item No.10.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX11`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
            <param name="v6">The value No.6.</param>
            <param name="v7">The value No.7.</param>
            <param name="v8">The value No.8.</param>
            <param name="v9">The value No.9.</param>
            <param name="v10">The value No.10.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX11`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
            <param name="v6">The output value No.6.</param>
            <param name="v7">The output value No.7.</param>
            <param name="v8">The output value No.8.</param>
            <param name="v9">The output value No.9.</param>
            <param name="v10">The output value No.10.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX11{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0}}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX11`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX11`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX11`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0}})~Shamisen.Utils.Tuples.UnmanagedTupleX11{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX11`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX12`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item6">
            <summary>
            The item No.6.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item7">
            <summary>
            The item No.7.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item8">
            <summary>
            The item No.8.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item9">
            <summary>
            The item No.9.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item10">
            <summary>
            The item No.10.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Item11">
            <summary>
            The item No.11.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX12`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
            <param name="v6">The value No.6.</param>
            <param name="v7">The value No.7.</param>
            <param name="v8">The value No.8.</param>
            <param name="v9">The value No.9.</param>
            <param name="v10">The value No.10.</param>
            <param name="v11">The value No.11.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX12`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
            <param name="v6">The output value No.6.</param>
            <param name="v7">The output value No.7.</param>
            <param name="v8">The output value No.8.</param>
            <param name="v9">The output value No.9.</param>
            <param name="v10">The output value No.10.</param>
            <param name="v11">The output value No.11.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX12{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0,`0}}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX12`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX12`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX12`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0,`0}})~Shamisen.Utils.Tuples.UnmanagedTupleX12{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX12`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX13`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item6">
            <summary>
            The item No.6.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item7">
            <summary>
            The item No.7.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item8">
            <summary>
            The item No.8.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item9">
            <summary>
            The item No.9.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item10">
            <summary>
            The item No.10.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item11">
            <summary>
            The item No.11.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Item12">
            <summary>
            The item No.12.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX13`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
            <param name="v6">The value No.6.</param>
            <param name="v7">The value No.7.</param>
            <param name="v8">The value No.8.</param>
            <param name="v9">The value No.9.</param>
            <param name="v10">The value No.10.</param>
            <param name="v11">The value No.11.</param>
            <param name="v12">The value No.12.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX13`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
            <param name="v6">The output value No.6.</param>
            <param name="v7">The output value No.7.</param>
            <param name="v8">The output value No.8.</param>
            <param name="v9">The output value No.9.</param>
            <param name="v10">The output value No.10.</param>
            <param name="v11">The output value No.11.</param>
            <param name="v12">The output value No.12.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX13{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0,`0,`0}}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX13`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX13`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX13`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0,`0,`0}})~Shamisen.Utils.Tuples.UnmanagedTupleX13{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX13`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX14`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item6">
            <summary>
            The item No.6.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item7">
            <summary>
            The item No.7.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item8">
            <summary>
            The item No.8.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item9">
            <summary>
            The item No.9.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item10">
            <summary>
            The item No.10.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item11">
            <summary>
            The item No.11.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item12">
            <summary>
            The item No.12.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Item13">
            <summary>
            The item No.13.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX14`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
            <param name="v6">The value No.6.</param>
            <param name="v7">The value No.7.</param>
            <param name="v8">The value No.8.</param>
            <param name="v9">The value No.9.</param>
            <param name="v10">The value No.10.</param>
            <param name="v11">The value No.11.</param>
            <param name="v12">The value No.12.</param>
            <param name="v13">The value No.13.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX14`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
            <param name="v6">The output value No.6.</param>
            <param name="v7">The output value No.7.</param>
            <param name="v8">The output value No.8.</param>
            <param name="v9">The output value No.9.</param>
            <param name="v10">The output value No.10.</param>
            <param name="v11">The output value No.11.</param>
            <param name="v12">The output value No.12.</param>
            <param name="v13">The output value No.13.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX14{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0,`0,`0,`0}}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX14`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX14`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX14`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0,`0,`0,`0}})~Shamisen.Utils.Tuples.UnmanagedTupleX14{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX14`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX15`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item6">
            <summary>
            The item No.6.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item7">
            <summary>
            The item No.7.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item8">
            <summary>
            The item No.8.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item9">
            <summary>
            The item No.9.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item10">
            <summary>
            The item No.10.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item11">
            <summary>
            The item No.11.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item12">
            <summary>
            The item No.12.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item13">
            <summary>
            The item No.13.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Item14">
            <summary>
            The item No.14.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX15`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
            <param name="v6">The value No.6.</param>
            <param name="v7">The value No.7.</param>
            <param name="v8">The value No.8.</param>
            <param name="v9">The value No.9.</param>
            <param name="v10">The value No.10.</param>
            <param name="v11">The value No.11.</param>
            <param name="v12">The value No.12.</param>
            <param name="v13">The value No.13.</param>
            <param name="v14">The value No.14.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX15`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
            <param name="v6">The output value No.6.</param>
            <param name="v7">The output value No.7.</param>
            <param name="v8">The output value No.8.</param>
            <param name="v9">The output value No.9.</param>
            <param name="v10">The output value No.10.</param>
            <param name="v11">The output value No.11.</param>
            <param name="v12">The output value No.12.</param>
            <param name="v13">The output value No.13.</param>
            <param name="v14">The output value No.14.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX15{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0}}}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX15`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX15`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX15`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0}}})~Shamisen.Utils.Tuples.UnmanagedTupleX15{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX15`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.Tuples.UnmanagedTupleX16`1">
            <summary>
            TODO: Documentation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item0">
            <summary>
            The item No.0.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item1">
            <summary>
            The item No.1.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item2">
            <summary>
            The item No.2.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item3">
            <summary>
            The item No.3.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item4">
            <summary>
            The item No.4.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item5">
            <summary>
            The item No.5.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item6">
            <summary>
            The item No.6.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item7">
            <summary>
            The item No.7.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item8">
            <summary>
            The item No.8.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item9">
            <summary>
            The item No.9.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item10">
            <summary>
            The item No.10.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item11">
            <summary>
            The item No.11.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item12">
            <summary>
            The item No.12.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item13">
            <summary>
            The item No.13.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item14">
            <summary>
            The item No.14.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Item15">
            <summary>
            The item No.15.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.#ctor(`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0,`0)">
            <summary>
            Initializes this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX16`1"/> from values.
            </summary>
            <param name="v0">The value No.0.</param>
            <param name="v1">The value No.1.</param>
            <param name="v2">The value No.2.</param>
            <param name="v3">The value No.3.</param>
            <param name="v4">The value No.4.</param>
            <param name="v5">The value No.5.</param>
            <param name="v6">The value No.6.</param>
            <param name="v7">The value No.7.</param>
            <param name="v8">The value No.8.</param>
            <param name="v9">The value No.9.</param>
            <param name="v10">The value No.10.</param>
            <param name="v11">The value No.11.</param>
            <param name="v12">The value No.12.</param>
            <param name="v13">The value No.13.</param>
            <param name="v14">The value No.14.</param>
            <param name="v15">The value No.15.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.Deconstruct(`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@,`0@)">
            <summary>
            Deconstructs this <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX16`1"/> to values.
            </summary>
            <param name="v0">The output value No.0.</param>
            <param name="v1">The output value No.1.</param>
            <param name="v2">The output value No.2.</param>
            <param name="v3">The output value No.3.</param>
            <param name="v4">The output value No.4.</param>
            <param name="v5">The output value No.5.</param>
            <param name="v6">The output value No.6.</param>
            <param name="v7">The output value No.7.</param>
            <param name="v8">The output value No.8.</param>
            <param name="v9">The output value No.9.</param>
            <param name="v10">The output value No.10.</param>
            <param name="v11">The output value No.11.</param>
            <param name="v12">The output value No.12.</param>
            <param name="v13">The output value No.13.</param>
            <param name="v14">The output value No.14.</param>
            <param name="v15">The output value No.15.</param>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.op_Implicit(Shamisen.Utils.Tuples.UnmanagedTupleX16{`0})~System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0}}}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX16`1"/> to <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="from">The converting <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX16`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Utils.Tuples.UnmanagedTupleX16`1.op_Implicit(System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0,`0,`0,`0,`0,`0,System.ValueTuple{`0,`0}}})~Shamisen.Utils.Tuples.UnmanagedTupleX16{`0}">
            <summary>
            Performs an implicit conversion from <see cref="T:System.ValueTuple`2"/> to <see cref="T:Shamisen.Utils.Tuples.UnmanagedTupleX16`1"/>.
            </summary>
            <param name="from">The converting <see cref="T:System.ValueTuple`1"/>.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Shamisen.Utils.VectorUtils">
            <summary>
            Contains some utility functions for manipulating <see cref="T:System.Numerics.Vector"/> values.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.VectorUtils.IsShiftRightHardwareAccelerated">
            <summary>
            Gets the value which indicates whether the <see cref="M:Shamisen.Utils.VectorUtils.ShiftRightLogical(System.Numerics.Vector{System.Int32},System.Byte)"/> could be hardware accelerated.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.FastDotProduct(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector0">The value to multiply.</param>
            <param name="vector1">The value to multiply.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.FastDotProduct(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="vector0">The value to multiply.</param>
            <param name="vector1">The value to multiply.</param>
            <returns>The dot product of two vectors.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.MaxAcross(System.Numerics.Vector{System.Single})">
            <summary>
            Returns the largest element of the specified <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.MinAcross(System.Numerics.Vector{System.Single})">
            <summary>
            Returns the smallest element of the specified <paramref name="vector"/>.
            </summary>
            <param name="vector">The vector.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AddSubtract(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Adds <paramref name="right"/> from <paramref name="left"/> while negating <see cref="F:System.Numerics.Vector2.X"/> of <paramref name="right"/>.
            </summary>
            <param name="left">The value to be added.</param>
            <param name="right">The value to be added after negating <see cref="F:System.Numerics.Vector2.X"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.ReverseElements(System.Numerics.Vector4)">
            <summary>
            Returns a new <see cref="T:System.Numerics.Vector4"/> value with reversed elements of <paramref name="value"/>.
            </summary>
            <param name="value">The value to reverse elements.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.ReverseElements(System.Numerics.Vector2)">
            <summary>
            Returns a new <see cref="T:System.Numerics.Vector4"/> value with reversed elements of <paramref name="value"/>.
            </summary>
            <param name="value">The value to reverse elements.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.FastDotMultiple2Channels(System.Numerics.Vector2@,System.Numerics.Vector4)">
            <summary>
            Returns the dot product of 4 frames x 2 channels tensor at <paramref name="head"/> and specified <paramref name="coeffs"/>.
            </summary>
            <param name="head">The location of frames to read.</param>
            <param name="coeffs">The coefficients to multiply.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.FastDotMultiple3Channels(System.Numerics.Vector3@,System.Numerics.Vector4)">
            <summary>
            Returns the dot product of 4 frames x 3 channels at <paramref name="head"/> and specified <paramref name="coeffs"/>.
            </summary>
            <param name="head">The location of frames to read.</param>
            <param name="coeffs">The coefficents to multiply.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.FastDotMultiple4Channels(System.Numerics.Vector4@,System.Numerics.Vector4)">
            <summary>
            Returns the dot product of 4 frames x 4 channels at <paramref name="head"/> and specified <paramref name="coeffs"/>.
            </summary>
            <param name="head">The location of frames to read.</param>
            <param name="coeffs">The coefficents to multiply.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.Blend(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
            <summary>
             Creates a new single-precision vector with elements selected between two specified single-precision source vectors based on an integral mask vector.
            </summary>
            <param name="condition"></param>
            <param name="left">The default value.</param>
            <param name="right">The values that is used when <paramref name="condition"/> is <see cref="F:System.UInt32.MaxValue"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.Blend(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
            <summary>
             Creates a new 32-bit integer vector with elements selected between two specified 32-bit integer source vectors based on an integral mask vector.
            </summary>
            <param name="condition"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.Round(System.Numerics.Vector{System.Single})">
            <summary>
            Rounds a vector of single-precision floating-point value to the nearest integral values,
            and rounds midpoint values to the nearest even number.
            </summary>
            <param name="values">A vector of single-precision floating-point numbers to be rounded.</param>
            <returns>The integer <see cref="T:System.Numerics.Vector`1"/> nearest <paramref name="values"/>. If the fractional component of <paramref name="values"/> is halfway between two
            integers, one of which is even and the other odd, then the even number is returned.
            Note that this method returns a floating-point <see cref="T:System.Numerics.Vector`1"/> instead of an integral <see cref="T:System.Numerics.Vector`1"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.RoundInLoop(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
            <summary>
            Rounds a vector of single-precision floating-point value to the nearest integral values,
            and rounds midpoint values to the nearest even number.<br/>
            This one is suitable for processing inside loops.
            </summary>
            <param name="values">A vector of single-precision floating-point numbers to be rounded.</param>
            <param name="sign">A broadcast vector with only sign bits set. If you pass wrong value, this function won't work as intended.</param>
            <param name="reciprocalEpsilon">A broadcast vector represents 16777216f. If you pass wrong value, this function won't work as intended.</param>
            <returns>The integer <see cref="T:System.Numerics.Vector`1"/> nearest <paramref name="values"/>. If the fractional component of <paramref name="values"/> is halfway between two
            integers, one of which is even and the other odd, then the even number is returned.
            Note that this method returns a floating-point <see cref="T:System.Numerics.Vector`1"/> instead of an integral <see cref="T:System.Numerics.Vector`1"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.Round(System.Numerics.Vector4)">
            <summary>
            Rounds a vector of single-precision floating-point value to the nearest integral values,
            and rounds midpoint values to the nearest even number.
            </summary>
            <param name="values">A vector of single-precision floating-point numbers to be rounded.</param>
            <returns>The integer <see cref="T:System.Numerics.Vector4"/> nearest <paramref name="values"/>. If the fractional component of <paramref name="values"/> is halfway between two
            integers, one of which is even and the other odd, then the even number is returned.
            Note that this method returns a floating-point <see cref="T:System.Numerics.Vector4"/> instead of an integral <see cref="T:System.Numerics.Vector`1"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.Round(System.Numerics.Vector2)">
            <summary>
            Rounds a vector of single-precision floating-point value to the nearest integral values,
            and rounds midpoint values to the nearest even number.
            </summary>
            <param name="values">A vector of single-precision floating-point numbers to be rounded.</param>
            <returns>The integer <see cref="T:System.Numerics.Vector2"/> nearest <paramref name="values"/>. If the fractional component of <paramref name="values"/> is halfway between two
            integers, one of which is even and the other odd, then the even number is returned.
            Note that this method returns a floating-point <see cref="T:System.Numerics.Vector2"/> instead of an integral <see cref="T:System.Numerics.Vector`1"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.Round(System.Numerics.Vector3)">
            <summary>
            Rounds a vector of single-precision floating-point value to the nearest integral values,
            and rounds midpoint values to the nearest even number.
            </summary>
            <param name="values">A vector of single-precision floating-point numbers to be rounded.</param>
            <returns>The integer <see cref="T:System.Numerics.Vector3"/> nearest <paramref name="values"/>. If the fractional component of <paramref name="values"/> is halfway between two
            integers, one of which is even and the other odd, then the even number is returned.
            Note that this method returns a floating-point <see cref="T:System.Numerics.Vector3"/> instead of an integral <see cref="T:System.Numerics.Vector`1"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
            <summary>
            Returns a new vector by performing a bitwise And Not operation on each pair of corresponding elements in two vectors.
            This variant preserves parameter order consistency with <see cref="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})"/>.
            </summary>
            <param name="right">The second vector to be negated.</param>
            <param name="left">The first vector.</param>
            <inheritdoc cref="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.ShiftLeftVariable(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.UInt32})">
            <summary>
            Shifts the <paramref name="value"/> left with <paramref name="shift"/>.
            </summary>
            <param name="value">The values to shift left.</param>
            <param name="shift">The amounts to shift <paramref name="value"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.PrepareConstantShiftLeftInt32(System.Byte)">
            <summary>
            Prepares for constant left shifts.
            </summary>
            <param name="shift">The amount to shift elements left.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.ShiftLeftLogical(System.Numerics.Vector{System.Int32},System.Byte)">
            <summary>
            Shifts the <paramref name="value"/> left with <paramref name="shift"/>.
            </summary>
            <param name="value">The values to shift right.</param>
            <param name="shift">The amounts to shift <paramref name="value"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.ShiftLeftLogical(System.Numerics.Vector{System.Int32},System.Byte,System.Numerics.Vector{System.Int32})">
            <summary>
            Shifts the <paramref name="value"/> left with <paramref name="shift"/>.
            </summary>
            <param name="value">The values to shift right.</param>
            <param name="shift">The amounts to shift <paramref name="value"/>.</param>
            <param name="prepared">The <see cref="T:System.Numerics.Vector`1"/> value prepared with <see cref="M:Shamisen.Utils.VectorUtils.PrepareConstantShiftLeftInt32(System.Byte)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.ShiftRightLogicalVariable(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.UInt32})">
            <summary>
            Shifts the <paramref name="value"/> right with <paramref name="shift"/>.
            </summary>
            <param name="value">The values to shift right.</param>
            <param name="shift">The amounts to shift <paramref name="value"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.ShiftRightLogical(System.Numerics.Vector{System.Int32},System.Byte)">
            <summary>
            Shifts the <paramref name="value"/> right with <paramref name="shift"/>.
            </summary>
            <param name="value">The values to shift right.</param>
            <param name="shift">The amounts to shift <paramref name="value"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.ShiftRightLogical(System.Numerics.Vector{System.UInt32},System.Byte)">
            <summary>
            Shifts the <paramref name="value"/> right with <paramref name="shift"/>.
            </summary>
            <param name="value">The values to shift right.</param>
            <param name="shift">The amounts to shift <paramref name="value"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AddAsInt32(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Adds two <see cref="T:System.Numerics.Vector4"/> values as if values are <see cref="T:System.Int32"/>.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>The added value.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.CreateVector4(System.Single,System.Single,System.Single,System.Single)">
            <inheritdoc cref="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.ConvertAndCreateVector4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a vector whose elements have the specified values.
            </summary>
            <param name="x">The value to assign to the <see cref="F:System.Numerics.Vector4.X"/> field.</param>
            <param name="y">The value to assign to the <see cref="F:System.Numerics.Vector4.Y"/> field.</param>
            <param name="z">The value to assign to the <see cref="F:System.Numerics.Vector4.Z"/> field.</param>
            <param name="w">The value to assign to the <see cref="F:System.Numerics.Vector4.W"/> field.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.StoreLowerHalf``1(``0@,System.Numerics.Vector{``0})">
            <summary>
            Stores the lower half of <paramref name="value"/> to the <paramref name="dest"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Numerics.Vector`1"/>.</typeparam>
            <param name="dest">The start position of destination.</param>
            <param name="value">The values to store.</param>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.GetIndexVector">
            <summary>
            Returns a <see cref="T:System.Numerics.Vector`1"/> value with its value set to their position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsVector128Unsafe(System.Numerics.Vector2)">
            <summary>
            Reinterprets a <see cref="T:System.Numerics.Vector2"/> as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1"/>.
            </summary>
            <param name="value">The vector to reinterpret.</param>
            <returns><paramref name="value"/> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsVector128(Shamisen.ComplexF@)">
            <summary>
            Reinterprets a <see cref="T:Shamisen.ComplexF"/> as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1"/>.
            </summary>
            <param name="value">The vector to reinterpret.</param>
            <returns><paramref name="value"/> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector128`1"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsVector64(System.Numerics.Vector2)">
            <summary>
            Reinterprets a <see cref="T:System.Numerics.Vector2"/> as a new <see cref="T:System.Runtime.Intrinsics.Vector64`1"/>.
            </summary>
            <param name="value">The vector to reinterpret.</param>
            <returns><paramref name="value"/> reinterpreted as a new <see cref="T:System.Runtime.Intrinsics.Vector64`1"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsComplexF(System.Runtime.Intrinsics.Vector128{System.Single}@)">
            <summary>
            Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector128`1"/> as a new <see cref="T:Shamisen.ComplexF"/>.
            </summary>
            <param name="value">The vector to reinterpret.</param>
            <returns><paramref name="value"/> reinterpreted as a new <see cref="T:Shamisen.ComplexF"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsVector2(System.Runtime.Intrinsics.Vector64{System.Single})">
            <summary>
            Reinterprets a <see cref="T:System.Runtime.Intrinsics.Vector64`1"/> as a new <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="value">The vector to reinterpret.</param>
            <returns><paramref name="value"/> reinterpreted as a new <see cref="T:System.Numerics.Vector2"/>.</returns>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsSingle``1(System.Numerics.Vector{``0})">
            <inheritdoc cref="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsDouble``1(System.Numerics.Vector{``0})">
            <inheritdoc cref="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsByte``1(System.Numerics.Vector{``0})">
            <inheritdoc cref="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsUInt16``1(System.Numerics.Vector{``0})">
            <inheritdoc cref="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsUInt32``1(System.Numerics.Vector{``0})">
            <inheritdoc cref="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsUInt64``1(System.Numerics.Vector{``0})">
            <inheritdoc cref="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsSByte``1(System.Numerics.Vector{``0})">
            <inheritdoc cref="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsInt16``1(System.Numerics.Vector{``0})">
            <inheritdoc cref="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsInt32``1(System.Numerics.Vector{``0})">
            <inheritdoc cref="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})"/>
        </member>
        <member name="M:Shamisen.Utils.VectorUtils.AsInt64``1(System.Numerics.Vector{``0})">
            <inheritdoc cref="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})"/>
        </member>
        <member name="T:Shamisen.VectorExtensions">
            <summary>
            Contains some utility functions for <see cref="T:System.Numerics.Vector`1" /> and some its close relatives.
            </summary>
        </member>
        <member name="M:Shamisen.VectorExtensions.Deconstruct(System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64@,System.UInt64@,System.UInt64@,System.UInt64@)">
             <summary>
            
             </summary>
             <param name="vector"></param>
             <param name="v0"></param>
             <param name="v1"></param>
             <param name="v2"></param>
             <param name="v3"></param>
        </member>
        <member name="T:Shamisen.Optimization.X86Intrinsics">
            <summary>
            Defines some X86 intrinsics.
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.None">
            <summary>
            Not X86(e.g. ARMv8-A) or X86 Intrinsics aren't available
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.X86Base">
            <summary>
            X86Base
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.X64">
            <summary>
            X64 variant of each intrinsics
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Bmi1">
            <summary>
            BMI1
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Bmi2">
            <summary>
            BMI2
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Lzcnt">
            <summary>
            LZCNT
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Sse">
            <summary>
            SSE
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Sse2">
            <summary>
            SSE2
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Aes">
            <summary>
            AES
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Pclmulqdq">
            <summary>
            PCLMULQDQ
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Sse3">
            <summary>
            SSE3
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Ssse3">
            <summary>
            SSSE3
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Sse41">
            <summary>
            SSE4.1
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Sse42">
            <summary>
            SSE4.2
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Avx">
            <summary>
            AVX
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Popcnt">
            <summary>
            POPCNT
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Avx2">
            <summary>
            AVX2
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86Intrinsics.Fma">
            <summary>
            FMA
            </summary>
        </member>
        <member name="T:Shamisen.Optimization.ArmIntrinsics">
            <summary>
            Defines some ARM intrinsics.
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsics.None">
            <summary>
            Not ARM(e.g. x86-64) or ARM Intrinsics aren't available
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsics.ArmBase">
            <summary>
            ArmBase
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsics.Arm64">
            <summary>
            Arm64 variant of each intrinsics
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsics.AdvSimd">
            <summary>
            AdvSIMD
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsics.Aes">
            <summary>
            AES
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsics.Crc32">
            <summary>
            CRC32
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsics.Sha1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsics.Sha256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsics.Dp">
            <summary>
            DotProduct
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsics.Rdm">
            <summary>
            MultiplyRoundedDoubling
            </summary>
        </member>
        <member name="T:Shamisen.Optimization.X86IntrinsicsMask">
            <summary>
            Defines some <see cref="T:Shamisen.Optimization.X86Intrinsics"/> masks.
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.X86Base">
            <summary>
            X86Base
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.X64">
            <summary>
            X64 variant of each intrinsics
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Bmi1">
            <summary>
            BMI1
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Bmi2">
            <summary>
            BMI2
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Lzcnt">
            <summary>
            LZCNT
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Sse">
            <summary>
            SSE
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Sse2">
            <summary>
            SSE2
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Aes">
            <summary>
            AES
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Pclmulqdq">
            <summary>
            PCLMULQDQ
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Sse3">
            <summary>
            SSE3
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Ssse3">
            <summary>
            SSSE3
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Sse41">
            <summary>
            SSE4.1
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Sse42">
            <summary>
            SSE4.2
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Avx">
            <summary>
            AVX
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Popcnt">
            <summary>
            POPCNT
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Avx2">
            <summary>
            AVX2
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.X86IntrinsicsMask.Fma">
            <summary>
            FMA
            </summary>
        </member>
        <member name="T:Shamisen.Optimization.ArmIntrinsicsMask">
            <summary>
            Defines some <see cref="T:Shamisen.Optimization.X86Intrinsics"/> masks.
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsicsMask.None">
            <summary>
            Not ARM(e.g. x86-64) or ARM Intrinsics aren't available
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsicsMask.ArmBase">
            <summary>
            ArmBase
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsicsMask.Arm64">
            <summary>
            Arm64 variant of each intrinsics
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsicsMask.AdvSimd">
            <summary>
            AdvSIMD
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsicsMask.Aes">
            <summary>
            AES
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsicsMask.Crc32">
            <summary>
            CRC32
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsicsMask.Sha1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsicsMask.Sha256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsicsMask.Dp">
            <summary>
            DotProduct
            </summary>
        </member>
        <member name="F:Shamisen.Optimization.ArmIntrinsicsMask.Rdm">
            <summary>
            MultiplyRoundedDoubling
            </summary>
        </member>
        <member name="T:Shamisen.Optimization.IntrinsicsOptions">
            <summary>
            Represents how Shamisen component is allowed to utilize Hardware Intrinsics.
            </summary>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsOptions.#ctor(System.Boolean,Shamisen.Optimization.X86Intrinsics,Shamisen.Optimization.ArmIntrinsics)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Optimization.IntrinsicsOptions"/> struct.
            </summary>
            <param name="isIntrinsicsEnabled">if set to <c>true</c> [is intrinsics enabled].</param>
            <param name="enabledX86Intrinsics">The enabled X86 intrinsics.</param>
            <param name="enabledArmIntrinsics">The enabled arm intrinsics.</param>
        </member>
        <member name="P:Shamisen.Optimization.IntrinsicsOptions.IsIntrinsicsEnabled">
            <summary>
            Gets a value indicating whether the intrinsics is enabled.
            </summary>
            <value>
              <c>true</c> if the intrinsics is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Optimization.IntrinsicsOptions.EnabledX86Intrinsics">
            <summary>
            Gets the enabled X86 intrinsics.
            </summary>
            <value>
            The enabled X86 intrinsics.
            </value>
        </member>
        <member name="P:Shamisen.Optimization.IntrinsicsOptions.EnabledArmIntrinsics">
            <summary>
            Gets the enabled arm intrinsics.
            </summary>
            <value>
            The enabled arm intrinsics.
            </value>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsOptions.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsOptions.Equals(Shamisen.Optimization.IntrinsicsOptions)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsOptions.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsOptions.op_Equality(Shamisen.Optimization.IntrinsicsOptions,Shamisen.Optimization.IntrinsicsOptions)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Optimization.IntrinsicsOptions"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Optimization.IntrinsicsOptions"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Optimization.IntrinsicsOptions"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsOptions.op_Inequality(Shamisen.Optimization.IntrinsicsOptions,Shamisen.Optimization.IntrinsicsOptions)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Optimization.IntrinsicsOptions"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Optimization.IntrinsicsOptions"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Optimization.IntrinsicsOptions"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Optimization.IntrinsicsUtils">
            <summary>
            Contains some utilities about Hardware Intrinsics
            </summary>
        </member>
        <member name="P:Shamisen.Optimization.IntrinsicsUtils.X86Intrinsics">
            <summary>
            Gets the X86 intrinsics available on this CPU.
            </summary>
            <value>
            The X86 intrinsics.
            </value>
        </member>
        <member name="P:Shamisen.Optimization.IntrinsicsUtils.ArmIntrinsics">
            <summary>
            Gets the ARM intrinsics available on this CPU.
            </summary>
            <value>
            The arm intrinsics.
            </value>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsUtils.GetAvailableX86Intrinsics">
            <summary>
            Gets the available X86 intrinsics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsUtils.GetAvailableArmIntrinsics">
            <summary>
            Gets the available arm intrinsics.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Shamisen.Optimization.IntrinsicsUtils.AvoidAvxHeavyOperations">
            <summary>
            Gets the value which indicates whether the Shamisen should avoid heavy floating-point operations in 256-bits-wide vectors.
            </summary>
        </member>
        <member name="P:Shamisen.Optimization.IntrinsicsUtils.EnableExtremeLoopUnrolling">
            <summary>
            Gets the value which indicates whether the Shamisen should enable extreme loop unrolling for Zen3-like microarchitecture.
            </summary>
        </member>
        <member name="P:Shamisen.Optimization.IntrinsicsUtils.PreferShiftVariable">
            <summary>
            Gets the value which indicates whether the Shamisen should prefer vpsllvd over vpslld even if the shift amount is same for all values.
            </summary>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsUtils.HasAllFeatures(Shamisen.Optimization.X86Intrinsics,Shamisen.Optimization.X86IntrinsicsMask)">
            <summary>
            Determines whether the specified value has features specified by mask.
            </summary>
            <param name="value">The value.</param>
            <param name="mask">The mask.</param>
            <returns>
              <c>true</c> if the specified mask has feature; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsUtils.HasAllFeatures(Shamisen.Optimization.X86Intrinsics,Shamisen.Optimization.X86Intrinsics)">
            <summary>
            Determines whether the specified value has features specified by mask.
            </summary>
            <param name="value">The value.</param>
            <param name="mask">The mask.</param>
            <returns>
              <c>true</c> if the specified mask has feature; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsUtils.HasAllFeatures(Shamisen.Optimization.ArmIntrinsics,Shamisen.Optimization.ArmIntrinsicsMask)">
            <summary>
            Determines whether the specified value has features specified by mask.
            </summary>
            <param name="value">The value.</param>
            <param name="mask">The mask.</param>
            <returns>
              <c>true</c> if the specified mask has feature; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsUtils.HasAllFeatures(Shamisen.Optimization.ArmIntrinsics,Shamisen.Optimization.ArmIntrinsics)">
            <summary>
            Determines whether the specified value has features specified by mask.
            </summary>
            <param name="value">The value.</param>
            <param name="mask">The mask.</param>
            <returns>
              <c>true</c> if the specified mask has feature; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsUtils.HasAtLeaseOneFeature(Shamisen.Optimization.X86Intrinsics,Shamisen.Optimization.X86IntrinsicsMask)">
            <summary>
            Determines whether the specified value has features specified by mask.
            </summary>
            <param name="value">The value.</param>
            <param name="mask">The mask.</param>
            <returns>
              <c>true</c> if the specified mask has feature; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsUtils.HasAtLeaseOneFeature(Shamisen.Optimization.X86Intrinsics,Shamisen.Optimization.X86Intrinsics)">
            <summary>
            Determines whether the specified value has features specified by mask.
            </summary>
            <param name="value">The value.</param>
            <param name="mask">The mask.</param>
            <returns>
              <c>true</c> if the specified mask has feature; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsUtils.HasAtLeaseOneFeature(Shamisen.Optimization.ArmIntrinsics,Shamisen.Optimization.ArmIntrinsicsMask)">
            <summary>
            Determines whether the specified value has features specified by mask.
            </summary>
            <param name="value">The value.</param>
            <param name="mask">The mask.</param>
            <returns>
              <c>true</c> if the specified mask has feature; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Optimization.IntrinsicsUtils.HasAtLeaseOneFeature(Shamisen.Optimization.ArmIntrinsics,Shamisen.Optimization.ArmIntrinsics)">
            <summary>
            Determines whether the specified value has features specified by mask.
            </summary>
            <param name="value">The value.</param>
            <param name="mask">The mask.</param>
            <returns>
              <c>true</c> if the specified mask has feature; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.OptimizationUtils">
            <summary>
            Contains some utility for optimization.
            </summary>
        </member>
        <member name="F:Shamisen.OptimizationUtils.AggressiveOptimizationIfPossible">
            <summary>
            Returns 0 when the target framework doesn't support <see cref="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveOptimization"/>.
            </summary>
        </member>
        <member name="F:Shamisen.OptimizationUtils.InlineAndOptimizeIfPossible">
            <summary>
            Returns <see cref="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining"/> when the target framework doesn't support <see cref="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveOptimization"/>.
            </summary>
        </member>
        <member name="T:Shamisen.Primitives.Angle128">
            <summary>
            Represents an angle in 128-bit mixed-point value.<br/>
            Can be used for some extremely-high-precision needs of angle and frequency.
            </summary>
        </member>
        <member name="F:Shamisen.Primitives.Angle128.low">
            <summary>
            The lower part.<br/>
            Must be between 0 and 1.
            </summary>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Primitives.Angle128"/> struct.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="frequency">The frequency.</param>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Primitives.Angle128"/> struct.
            </summary>
            <param name="multiplesOfPi">The multiples of pi.</param>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.#ctor(Shamisen.Fixed64,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Primitives.Angle128"/> struct.
            </summary>
            <param name="high">The high part.</param>
            <param name="low">The low part.</param>
        </member>
        <member name="P:Shamisen.Primitives.Angle128.High">
            <summary>
            Gets the higher part of this <see cref="T:Shamisen.Primitives.Angle128"/> value.
            </summary>
            <value>
            The higher part of this <see cref="T:Shamisen.Primitives.Angle128"/> value.
            </value>
        </member>
        <member name="P:Shamisen.Primitives.Angle128.Low">
            <summary>
            Gets the lower part of this <see cref="T:Shamisen.Primitives.Angle128"/> value.
            </summary>
            <value>
            The lower part of this <see cref="T:Shamisen.Primitives.Angle128"/> value.
            </value>
        </member>
        <member name="P:Shamisen.Primitives.Angle128.Value">
            <summary>
            Gets the value in multiple of pi of this <see cref="T:Shamisen.Primitives.Angle128"/> value.
            </summary>
            <value>
            The value in multiple of pi of this <see cref="T:Shamisen.Primitives.Angle128"/> value.
            </value>
        </member>
        <member name="P:Shamisen.Primitives.Angle128.ValueInTurns">
            <summary>
            Gets the value in turns.
            </summary>
            <value>
            The value in turns.
            </value>
        </member>
        <member name="P:Shamisen.Primitives.Angle128.ValueInRadians">
            <summary>
            Gets the value in radians.
            </summary>
            <value>
            The value in radians.
            </value>
        </member>
        <member name="P:Shamisen.Primitives.Angle128.ValueInDegrees">
            <summary>
            Gets the value in degrees.
            </summary>
            <value>
            The value in degrees.
            </value>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.op_Addition(Shamisen.Primitives.Angle128,Shamisen.Primitives.Angle128)">
            <summary>
            Adds specified <see cref="T:Shamisen.Primitives.Angle128"/> value and <see cref="T:Shamisen.Primitives.Angle128"/> value.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.op_Subtraction(Shamisen.Primitives.Angle128,Shamisen.Primitives.Angle128)">
            <summary>
            Subtracts specified <see cref="T:Shamisen.Primitives.Angle128"/> value from <see cref="T:Shamisen.Primitives.Angle128"/> value.
            </summary>
            <param name="left">The value to be subtracted by <paramref name="right"/>.</param>
            <param name="right">The value to subtract from <paramref name="left"/>/</param>
            <returns>
            The result of subtracting <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            The value in string.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.op_Equality(Shamisen.Primitives.Angle128,Shamisen.Primitives.Angle128)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Primitives.Angle128"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Primitives.Angle128"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Primitives.Angle128"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.op_Inequality(Shamisen.Primitives.Angle128,Shamisen.Primitives.Angle128)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Primitives.Angle128"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Primitives.Angle128"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Primitives.Angle128"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.Equals(Shamisen.Primitives.Angle128)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.Angle128.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="T:Shamisen.Primitives.AngleCounter">
            <summary>
            Implements a extreme-precision angle counter.
            </summary>
        </member>
        <member name="P:Shamisen.Primitives.AngleCounter.Angle">
            <summary>
            Gets the current angle.
            </summary>
            <value>
            The angle.
            </value>
        </member>
        <member name="P:Shamisen.Primitives.AngleCounter.Omega">
            <summary>
            Gets the omega.
            </summary>
            <value>
            The omega.
            </value>
        </member>
        <member name="T:Shamisen.Primitives.DisposableArray`1">
            <summary>
            Provides a disposable array.
            </summary>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Primitives.DisposableArray`1"/> class.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="P:Shamisen.Primitives.DisposableArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the <typeparamref name="T"/> value at the specified index.
            </summary>
            <value>
            The <typeparamref name="T"/> value.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Shamisen.Primitives.DisposableArray`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="P:Shamisen.Primitives.DisposableArray`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The other.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.Contains(`0)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if <paramref name="item">item</paramref> is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.Equals(System.Object,System.Collections.IEqualityComparer)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <param name="comparer">The comparer.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.GetHashCode(System.Collections.IEqualityComparer)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="comparer">The comparer.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of <paramref name="item">item</paramref> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if <paramref name="item">item</paramref> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if <paramref name="item">item</paramref> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Shamisen.Primitives.DisposableArray`1"/> class.
            </summary>
        </member>
        <member name="M:Shamisen.Primitives.DisposableArray`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.DataLength">
            <summary>
            Represents a length of some data.
            </summary>
        </member>
        <member name="M:Shamisen.DataLength.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.DataLength" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Shamisen.DataLength.Infinity">
            <summary>
            Represents the fact that the source stream is infinitely long.
            </summary>
        </member>
        <member name="P:Shamisen.DataLength.Length">
            <summary>
            Gets the actual length available.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Shamisen.DataLength.IsInfinity">
            <summary>
            Gets a value indicating whether the available length of data is infinity.
            </summary>
            <value>
              <c>true</c> if this <see cref="P:Shamisen.DataLength.Length"/> is infinity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shamisen.DataLength.Cast``2">
            <summary>
            Casts the size value of this instance.
            </summary>
            <typeparam name="TFrom">The type of from.</typeparam>
            <typeparam name="TTo">The type of to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Shamisen.DataLength.op_Division(Shamisen.DataLength,System.UInt64)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.op_Multiply(Shamisen.DataLength,System.UInt64)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.op_Implicit(System.UInt64)~Shamisen.DataLength">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64" /> to <see cref="T:Shamisen.DataLength" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.op_Explicit(Shamisen.DataLength)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.DataLength"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.CompareTo(Shamisen.DataLength)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.DataLength.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.Equals(Shamisen.DataLength)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.op_Equality(Shamisen.DataLength,Shamisen.DataLength)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.DataLength" /> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.DataLength" /> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.DataLength" /> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.op_Inequality(Shamisen.DataLength,Shamisen.DataLength)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.DataLength"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.DataLength"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.DataLength"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.op_LessThan(Shamisen.DataLength,Shamisen.DataLength)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.op_LessThanOrEqual(Shamisen.DataLength,Shamisen.DataLength)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.op_GreaterThan(Shamisen.DataLength,Shamisen.DataLength)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Shamisen.DataLength.op_GreaterThanOrEqual(Shamisen.DataLength,Shamisen.DataLength)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Shamisen.Fixed16">
            <summary>
            Represents a Fixed-Point Number in Signed Q0.15 format using <a href="https://en.wikipedia.org/wiki/Two%27s_complement">Two's Complement</a> format.<br/>
            Useful for manipulating a 16-bit PCM waveform directly.<br/>
            For reference of "Qm.n" notation: See <a href="https://source.android.com/devices/audio/data_formats#fixed">here</a> and <a href="https://en.wikipedia.org/wiki/Q_(number_format)">here</a>.
            </summary>
        </member>
        <member name="F:Shamisen.Fixed16.Value">
            <summary>
            The internal value stored in memory.
            </summary>
        </member>
        <member name="F:Shamisen.Fixed16.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:Shamisen.Fixed64"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="F:Shamisen.Fixed16.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:Shamisen.Fixed64"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="F:Shamisen.Fixed16.Zero">
            <summary>
            Represents the number zero (0).
            </summary>
        </member>
        <member name="F:Shamisen.Fixed16.Epsilon">
            <summary>
            Represents the smallest positive <see cref="T:Shamisen.Fixed16"/> value that is greater than zero. This field is constant and read-only.
            </summary>
        </member>
        <member name="M:Shamisen.Fixed16.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Fixed16"/> struct.
            </summary>
            <param name="internalValue">The internal value stored in memory.</param>
        </member>
        <member name="P:Shamisen.Fixed16.FloatValue">
            <summary>
            Gets the value represented in <see cref="T:System.Single"/>.
            </summary>
            <value>
            The float value.
            </value>
        </member>
        <member name="M:Shamisen.Fixed16.op_Addition(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Adds two specified <see cref="T:Shamisen.Fixed16"/> values.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Subtraction(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Subtracts two specified <see cref="T:Shamisen.Fixed16"/> values.
            </summary>
            <param name="left">The minuend.</param>
            <param name="right">The subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Multiply(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Multiplies two specified <see cref="T:Shamisen.Fixed16"/> values.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Division(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Divides two specified <see cref="T:Shamisen.Fixed16"/> values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Modulus(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Returns the remainder resulting from dividing two specified <see cref="T:Shamisen.Fixed16"/> values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <returns>
            The remainder resulting from dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_UnaryPlus(Shamisen.Fixed16)">
            <summary>
            Returns the value of the <see cref="T:Shamisen.Fixed16"/> operand (the sign of the operand is unchanged).
            </summary>
            <param name="value">The operand to return.</param>
            <returns>
            The value of the operand, <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Increment(Shamisen.Fixed16)">
            <summary>
            Increments the <see cref="T:Shamisen.Fixed16"/> operand by <see cref="F:Shamisen.Fixed16.Epsilon"/>.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>
            The value of <paramref name="value"/> incremented by <see cref="F:Shamisen.Fixed16.Epsilon"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_UnaryNegation(Shamisen.Fixed16)">
            <summary>
            Negates the value of the specified <see cref="T:Shamisen.Fixed16"/> operand.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>
            The result of <paramref name="value"/> multiplied by negative one (-1).
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Decrement(Shamisen.Fixed16)">
            <summary>
            Decrements the <see cref="T:Shamisen.Fixed16"/> operand by <see cref="F:Shamisen.Fixed16.Epsilon"/>.
            </summary>
            <param name="value">The value to decrement.</param>
            <returns>
            The value of <paramref name="value"/> decremented by <see cref="F:Shamisen.Fixed16.Epsilon"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Implicit(Shamisen.Fixed16)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Fixed16"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Explicit(Shamisen.Fixed16)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.Fixed16"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Explicit(System.Single)~Shamisen.Fixed16">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Single"/> to <see cref="T:Shamisen.Fixed16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Explicit(System.Double)~Shamisen.Fixed16">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Double"/> to <see cref="T:Shamisen.Fixed16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.CompareTo(Shamisen.Fixed16)">
            <summary>
            Compares this instance to a specified 16-bit signed fixed-point number and returns an indication of their relative values.
            </summary>
            <param name="other">An number to compare.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="other"/>.</returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_LessThan(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed16"/> is less than another specified <see cref="T:Shamisen.Fixed16"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_LessThanOrEqual(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed16"/> is less than or equal to another specified <see cref="T:Shamisen.Fixed16"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_GreaterThan(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed16"/> is greater than another specified <see cref="T:Shamisen.Fixed16"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_GreaterThanOrEqual(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed16"/> is greater than or equal to another specified <see cref="T:Shamisen.Fixed16"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.Equals(Shamisen.Fixed16)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Equality(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Fixed16"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Fixed16"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Fixed16"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed16.op_Inequality(Shamisen.Fixed16,Shamisen.Fixed16)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Fixed16"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Fixed16"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Fixed16"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Fixed32">
            <summary>
            Represents a Fixed-Point Number in Signed Q0.31 format using <a href="https://en.wikipedia.org/wiki/Two%27s_complement">Two's Complement</a> format.<br/>
            Useful for manipulating a 32-bit PCM waveform directly.<br/>
            For reference of "Qm.n" notation: See <a href="https://source.android.com/devices/audio/data_formats#fixed">here</a> and <a href="https://en.wikipedia.org/wiki/Q_(number_format)">here</a>.
            </summary>
        </member>
        <member name="F:Shamisen.Fixed32.Value">
            <summary>
            The internal value stored in memory.
            </summary>
        </member>
        <member name="M:Shamisen.Fixed32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Fixed32"/> struct.
            </summary>
            <param name="internalValue">The internal value stored in memory.</param>
        </member>
        <member name="P:Shamisen.Fixed32.FloatValue">
            <summary>
            Gets the value represented in <see cref="T:System.Single"/>.
            </summary>
            <value>
            The float value.
            </value>
        </member>
        <member name="P:Shamisen.Fixed32.DoubleValue">
            <summary>
            Gets the value represented in <see cref="T:System.Double"/>.
            </summary>
            <value>
            The float value.
            </value>
        </member>
        <member name="F:Shamisen.Fixed32.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:Shamisen.Fixed32"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="F:Shamisen.Fixed32.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:Shamisen.Fixed32"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="F:Shamisen.Fixed32.Zero">
            <summary>
            Represents the number zero (0).
            </summary>
        </member>
        <member name="F:Shamisen.Fixed32.Epsilon">
            <summary>
            Represents the smallest positive <see cref="T:Shamisen.Fixed32"/> value that is greater than zero. This field is constant and read-only.
            </summary>
        </member>
        <member name="M:Shamisen.Fixed32.op_Addition(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Adds two specified <see cref="T:Shamisen.Fixed32"/> values.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Subtraction(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Subtracts two specified <see cref="T:Shamisen.Fixed32"/> values.
            </summary>
            <param name="left">The minuend.</param>
            <param name="right">The subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Multiply(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Multiplies two specified <see cref="T:Shamisen.Fixed32"/> values.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.PowerOfInteger(Shamisen.Fixed32,System.UInt32)">
            <summary>
            Returns the specified value to the <paramref name="power"/>th power.
            </summary>
            <param name="value">The value.</param>
            <param name="power">The power.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Fixed32.Square(Shamisen.Fixed32)">
            <summary>
            Squares the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Division(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Divides two specified <see cref="T:Shamisen.Fixed32"/> values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Modulus(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Returns the remainder resulting from dividing two specified <see cref="T:Shamisen.Fixed32"/> values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <returns>
            The remainder resulting from dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_UnaryPlus(Shamisen.Fixed32)">
            <summary>
            Returns the value of the <see cref="T:Shamisen.Fixed32"/> operand (the sign of the operand is unchanged).
            </summary>
            <param name="value">The operand to return.</param>
            <returns>
            The value of the operand, <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Increment(Shamisen.Fixed32)">
            <summary>
            Increments the <see cref="T:Shamisen.Fixed32"/> operand by <see cref="F:Shamisen.Fixed32.Epsilon"/>.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>
            The value of <paramref name="value"/> incremented by <see cref="F:Shamisen.Fixed32.Epsilon"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_UnaryNegation(Shamisen.Fixed32)">
            <summary>
            Negates the value of the specified <see cref="T:Shamisen.Fixed32"/> operand.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>
            The result of <paramref name="value"/> multiplied by negative one (-1).
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Decrement(Shamisen.Fixed32)">
            <summary>
            Decrements the <see cref="T:Shamisen.Fixed32"/> operand by <see cref="F:Shamisen.Fixed32.Epsilon"/>.
            </summary>
            <param name="value">The value to decrement.</param>
            <returns>
            The value of <paramref name="value"/> decremented by <see cref="F:Shamisen.Fixed32.Epsilon"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Explicit(Shamisen.Fixed32)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.Fixed32"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Explicit(Shamisen.Fixed32)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.Fixed32"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Explicit(System.Single)~Shamisen.Fixed32">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Single"/> to <see cref="T:Shamisen.Fixed32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Explicit(System.Double)~Shamisen.Fixed32">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Double"/> to <see cref="T:Shamisen.Fixed32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Fixed32.CompareTo(Shamisen.Fixed32)">
            <summary>
            Compares this instance to a specified 16-bit signed fixed-point number and returns an indication of their relative values.
            </summary>
            <param name="other">An number to compare.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="other"/>.</returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_LessThan(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed32"/> is less than another specified <see cref="T:Shamisen.Fixed32"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_LessThanOrEqual(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed32"/> is less than or equal to another specified <see cref="T:Shamisen.Fixed32"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_GreaterThan(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed32"/> is greater than another specified <see cref="T:Shamisen.Fixed32"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_GreaterThanOrEqual(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed32"/> is greater than or equal to another specified <see cref="T:Shamisen.Fixed32"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.Equals(Shamisen.Fixed32)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Equality(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Fixed32"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Fixed32"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Fixed32"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed32.op_Inequality(Shamisen.Fixed32,Shamisen.Fixed32)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Fixed32"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Fixed32"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Fixed32"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Fixed64">
            <summary>
            Represents a Fixed-Point Number in Signed Q0.63 format using <a href="https://en.wikipedia.org/wiki/Two%27s_complement">Two's Complement</a> format.<br/>
            Useful for precisely counting angles in multiples of <see cref="F:System.Math.PI"/>.<br/>
            For reference of "Qm.n" notation: See <a href="https://source.android.com/devices/audio/data_formats#fixed">here</a> and <a href="https://en.wikipedia.org/wiki/Q_(number_format)">here</a>.
            </summary>
        </member>
        <member name="F:Shamisen.Fixed64.Value">
            <summary>
            The internal value stored in memory.
            </summary>
        </member>
        <member name="M:Shamisen.Fixed64.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Fixed64"/> struct.
            </summary>
            <param name="internalValue">The internal value stored in memory.</param>
        </member>
        <member name="P:Shamisen.Fixed64.FloatValue">
            <summary>
            Gets the value represented in <see cref="T:System.Single"/>.
            </summary>
            <value>
            The float value.
            </value>
        </member>
        <member name="P:Shamisen.Fixed64.DoubleValue">
            <summary>
            Gets the value represented in <see cref="T:System.Double"/>.
            </summary>
            <value>
            The float value.
            </value>
        </member>
        <member name="P:Shamisen.Fixed64.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:Shamisen.Fixed64"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="P:Shamisen.Fixed64.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:Shamisen.Fixed64"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="P:Shamisen.Fixed64.Zero">
            <summary>
            Represents the number zero (0).
            </summary>
        </member>
        <member name="P:Shamisen.Fixed64.Epsilon">
            <summary>
            Represents the smallest positive <see cref="T:Shamisen.Fixed64"/> value that is greater than zero. This field is constant and read-only.
            </summary>
        </member>
        <member name="M:Shamisen.Fixed64.op_Addition(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Adds two specified <see cref="T:Shamisen.Fixed64"/> values.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Subtraction(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Subtracts two specified <see cref="T:Shamisen.Fixed64"/> values.
            </summary>
            <param name="left">The minuend.</param>
            <param name="right">The subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Multiply(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Multiplies two specified <see cref="T:Shamisen.Fixed64"/> values.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.PowerOfInteger(Shamisen.Fixed64,System.UInt32)">
            <summary>
            Returns the specified value to the <paramref name="power"/>th power.
            </summary>
            <param name="value">The value.</param>
            <param name="power">The power.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Fixed64.Square(Shamisen.Fixed64)">
            <summary>
            Squares the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Division(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Divides two specified <see cref="T:Shamisen.Fixed64"/> values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Modulus(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Returns the remainder resulting from dividing two specified <see cref="T:Shamisen.Fixed64"/> values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <returns>
            The remainder resulting from dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_UnaryPlus(Shamisen.Fixed64)">
            <summary>
            Returns the value of the <see cref="T:Shamisen.Fixed64"/> operand (the sign of the operand is unchanged).
            </summary>
            <param name="value">The operand to return.</param>
            <returns>
            The value of the operand, <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Increment(Shamisen.Fixed64)">
            <summary>
            Increments the <see cref="T:Shamisen.Fixed64"/> operand by <see cref="P:Shamisen.Fixed64.Epsilon"/>.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>
            The value of <paramref name="value"/> incremented by <see cref="P:Shamisen.Fixed64.Epsilon"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_UnaryNegation(Shamisen.Fixed64)">
            <summary>
            Negates the value of the specified <see cref="T:Shamisen.Fixed64"/> operand.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>
            The result of <paramref name="value"/> multiplied by negative one (-1).
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Decrement(Shamisen.Fixed64)">
            <summary>
            Decrements the <see cref="T:Shamisen.Fixed64"/> operand by <see cref="P:Shamisen.Fixed64.Epsilon"/>.
            </summary>
            <param name="value">The value to decrement.</param>
            <returns>
            The value of <paramref name="value"/> decremented by <see cref="P:Shamisen.Fixed64.Epsilon"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Explicit(Shamisen.Fixed64)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.Fixed64"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Explicit(Shamisen.Fixed64)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.Fixed64"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Explicit(System.Single)~Shamisen.Fixed64">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Single"/> to <see cref="T:Shamisen.Fixed64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Explicit(System.Double)~Shamisen.Fixed64">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Double"/> to <see cref="T:Shamisen.Fixed64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Explicit(Shamisen.Fixed64)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.Fixed64"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The internal <see cref="T:System.Int64"/> value of specified <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Explicit(System.Int64)~Shamisen.Fixed64">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int64"/> to <see cref="T:Shamisen.Fixed64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Fixed64.CompareTo(Shamisen.Fixed64)">
            <summary>
            Compares this instance to a specified 16-bit signed fixed-point number and returns an indication of their relative values.
            </summary>
            <param name="other">An number to compare.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="other"/>.</returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_LessThan(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed64"/> is less than another specified <see cref="T:Shamisen.Fixed64"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_LessThanOrEqual(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed64"/> is less than or equal to another specified <see cref="T:Shamisen.Fixed64"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_GreaterThan(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed64"/> is greater than another specified <see cref="T:Shamisen.Fixed64"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_GreaterThanOrEqual(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.Fixed64"/> is greater than or equal to another specified <see cref="T:Shamisen.Fixed64"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.Equals(Shamisen.Fixed64)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Equality(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Fixed64"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Fixed64"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Fixed64"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Fixed64.op_Inequality(Shamisen.Fixed64,Shamisen.Fixed64)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Fixed64"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Fixed64"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Fixed64"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Int24">
            <summary>
            An simple representation of 24bit signed integer.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:Shamisen.Int24.MaxValue">
            <summary>
            Represents the largest possible value of an System.Int24. This field is constant.
            </summary>
        </member>
        <member name="F:Shamisen.Int24.MinValue">
            <summary>
            Represents the smallest possible value of System.Int24. This field is constant.
            </summary>
        </member>
        <member name="M:Shamisen.Int24.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Int24"/> struct.
            </summary>
            <param name="value">The source <see cref="T:System.Int32"/> value. Mask:0x807fffff</param>
        </member>
        <member name="M:Shamisen.Int24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Int24"/> struct.
            </summary>
            <param name="head">The head.</param>
            <param name="middle">The middle.</param>
            <param name="tail">The tail.</param>
        </member>
        <member name="M:Shamisen.Int24.op_Implicit(Shamisen.Int24)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Int24"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.op_Explicit(System.Int32)~Shamisen.Int24">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Shamisen.Int24"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.op_Equality(Shamisen.Int24,Shamisen.Int24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Int24"/> objects are equal.
            </summary>
            <param name="int1">The first <see cref="T:Shamisen.Int24"/> to compare.</param>
            <param name="int2">The second <see cref="T:Shamisen.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.op_UnaryNegation(Shamisen.Int24)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.op_Inequality(Shamisen.Int24,Shamisen.Int24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Int24"/> objects are not equal.
            </summary>
            <param name="int1">The first <see cref="T:Shamisen.Int24"/> to compare.</param>
            <param name="int2">The second <see cref="T:Shamisen.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if int1 and int2 are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.op_LessThan(Shamisen.Int24,Shamisen.Int24)">
            <summary>
            Determines whether one specified <see cref="T:Shamisen.Int24"/> is less than another specified <see cref="T:Shamisen.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.op_GreaterThan(Shamisen.Int24,Shamisen.Int24)">
            <summary>
            Determines whether one specified <see cref="T:Shamisen.Int24"/> is greater than another specified <see cref="T:Shamisen.Int24"/> value.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is greater than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.op_LessThanOrEqual(Shamisen.Int24,Shamisen.Int24)">
            <summary>
            Returns a value that indicates whether a specified <see cref="T:Shamisen.Int24"/> is less than or equal to another specified <see cref="T:Shamisen.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than or equal to right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.op_GreaterThanOrEqual(Shamisen.Int24,Shamisen.Int24)">
            <summary>
            Determines whether one specified <see cref="T:Shamisen.Int24"/> is greater than or equal to another specified <see cref="T:Shamisen.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int24"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if <see cref="T:Shamisen.Int24"/> is greater than or equal to <see cref="T:Shamisen.Int24"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.ReverseEndianness(Shamisen.Int24)">
            <summary>
            Reverses endianness of the given <see cref="T:Shamisen.Int24"/> value.
            </summary>
            <param name="value">The value to reverse endianness.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Int24.CompareTo(Shamisen.Int24)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:Shamisen.Int24"/> value and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified <see cref="T:Shamisen.Int24"/> value.
            </summary>
            <param name="other">The <see cref="T:Shamisen.Int24"/> to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the other parameter.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.Equals(Shamisen.Int24)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Shamisen.Int24.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Shamisen.OffsetSByte">
            <summary>
            Represents a value that is offset 128 inside 8-bit PCM.
            </summary>
        </member>
        <member name="F:Shamisen.OffsetSByte.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:Shamisen.OffsetSByte"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="F:Shamisen.OffsetSByte.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:Shamisen.OffsetSByte"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="F:Shamisen.OffsetSByte.Zero">
            <summary>
            Represents the number zero (0).
            </summary>
        </member>
        <member name="F:Shamisen.OffsetSByte.One">
            <summary>
            Represents the number one (1).
            </summary>
        </member>
        <member name="F:Shamisen.OffsetSByte.MinusOne">
            <summary>
            Represents the number negative one (-1).
            </summary>
        </member>
        <member name="M:Shamisen.OffsetSByte.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.OffsetSByte"/> struct.
            </summary>
            <param name="value">The represented value.</param>
        </member>
        <member name="M:Shamisen.OffsetSByte.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.OffsetSByte"/> struct.
            </summary>
            <param name="value">The stored value.</param>
        </member>
        <member name="M:Shamisen.OffsetSByte.CompareTo(Shamisen.OffsetSByte)">
            <summary>
            Compares this instance to a specified 32-bit signed integer and returns an indication of their relative values.
            </summary>
            <param name="other">An integer to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.Equals(Shamisen.OffsetSByte)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_Equality(Shamisen.OffsetSByte,Shamisen.OffsetSByte)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.OffsetSByte"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.OffsetSByte"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.OffsetSByte"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_Inequality(Shamisen.OffsetSByte,Shamisen.OffsetSByte)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.OffsetSByte"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.OffsetSByte"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.OffsetSByte"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_Explicit(Shamisen.OffsetSByte)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.OffsetSByte"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_Explicit(Shamisen.OffsetSByte)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.OffsetSByte"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_Explicit(Shamisen.OffsetSByte)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.OffsetSByte"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_Explicit(System.SByte)~Shamisen.OffsetSByte">
            <summary>
            Performs an explicit conversion from <see cref="T:System.SByte"/> to <see cref="T:Shamisen.OffsetSByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_Explicit(System.Int32)~Shamisen.OffsetSByte">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Shamisen.OffsetSByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the value of this instance.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:Shamisen.OffsetSByte"/> equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <returns>The equivalent to the number contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.TryParse(System.String,Shamisen.OffsetSByte@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:Shamisen.OffsetSByte"/> equivalent.<br/>
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:Shamisen.OffsetSByte"/> number that is equivalent to the numeric value contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed.
            The conversion fails if the <paramref name="s"/> parameter is <c>null</c> or <see cref="F:System.String.Empty"/>, is not a number in a valid format, or represents a number less than <see cref="F:Shamisen.OffsetSByte.MinValue"/> or greater than <see cref="F:Shamisen.OffsetSByte.MaxValue"/>.
            This parameter is passed uninitialized; any value originally supplied in result is overwritten.</param>
            <returns>
            <c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_LessThan(Shamisen.OffsetSByte,Shamisen.OffsetSByte)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.OffsetSByte"/> is less than another specified <see cref="T:Shamisen.OffsetSByte"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_LessThanOrEqual(Shamisen.OffsetSByte,Shamisen.OffsetSByte)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.OffsetSByte"/> is less than or equal to another specified <see cref="T:Shamisen.OffsetSByte"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_GreaterThan(Shamisen.OffsetSByte,Shamisen.OffsetSByte)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.OffsetSByte"/> is greater than another specified <see cref="T:Shamisen.OffsetSByte"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByte.op_GreaterThanOrEqual(Shamisen.OffsetSByte,Shamisen.OffsetSByte)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.OffsetSByte"/> is greater than or equal to another specified <see cref="T:Shamisen.OffsetSByte"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.ReadResult">
            <summary>
            Represents a result of read operation.
            </summary>
        </member>
        <member name="P:Shamisen.ReadResult.EndOfStream">
            <summary>
            Represents the fact that the source stream is empty right now.
            </summary>
        </member>
        <member name="P:Shamisen.ReadResult.WaitingForSource">
            <summary>
            Represents the fact that the source stream is waiting for source's IO.
            </summary>
        </member>
        <member name="M:Shamisen.ReadResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.ReadResult"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Shamisen.ReadResult.IsEndOfStream">
            <summary>
            Gets a value indicating whether the source has already reached the end of stream.
            </summary>
            <value>
              <c>true</c> if the source has already reached the end of stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.ReadResult.HasData">
            <summary>
            Gets a value indicating whether the buffer has data.
            </summary>
            <value>
              <c>true</c> if the buffer has data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.ReadResult.HasNoData">
            <summary>
            Gets a value indicating whether the buffer has no data.
            </summary>
            <value>
              <c>true</c> if the buffer has no data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.ReadResult.Length">
            <summary>
            Gets the actual length read.
            </summary>
            <value>
            The actual length read.
            </value>
        </member>
        <member name="M:Shamisen.ReadResult.op_Explicit(Shamisen.ReadResult)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.ReadResult"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_Explicit(Shamisen.ReadResult)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Shamisen.ReadResult"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_Implicit(System.Int32)~Shamisen.ReadResult">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Shamisen.ReadResult"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.Equals(Shamisen.ReadResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.CompareTo(Shamisen.ReadResult)">
            <summary>
            Compares this instance to a specified <see cref="T:Shamisen.ReadResult"/> and returns an indication of their relative values.
            </summary>
            <param name="other">An <see cref="T:Shamisen.ReadResult"/>  to compare.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_Equality(Shamisen.ReadResult,Shamisen.ReadResult)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.ReadResult"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.ReadResult"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.ReadResult"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_Inequality(Shamisen.ReadResult,Shamisen.ReadResult)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.ReadResult"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.ReadResult"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.ReadResult"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_LessThan(Shamisen.ReadResult,Shamisen.ReadResult)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.ReadResult"/> is less than another specified <see cref="T:Shamisen.ReadResult"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_LessThanOrEqual(Shamisen.ReadResult,Shamisen.ReadResult)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.ReadResult"/> is less than or equal to another specified <see cref="T:Shamisen.ReadResult"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_GreaterThan(Shamisen.ReadResult,Shamisen.ReadResult)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.ReadResult"/> is greater than another specified <see cref="T:Shamisen.ReadResult"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_GreaterThanOrEqual(Shamisen.ReadResult,Shamisen.ReadResult)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:Shamisen.ReadResult"/> is greater than or equal to another specified <see cref="T:Shamisen.ReadResult"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_Addition(Shamisen.ReadResult,System.Int32)">
            <summary>
            Adds specified <see cref="T:Shamisen.ReadResult"/> value and <see cref="T:System.Int32"/> value.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_Multiply(Shamisen.ReadResult,System.Int32)">
            <summary>
            Multiplies specified <see cref="T:Shamisen.ReadResult"/> value and <see cref="T:System.Int32"/> value.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.op_Division(Shamisen.ReadResult,System.Int32)">
            <summary>
            Divides specified <see cref="T:Shamisen.ReadResult"/> value with <see cref="T:System.Int32"/> value.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Shamisen.ReadResult.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            The fully qualified type name.
            </returns>
        </member>
        <member name="T:Shamisen.StackOnlyActionContainer`1">
            <summary>
            Stores <see cref="T:System.Action`1"/> that cannot leave the stack.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Shamisen.StackOnlyActionContainer`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.StackOnlyActionContainer`1"/> struct.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Shamisen.StackOnlyActionContainer`1.Invoke(`0)">
            <summary>
            Invokes this instance with specified parameter.
            </summary>
            <param name="parameter">The first parameter.</param>
        </member>
        <member name="M:Shamisen.StackOnlyActionContainer`1.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.StackOnlyActionContainer`1.Equals(Shamisen.StackOnlyActionContainer{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="value">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.StackOnlyActionContainer`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.StackOnlyActionContainer`1.op_Equality(Shamisen.StackOnlyActionContainer{`0},Shamisen.StackOnlyActionContainer{`0})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.StackOnlyActionContainer`1"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.StackOnlyActionContainer`1"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.StackOnlyActionContainer`1"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.StackOnlyActionContainer`1.op_Inequality(Shamisen.StackOnlyActionContainer{`0},Shamisen.StackOnlyActionContainer{`0})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.StackOnlyActionContainer`1"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.StackOnlyActionContainer`1"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.StackOnlyActionContainer`1"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.UInt24">
            <summary>
            Represents an unsigned 24-bit number.
            </summary>
        </member>
        <member name="F:Shamisen.UInt24.MaxValue">
            <summary>
            Represents the largest possible value of an System.Int24. This field is constant.
            </summary>
        </member>
        <member name="F:Shamisen.UInt24.MinValue">
            <summary>
            Represents the smallest possible value of System.Int24. This field is constant.
            </summary>
        </member>
        <member name="M:Shamisen.UInt24.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.UInt24"/> struct.
            </summary>
            <param name="value">The source <see cref="T:System.UInt32"/> value. Mask:0x00ffffff</param>
        </member>
        <member name="M:Shamisen.UInt24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.UInt24"/> struct.
            </summary>
            <param name="head">The head.</param>
            <param name="middle">The middle.</param>
            <param name="tail">The tail.</param>
        </member>
        <member name="M:Shamisen.UInt24.op_Implicit(Shamisen.UInt24)~System.UInt32">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Int24"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.op_Explicit(System.UInt32)~Shamisen.UInt24">
            <summary>
            Performs an explicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Shamisen.UInt24"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.op_Equality(Shamisen.UInt24,Shamisen.UInt24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.UInt24"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <returns>
              <c>true</c> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.op_Inequality(Shamisen.UInt24,Shamisen.UInt24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.UInt24"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <returns>
              <c>true</c> if <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.Equals(Shamisen.UInt24)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.op_LessThan(Shamisen.UInt24,Shamisen.UInt24)">
            <summary>
            Determines whether one specified <see cref="T:Shamisen.UInt24"/> is less than another specified <see cref="T:Shamisen.UInt24"/>.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.op_GreaterThan(Shamisen.UInt24,Shamisen.UInt24)">
            <summary>
            Determines whether one specified <see cref="T:Shamisen.UInt24"/> is greater than another specified <see cref="T:Shamisen.UInt24"/> value.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <returns>
              <c>true</c> if left is greater than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.op_LessThanOrEqual(Shamisen.UInt24,Shamisen.UInt24)">
            <summary>
            Returns a value that indicates whether a specified <see cref="T:Shamisen.UInt24"/> is less than or equal to another specified <see cref="T:Shamisen.UInt24"/>.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than or equal to right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.op_GreaterThanOrEqual(Shamisen.UInt24,Shamisen.UInt24)">
            <summary>
            Determines whether one specified <see cref="T:Shamisen.UInt24"/> is greater than or equal to another specified <see cref="T:Shamisen.UInt24"/>.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.UInt24"/> to compare.</param>
            <returns>
              <c>true</c> if <see cref="T:Shamisen.UInt24"/> is greater than or equal to <see cref="T:Shamisen.UInt24"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.ReverseEndianness(Shamisen.UInt24)">
            <summary>
            Reverses endianness of the given <see cref="T:Shamisen.UInt24"/> value.
            </summary>
            <param name="value">The value to reverse endianness.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.UInt24.CompareTo(Shamisen.UInt24)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:Shamisen.UInt24"/> value and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified <see cref="T:Shamisen.UInt24"/> value.
            </summary>
            <param name="other">The <see cref="T:Shamisen.UInt24"/> to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the other parameter.
            </returns>
        </member>
        <member name="M:Shamisen.UInt24.GetDebuggerDisplay">
            <summary>
            Gets the debugger display.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.UInt24.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shamisen.VectorB4">
            <summary>
            Represents a vector of four <see cref="T:System.Byte"/> elements.
            </summary>
        </member>
        <member name="P:Shamisen.VectorB4.Value0">
            <summary>
            Gets the 0th value.
            </summary>
            <value>
            The value0.
            </value>
        </member>
        <member name="P:Shamisen.VectorB4.Value1">
            <summary>
            Gets the 1st value.
            </summary>
            <value>
            The value1.
            </value>
        </member>
        <member name="P:Shamisen.VectorB4.Value2">
            <summary>
            Gets the 2nd value.
            </summary>
            <value>
            The value2.
            </value>
        </member>
        <member name="P:Shamisen.VectorB4.Value3">
            <summary>
            Gets the 3rd value.
            </summary>
            <value>
            The value3.
            </value>
        </member>
        <member name="P:Shamisen.VectorB4.StringView">
            <summary>
            Gets the string view.
            </summary>
            <value>
            The string view.
            </value>
        </member>
        <member name="M:Shamisen.VectorB4.ToString">
            <summary>
            Gets the string view.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Shamisen.VectorB4.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.VectorB4.Equals(Shamisen.VectorB4)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.VectorB4.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Shamisen.VectorB4.op_Equality(Shamisen.VectorB4,Shamisen.VectorB4)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.VectorB4"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.VectorB4"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.VectorB4"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.VectorB4.op_Inequality(Shamisen.VectorB4,Shamisen.VectorB4)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.VectorB4"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.VectorB4"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.VectorB4"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.VectorB4.GetDebuggerDisplay">
            <summary>
            Gets the debugger display.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shamisen.SystemExtensions.Memory.NativeSpan`1">
            <summary>
            Represents a continuous region of memory.
            </summary>
            <typeparam name="T">The type of contents.</typeparam>
        </member>
        <member name="M:Shamisen.SystemExtensions.Memory.NativeSpan`1.#ctor(`0*,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.SystemExtensions.Memory.NativeSpan`1"/> struct.
            </summary>
            <param name="headPointer">The head pointer.</param>
            <param name="length">The length.</param>
        </member>
        <member name="P:Shamisen.SystemExtensions.Memory.NativeSpan`1.Length">
            <summary>
            The length of this <see cref="T:Shamisen.SystemExtensions.Memory.NativeSpan`1"/>.
            </summary>
        </member>
        <member name="P:Shamisen.SystemExtensions.Memory.NativeSpan`1.Item(System.IntPtr)">
            <summary>
            Returns the <paramref name="index"/>th element of this <see cref="T:Shamisen.SystemExtensions.Memory.NativeSpan`1"/>.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SystemExtensions.Memory.NativeSpan`1.Slice(System.IntPtr)">
            <summary>
            Slices the <see cref="T:Shamisen.SystemExtensions.Memory.NativeSpan`1"/> with the specified start.
            </summary>
            <param name="start">The start.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SystemExtensions.Memory.NativeSpan`1.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.SystemExtensions.Memory.NativeSpan`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Shamisen.SystemExtensions.Memory.NativeSpan`1.op_Equality(Shamisen.SystemExtensions.Memory.NativeSpan{`0},Shamisen.SystemExtensions.Memory.NativeSpan{`0})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.SystemExtensions.Memory.NativeSpan`1"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.SystemExtensions.Memory.NativeSpan`1"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.SystemExtensions.Memory.NativeSpan`1"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.SystemExtensions.Memory.NativeSpan`1.op_Inequality(Shamisen.SystemExtensions.Memory.NativeSpan{`0},Shamisen.SystemExtensions.Memory.NativeSpan{`0})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.SystemExtensions.Memory.NativeSpan`1"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.SystemExtensions.Memory.NativeSpan`1"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.SystemExtensions.Memory.NativeSpan`1"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.SpanExtensions">
            <summary>
            Provides some extension functions.
            </summary>
            <summary>
            Provides some extension functions.
            </summary>
        </member>
        <member name="M:Shamisen.SpanExtensions.QuickFill``1(System.Span{``0},``0)">
            <summary>
            Quickly (but slower than <see cref="M:Shamisen.SpanExtensions.FastFill(System.Span{System.Single},System.Single)"/>) fills the specified memory region, with the given <paramref name="value"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ShiftRight(System.Span{System.Int32})">
            <summary>
            Moves the elements of specified <paramref name="span"/> right by 1 element.
            </summary>
            <param name="span">The <see cref="T:System.Span`1"/> to move its elements.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ShiftRight``1(System.Span{``0})">
            <summary>
            Moves the elements of specified <paramref name="span"/> right by 1 element.
            </summary>
            <typeparam name="TSample"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to move its elements.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.Skip``1(System.Span{``0},System.Int32)">
            <summary>
            Skips the specified step.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The span.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceWhileIfLongerThan``1(System.Span{``0},System.Int32)">
            <summary>
            Slices the specified <paramref name="span"/> to the specified <paramref name="maxLength"/> if the <paramref name="span"/> is longer than the <paramref name="maxLength"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The span.</param>
            <param name="maxLength">The maximum length.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceWhileIfLongerThan``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Slices the specified <paramref name="span"/> to the specified <paramref name="maxLength"/> if the <paramref name="span"/> is longer than the <paramref name="maxLength"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The span.</param>
            <param name="maxLength">The maximum length.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceWhileIfLongerThan``1(System.Span{``0},System.UInt64)">
            <summary>
            Slices the specified <paramref name="span"/> to the specified <paramref name="maxLength"/> if the <paramref name="span"/> is longer than the <paramref name="maxLength"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The span.</param>
            <param name="maxLength">The maximum length.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceWhileIfLongerThanWithLazyDivide``1(System.Span{``0},System.Int32,System.Int32)">
            <summary>
            Slices the specified <paramref name="span"/> to the specified <paramref name="maxLength"/> / <paramref name="divisor"/> if the <paramref name="span"/> is longer than the <paramref name="maxLength"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The span.</param>
            <param name="maxLength">The maximum length multiplied by <paramref name="maxLength"/>.</param>
            <param name="divisor">The number to divide.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceWhileIfLongerThanWithLazyDivide``1(System.ReadOnlySpan{``0},System.Int32,System.Int32)">
            <summary>
            Slices the specified <paramref name="span"/> to the specified <paramref name="maxLength"/> / <paramref name="divisor"/> if the <paramref name="span"/> is longer than the <paramref name="maxLength"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The span.</param>
            <param name="maxLength">The maximum length multiplied by <paramref name="maxLength"/>.</param>
            <param name="divisor">The number to divide.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceAlign``1(System.Span{``0},DivideSharp.Int32Divisor)">
            <summary>
            Slices the <paramref name="span"/> aligned with the multiple of <paramref name="channelsDivisor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="channelsDivisor">The divisor set to align width.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceFromEnd``1(System.Span{``0},System.Int32)">
            <summary>
            Slices the <paramref name="span"/> back from the end of <paramref name="span"/> with specified <paramref name="length"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="length">The length to slice back.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{Shamisen.Fixed64})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{System.Int64})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{System.Double})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{System.UInt64})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{Shamisen.Fixed32})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{System.UInt32})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{System.Single})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{System.Int32})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{Shamisen.Int24})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{Shamisen.Fixed16})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{System.UInt16})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{System.Half})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.ReverseEndianness(System.Span{System.Int16})">
            <summary>
            Reverses the endianness of each elements in specified <paramref name="span"/>.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.FastFill(System.Span{System.Single},System.Single)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.FastFill(System.Span{System.Double},System.Double)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.FastFill(System.Span{System.Byte},System.Byte)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.FastFill(System.Span{System.UInt16},System.UInt16)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.FastFill(System.Span{System.UInt32},System.UInt32)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.FastFill(System.Span{System.UInt64},System.UInt64)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.FastFill(System.Span{System.SByte},System.SByte)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.FastFill(System.Span{System.Int16},System.Int16)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.FastFill(System.Span{System.Int32},System.Int32)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.FastFill(System.Span{System.Int64},System.Int64)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceAlign``1(System.Span{``0},System.Int32)">
            <summary>
            Slices the <paramref name="span"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceAlign``1(System.Span{``0},DivideSharp.UInt32Divisor)">
            <summary>
            Slices the <paramref name="span"/> aligned with the multiple of <paramref name="channelsDivisor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="channelsDivisor">The divisor set to align width.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceWhile``1(System.Span{``0},System.Int32)">
            <summary>
            Slices the <paramref name="span"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.Span{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.Span{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.Span{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceAlign``1(System.Memory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="memory"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceAlign``1(System.Memory{``0},DivideSharp.UInt32Divisor)">
            <summary>
            Slices the <paramref name="memory"/> aligned with the multiple of <paramref name="channelsDivisor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="channelsDivisor">The divisor set to align width.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceWhile``1(System.Memory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="memory"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.Memory{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.Memory{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.Memory{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.Memory{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceAlign``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlySpan"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceAlign``1(System.ReadOnlySpan{``0},DivideSharp.UInt32Divisor)">
            <summary>
            Slices the <paramref name="readOnlySpan"/> aligned with the multiple of <paramref name="channelsDivisor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="channelsDivisor">The divisor set to align width.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceWhile``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceAlign``1(System.ReadOnlyMemory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceAlign``1(System.ReadOnlyMemory{``0},DivideSharp.UInt32Divisor)">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> aligned with the multiple of <paramref name="channelsDivisor"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="channelsDivisor">The divisor set to align width.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.SliceWhile``1(System.ReadOnlyMemory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.CopyTo``1(System.Memory{``0},System.Span{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.Memory`1"/> into a destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.Memory`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.CopyTo``1(System.ReadOnlyMemory{``0},System.Span{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.ReadOnlyMemory`1"/> into a destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlyMemory`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.CopyTo``1(System.Span{``0},System.Memory{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.Span`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Memory`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.CopyTo``1(System.ReadOnlySpan{``0},System.Memory{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.ReadOnlySpan`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Memory`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.TryCopyTo``1(System.Memory{``0},System.Span{``0})">
            <summary>
            Attempts to copy the current <see cref="T:System.Memory`1"/> to a destination <see cref="T:System.Span`1"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.Memory`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns><c>true</c> if the copy operation succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.TryCopyTo``1(System.ReadOnlyMemory{``0},System.Span{``0})">
            <summary>
            Attempts to copy the current <see cref="T:System.ReadOnlyMemory`1"/> to a destination <see cref="T:System.Span`1"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlyMemory`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns><c>true</c> if the copy operation succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.TryCopyTo``1(System.Span{``0},System.Memory{``0})">
            <summary>
            Copies the contents of current <see cref="T:System.Span`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.SpanExtensions.TryCopyTo``1(System.ReadOnlySpan{``0},System.Memory{``0})">
            <summary>
            Copies the contents of current <see cref="T:System.ReadOnlySpan`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns></returns>
        </member>
        <member name="T:System.Numerics.Vector5">
            <summary>
            Represents a vector that has 5 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="F:System.Numerics.Vector5.front">
            <summary>
            The front 4 values
            </summary>
        </member>
        <member name="F:System.Numerics.Vector5.back">
            <summary>
            The back value
            </summary>
        </member>
        <member name="M:System.Numerics.Vector5.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector5"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector5.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector5"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
        </member>
        <member name="M:System.Numerics.Vector5.#ctor(System.Numerics.Vector4,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector5"/> struct.
            </summary>
            <param name="four">The front four values.</param>
            <param name="last">The lase value.</param>
        </member>
        <member name="M:System.Numerics.Vector5.op_UnaryNegation(System.Numerics.Vector5)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Addition(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Subtraction(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Multiply(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Division(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Multiply(System.Numerics.Vector5,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Multiply(System.Single,System.Numerics.Vector5)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Division(System.Numerics.Vector5,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Equality(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Inequality(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.Equals(System.Numerics.Vector5)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.Numerics.Vector6">
            <summary>
            Represents a vector that has 6 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value6">
            <summary>
            The sixth value
            </summary>
        </member>
        <member name="F:System.Numerics.Vector6.front">
            <summary>
            The front 3 values
            </summary>
        </member>
        <member name="F:System.Numerics.Vector6.back">
            <summary>
            The back 3 values
            </summary>
        </member>
        <member name="M:System.Numerics.Vector6.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector6"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector6.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector6"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
        </member>
        <member name="M:System.Numerics.Vector6.#ctor(System.Numerics.Vector4,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector6"/> struct.
            </summary>
            <param name="front">The front four values.</param>
            <param name="back">The back two values.</param>
        </member>
        <member name="M:System.Numerics.Vector6.op_UnaryNegation(System.Numerics.Vector6)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Addition(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Subtraction(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Multiply(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Division(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Multiply(System.Numerics.Vector6,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Multiply(System.Single,System.Numerics.Vector6)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Division(System.Numerics.Vector6,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Equality(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Inequality(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.Equals(System.Numerics.Vector6)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.Numerics.Vector7">
            <summary>
            Represents a vector that has 7 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value6">
            <summary>
            The sixth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value7">
            <summary>
            The seventh value
            </summary>
        </member>
        <member name="F:System.Numerics.Vector7.front">
            <summary>
            The front 3 values
            </summary>
        </member>
        <member name="F:System.Numerics.Vector7.back">
            <summary>
            The back 4 values
            </summary>
        </member>
        <member name="M:System.Numerics.Vector7.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector7"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector7.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector7"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
        </member>
        <member name="M:System.Numerics.Vector7.#ctor(System.Numerics.Vector4,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector7"/> struct.
            </summary>
            <param name="front">The front four values.</param>
            <param name="back">The back three values.</param>
        </member>
        <member name="M:System.Numerics.Vector7.op_UnaryNegation(System.Numerics.Vector7)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Addition(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Subtraction(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Multiply(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Division(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Multiply(System.Numerics.Vector7,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Multiply(System.Single,System.Numerics.Vector7)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Division(System.Numerics.Vector7,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Equality(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Inequality(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.Equals(System.Numerics.Vector7)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.Numerics.Vector8">
            <summary>
            Represents a vector that has 8 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value6">
            <summary>
            The sixth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value7">
            <summary>
            The seventh value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value8">
            <summary>
            The eighth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Front">
            <summary>
            The front 4 values
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Back">
            <summary>
            The back 4 values
            </summary>
        </member>
        <member name="M:System.Numerics.Vector8.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector8"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector8.#ctor(System.Runtime.Intrinsics.Vector256{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector8"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Numerics.Vector8.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector8"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
            <param name="v8">The v8.</param>
        </member>
        <member name="M:System.Numerics.Vector8.#ctor(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector8"/> struct.
            </summary>
            <param name="front">The front four values.</param>
            <param name="back">The back four values.</param>
        </member>
        <member name="M:System.Numerics.Vector8.op_UnaryNegation(System.Numerics.Vector8)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Addition(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Subtraction(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Division(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Numerics.Vector8,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Single,System.Numerics.Vector8)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Division(System.Numerics.Vector8,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Equality(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Inequality(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.Equals(System.Numerics.Vector8)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
    </members>
</doc>
