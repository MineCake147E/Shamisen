<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

    var c = Enumerable.Range(2, 32 - 1);
    var generateArm = new HashSet<int>(){};
    var names = c.Select(f=>(Order: f, GenerateArm: generateArm.Contains(f)));
#>
// <auto-generated />
#region License notice

/* libFLAC - Free Lossless Audio Codec library
 * Copyright (C) 2000-2009  Josh Coalson
 * Copyright (C) 2011-2018  Xiph.Org Foundation
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * - Neither the name of the Xiph.org Foundation nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#endregion License notice

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Shamisen.Codecs.Flac.SubFrames
{
    public sealed partial class FlacLinearPredictionSubFrame
    {
<#  foreach(var item in names){#>
#region Order<#=item.Order#>
        [MethodImpl(OptimizationUtils.InlineAndOptimizeIfPossible)]
        internal static unsafe bool RestoreSignalOrder<#=item.Order#>Intrinsic(int shiftsNeeded, ReadOnlySpan<int> residual, ReadOnlySpan<int> coeffs, Span<int> output)
        {
<#      if(item.GenerateArm){#>
#if NET5_0_OR_GREATER
            if (Arm.RestoreSignalOrder<#=item.Order#>(shiftsNeeded, residual, coeffs, output)) return true;
#endif
<#}#>
#if NETCOREAPP3_1_OR_GREATER
            if (X86.RestoreSignalOrder<#=item.Order#>(shiftsNeeded, residual, coeffs, output)) return true;
#endif
            return false;
        }
        [MethodImpl(OptimizationUtils.InlineAndOptimizeIfPossible)]
        internal static unsafe bool RestoreSignalOrder<#=item.Order#>WideIntrinsic(int shiftsNeeded, ReadOnlySpan<int> residual, ReadOnlySpan<int> coeffs, Span<int> output)
        {
<#      if(item.GenerateArm){#>
#if NET5_0_OR_GREATER
            if (Arm.RestoreSignalOrder<#=item.Order#>Wide(shiftsNeeded, residual, coeffs, output)) return true;
#endif
<#}#>
#if NETCOREAPP3_1_OR_GREATER
            if (X86.RestoreSignalOrder<#=item.Order#>Wide(shiftsNeeded, residual, coeffs, output)) return true;
#endif
            return false;
        }
#endregion Order<#=item.Order#>
<#  } #>
    }
}