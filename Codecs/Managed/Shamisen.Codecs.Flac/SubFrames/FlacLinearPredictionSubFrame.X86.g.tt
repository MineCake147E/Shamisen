<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Numerics" #>
<#@ output extension=".cs" #>
<#

    var c = Enumerable.Range(2, 32 - 2 + 1);
    var generateWideOnly = new HashSet<int>(){};
    var generateWideOnlyAvx2 = new HashSet<int>(){2,3,4,5,6,7,9,10,11,12};
    const bool TestSse41OverAvx2 = false;
    var names = c.Select(f=>(Order: f, GenerateWideOnly: generateWideOnly.Contains(f), GenerateWideOnlyAvx2: generateWideOnlyAvx2.Contains(f)));

    const string NegativeDebugFlagDescription = "Unsafe.AsPointer<T>(ref T) should only be used in Release mode.";

    static int Log2(int a){
        uint v = (uint)a;
        int u = 0;
        while(v > 0){
            v >>= 1;
            u++;
        }
        return u;
    }
#>
// <auto-generated />
#if NETCOREAPP3_1_OR_GREATER

#region License notice

/* libFLAC - Free Lossless Audio Codec library
 * Copyright (C) 2000-2009  Josh Coalson
 * Copyright (C) 2011-2018  Xiph.Org Foundation
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * - Neither the name of the Xiph.org Foundation nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#endregion License notice

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Text;
using System.Threading.Tasks;

namespace Shamisen.Codecs.Flac.SubFrames
{
    public sealed partial class FlacLinearPredictionSubFrame
    {
        internal static partial class X86
        {
<#  foreach(var item in names){#>
#region Order<#=item.Order#>
<#  int jmax = item.Order + (item.Order & 1) - 2;
    int jmax2 = item.Order - 2;
    int j;
    if(!item.GenerateWideOnly){#>

            [MethodImpl(OptimizationUtils.InlineAndOptimizeIfPossible)]
            internal static bool <#=$"RestoreSignalOrder{item.Order}"#>(int shiftsNeeded, ReadOnlySpan<int> residual, ReadOnlySpan<int> coeffs, Span<int> output)
            {
<#      if(!item.GenerateWideOnlyAvx2){#>
                if (Avx2.IsSupported<#=(TestSse41OverAvx2 ? " && !Sse41.IsSupported" : "")#>)
                {
                    <#=$"RestoreSignalOrder{item.Order}Avx2"#>(shiftsNeeded, residual, coeffs, output);
                    return true;
                }
<#      }#>
                if (Sse41.IsSupported)
                {
                    <#=$"RestoreSignalOrder{item.Order}Sse41"#>(shiftsNeeded, residual, coeffs, output);
                    return true;
                }
                return false;
            }

            [MethodImpl(OptimizationUtils.AggressiveOptimizationIfPossible)]
            internal static unsafe void <#=$"RestoreSignalOrder{item.Order}Sse41"#>(int shiftsNeeded, ReadOnlySpan<int> residual, ReadOnlySpan<int> coeffs, Span<int> output)
            {
                const int Order = <#=item.Order#>;
                if (coeffs.Length < Order) return;
                _ = coeffs[Order - 1];
                var vshift = Vector128.CreateScalar(shiftsNeeded);
                ref var o = ref MemoryMarshal.GetReference(output);
                ref var d = ref Unsafe.Add(ref o, Order);
                ref var r = ref MemoryMarshal.GetReference(residual);
                ref var c = ref MemoryMarshal.GetReference(coeffs);
                Vector128<int> sum;
                var vzero = Vector128.Create(0);
                nint dataLength = output.Length - Order;
<#      
        for(j = 0; j < item.Order - 3; j+=4)
        {
#>
                var vcoeff<#=j / 4#> = Unsafe.As<int, Vector128<int>>(ref Unsafe.Add(ref c, <#=j#>));
<#
        }
        switch(item.Order % 4){
            case 1:#>
                var vcoeff<#=j / 4#> = Vector128.CreateScalarUnsafe(Unsafe.Add(ref c, <#=j#>));
<#              break;
            case 2:#>
                var vcoeff<#=j / 4#> = Vector128.CreateScalarUnsafe(Unsafe.As<int, ulong>(ref Unsafe.Add(ref c, <#=j#>))).AsInt32();
<#              break;
            case 3:#>
                var vcoeff<#=j / 4#> = Sse2.ShiftRightLogical128BitLane(Unsafe.As<int, Vector128<int>>(ref Unsafe.Add(ref c, <#=j - 1#>)), 4);
<#              break;
            default:
                break;
        }
        int jmaxNSse41 = item.Order + (item.Order % 4 > 0 ? 1 : 0) - 2;
        int jmax2NSse41 = item.Order - 2;
        int k = 0;
        var orderO4 = item.Order / 4;
        var orderM4 = item.Order % 4;
        var maxVsSse41 = orderO4 + (orderM4 > 0 ? 1 : 0);
        for(j = item.Order; j > 3; j-=4)
        {
#>
                var vprev<#=k++#> = Sse2.Shuffle(Unsafe.As<int, Vector128<int>>(ref Unsafe.Add(ref o, <#=j - 4#>)), 0b00_01_10_11);
<#
        }
        switch(item.Order % 4){
            case 1:#>
                var vprev<#=k#> = Sse2.Shuffle(Vector128.CreateScalarUnsafe((int)o), 0b11_11_11_00);
<#              break;
            case 2:#>
                var vprev<#=k#> = Sse2.Shuffle(Vector128.CreateScalarUnsafe(Unsafe.As<int, ulong>(ref o)).AsInt32(), 0b11_01_00_01);
<#              break;
            case 3:#>
                var vprev<#=k#> = Sse2.Shuffle(Unsafe.As<int, Vector128<int>>(ref o), 0b11_00_01_10);
<#              break;
            default:
                break;
        }
#>
                Vector128<int> <#=string.Join(", ", Enumerable.Range(0, Log2(maxVsSse41)).Select(a=>$"sum{a}"))#>;
                for (nint i = 0; i < dataLength; i++)
                {
<#      int p;
        Stack<(int order, int index)> tower = new();
        for(p = 0; p < maxVsSse41; p++){
            var nind = tower.Count > 0 ? tower.Peek().index + 1 : 0;
        #>
                    sum<#=nind#> = Sse41.MultiplyLow(vcoeff<#=p#>, vprev<#=p#>);
<#
            tower.Push((0, nind));
            while(tower.Count > 1){
                var t1 = tower.Pop();
                if(tower.Peek().order == t1.order){
                    var t2 = tower.Pop();
                    tower.Push((t2.order + 1, t2.index));
#>
                    sum<#=t2.index#> = Sse2.Add(sum<#=t2.index#>, sum<#=t1.index#>);
<#              
                }else{
                    tower.Push(t1);
                    break;
                }
            }
        }
        while(tower.Count > 1){
            var t = tower.Pop();
            var t2 = tower.Pop();
            tower.Push((t2.order + 1, t2.index));
#>
                    sum<#=t2.index#> = Sse2.Add(sum<#=t.index#>, sum<#=t2.index#>);
<#
        }
        
#>
                    var sumx = Sse2.Shuffle(sum0, 0xee);
                    sum = Sse2.Add(sum0, sumx);
                    sumx = Sse2.Shuffle(sum, 0x55);
                    sum = Sse2.Add(sum, sumx);
                    var res = Vector128.CreateScalarUnsafe(Unsafe.Add(ref r, i));
                    sum = Sse2.ShiftRightArithmetic(sum, vshift);
                    var y = Sse2.Add(sum, res);
                    Unsafe.Add(ref d, i) = y.GetElement(0);
                    y = Sse2.ShiftLeftLogical128BitLane(y, 12);
<#      for(int i = 0; i < item.Order - 4; i += 4){#>
                    vprev<#=(jmaxNSse41 - i) / 4#> = Ssse3.AlignRight(vprev<#=(jmaxNSse41 - i) / 4#>, vprev<#=(jmaxNSse41 - i) / 4 - 1#>, 12);
<#      }#>
                    vprev0 = Ssse3.AlignRight(vprev0, y, 12);
                }
            }

<#  }
    if(!item.GenerateWideOnlyAvx2){
        var orderO8 = item.Order / 8;
        var orderM8 = item.Order % 8;
        var maxVs = orderO8 + (orderM8 > 0 ? 1 : 0);
#>
            [MethodImpl(OptimizationUtils.AggressiveOptimizationIfPossible)]
            internal static unsafe void <#=$"RestoreSignalOrder{item.Order}Avx2"#>(int shiftsNeeded, ReadOnlySpan<int> residual, ReadOnlySpan<int> coeffs, Span<int> output)
            {
                const int Order = <#=item.Order#>;
                if(coeffs.Length < Order) return;
                _ = coeffs[Order - 1];
                var vshift = Vector128.CreateScalar(shiftsNeeded);
                var vzero256 = Vector256.Create(0);
                var vzero = vzero256.GetLower();
                ref var c = ref MemoryMarshal.GetReference(coeffs);
                ref var o = ref MemoryMarshal.GetReference(output);
                ref var d = ref Unsafe.Add(ref o, Order);
                int dataLength = output.Length - Order;
                ref var r = ref MemoryMarshal.GetReference(residual);
                Vector128<int> sum;
                var permShift = Vector256.Create(7, 0, 1, 2, 3, 4, 5, 6);
                var permReverse = Vector256.Create(7, 6, 5, 4, 3, 2, 1, 0);
                Vector256<int> <#=string.Join(", ", Enumerable.Range(0, Log2(maxVs)).Select(a=>$"sum{a}"))#>;
<#      
        var mvm1 = maxVs - 1;
        for(j = 0; j < orderO8; j++)
        {
#>
                var vcoeff<#=j#> = Unsafe.As<int, Vector256<int>>(ref Unsafe.Add(ref c, <#=j * 8#>));
<#
        }
        switch (orderM8){
            //use Sse2 for orders <4
            case 1:#>
                var vcoeff<#=mvm1#> = Vector256.Create(Vector128.CreateScalarUnsafe(Unsafe.Add(ref c, <#=item.Order - 1#>)), vzero);
<#              break;
            case 2:#>
                var vcoeff<#=mvm1#> = Vector256.Create(Vector128.CreateScalarUnsafe(Unsafe.As<int, ulong>(ref Unsafe.Add(ref c, <#=item.Order - 2#>))).AsInt32(), vzero);
<#              break;
            case 3:#>
                var vcoeff<#=mvm1#> = Vector256.Create(Sse2.ShiftRightLogical128BitLane(Unsafe.As<int, Vector128<int>>(ref Unsafe.Add(ref c, <#=item.Order - 4#>)), 4), vzero);
<#              break;
            case 4:#>
                var vcoeff<#=mvm1#> = Vector256.Create(Unsafe.As<int, Vector128<int>>(ref Unsafe.Add(ref c, <#=item.Order - 4#>)), vzero);
<#              break;
            case 5:#>
                var permLoadC = Vector256.Create(3,4,5,6,7,0,0,0);
                var vcoeff<#=mvm1#> = Avx2.Blend(Avx2.PermuteVar8x32(Unsafe.As<int, Vector256<int>>(ref Unsafe.Add(ref c, <#=item.Order - 8#>)), permLoadC), vzero256, 0b1110_0000);
<#              break;
            case 6:#>
                var permLoadC = Vector256.Create(2,3,4,5,6,7,0,0);
                var vcoeff<#=mvm1#> = Avx2.Blend(Avx2.PermuteVar8x32(Unsafe.As<int, Vector256<int>>(ref Unsafe.Add(ref c, <#=item.Order - 8#>)), permLoadC), vzero256, 0b1100_0000);
<#              break;
            case 7:#>
                var permLoadC = Vector256.Create(1,2,3,4,5,6,7,0);
                var vcoeff<#=mvm1#> = Avx2.Blend(Avx2.PermuteVar8x32(Unsafe.As<int, Vector256<int>>(ref Unsafe.Add(ref c, <#=item.Order - 8#>)), permLoadC), vzero256, 0b1000_0000);
<#              break;
            default:
                break;
        }
        int jmaxA2N_1 = item.Order - 7;
        int jmaxA2N_2 = item.Order - 8;
        for(j = 0; j < orderO8; j++)
        {
#>
                var vprev<#=j#> = Avx2.PermuteVar8x32(Unsafe.As<int, Vector256<int>>(ref Unsafe.Add(ref o, <#=item.Order - (j + 1) * 8#>)), permReverse);
<#
        }
        switch (orderM8){
            //use Sse2 for orders <4
            case 1:#>
                var vprev<#=mvm1#> = Vector256.Create(Sse2.Shuffle(Vector128.CreateScalarUnsafe((int)o), 0b11_11_11_00), vzero);
<#              break;
            case 2:#>
                var vprev<#=mvm1#> = Vector256.Create(Sse2.Shuffle(Vector128.CreateScalarUnsafe(Unsafe.As<int, ulong>(ref o)).AsInt32(), 0b11_01_00_01), vzero);
<#              break;
            case 3:#>
                var vprev<#=mvm1#> = Vector256.Create(Sse2.Shuffle(Unsafe.As<int, Vector128<int>>(ref o), 0b11_00_01_10), vzero);
<#              break;
            case 4:#>
                var vprev<#=mvm1#> = Vector256.Create(Sse2.Shuffle(Unsafe.As<int, Vector128<int>>(ref o), 0b00_01_10_11), vzero);
<#              break;
            case 5:#>
                var permLoad = Vector256.Create(4,3,2,1,0,7,7,7);
                var vprev<#=mvm1#> = Avx2.PermuteVar8x32(Unsafe.As<int, Vector256<int>>(ref o), permLoad);
<#              break;
            case 6:#>
                var permLoad = Vector256.Create(5,4,3,2,1,0,7,7);
                var vprev<#=mvm1#> = Avx2.PermuteVar8x32(Unsafe.As<int, Vector256<int>>(ref o), permLoad);
<#              break;
            case 7:#>
                var permLoad = Vector256.Create(6,5,4,3,2,1,0,7);
                var vprev<#=mvm1#> = Avx2.PermuteVar8x32(Unsafe.As<int, Vector256<int>>(ref o), permLoad);
<#              break;
            default:
                break;
        }#>
                for(nint i = 0; i < dataLength;)
                {
                    //Integer Pairwise Summation
<#      int p;
        Stack<(int order, int index)> tower = new();
        for(p = 0; p < maxVs; p++){
            var nind = tower.Count > 0 ? tower.Peek().index + 1 : 0;
        #>
                    sum<#=nind#> = Avx2.MultiplyLow(vcoeff<#=p#>, vprev<#=p#>);
<#
            tower.Push((0, nind));
            while(tower.Count > 1){
                var t1 = tower.Pop();
                if(tower.Peek().order == t1.order){
                    var t2 = tower.Pop();
                    tower.Push((t2.order + 1, t2.index));
#>
                    sum<#=t2.index#> = Avx2.Add(sum<#=t2.index#>, sum<#=t1.index#>);
<#              
                }else{
                    tower.Push(t1);
                    break;
                }
            }
        }
        while(tower.Count > 1){
            var t = tower.Pop();
            var t2 = tower.Pop();
            tower.Push((t2.order + 1, t2.index));
#>
                    sum<#=t2.index#> = Avx2.Add(sum<#=t.index#>, sum<#=t2.index#>);
<#
        }
        
#>
                    sum = Sse2.Add(sum0.GetUpper(), sum0.GetLower());
                    var sumx = Sse2.Shuffle(sum, 0xee);
                    sum = Sse2.Add(sum, sumx);
                    sumx = Sse2.Shuffle(sum, 0x55);
                    sum = Sse2.Add(sum, sumx);
                    var res = Vector128.CreateScalarUnsafe(Unsafe.Add(ref r, i));
                    sum = Sse2.ShiftRightArithmetic(sum, vshift);
                    var yy = Sse2.Add(sum, res);
                    Unsafe.Add(ref d, i) = yy.GetElement(0);
                    i++;
                    var yu = yy.ToVector256();
<#      for(int i = 0; i < maxVs; i++){#>
                    vprev<#=maxVs - i - 1#> = Avx2.PermuteVar8x32(vprev<#=maxVs - i - 1#>, permShift);
<#      }#>
<#      for(int i = 0; i < item.Order - 8; i += 8){#>
                    vprev<#=(jmax - i) / 8#> = Avx2.Blend(vprev<#=(jmax - i) / 8#>, vprev<#=(jmax - i) / 8 - 1#>, 0b0000_0001);
<#      }#>
                    vprev0 = Avx2.Blend(vprev0, yu, 0b0000_0001);
                }
            }

<#
    }
        {#>
            [MethodImpl(OptimizationUtils.InlineAndOptimizeIfPossible)]
            internal static bool <#=$"RestoreSignalOrder{item.Order}Wide"#>(int shiftsNeeded, ReadOnlySpan<int> residual, ReadOnlySpan<int> coeffs, Span<int> output)
            {
                if (Avx2.IsSupported<#=(TestSse41OverAvx2 ? " && !Sse41.IsSupported" : "")#>)
                {
                    <#=$"RestoreSignalOrder{item.Order}WideAvx2"#>(shiftsNeeded, residual, coeffs, output);
                    return true;
                }
                if (Sse41.IsSupported)
                {
                    <#=$"RestoreSignalOrder{item.Order}WideSse41"#>(shiftsNeeded, residual, coeffs, output);
                    return true;
                }
                return false;
            }

            [MethodImpl(OptimizationUtils.AggressiveOptimizationIfPossible)]
            internal static unsafe void <#=$"RestoreSignalOrder{item.Order}WideSse41"#>(int shiftsNeeded, ReadOnlySpan<int> residual, ReadOnlySpan<int> coeffs, Span<int> output)
            {
                const int Order = <#=item.Order#>;
                if(coeffs.Length < Order) return;
                _ = coeffs[Order - 1];
                var vshift = Vector128.CreateScalar((long)shiftsNeeded);
                ref var c = ref MemoryMarshal.GetReference(coeffs);
                ref var o = ref MemoryMarshal.GetReference(output);
                ref var d = ref Unsafe.Add(ref o, Order);
                int dataLength = output.Length - Order;
                ref var r = ref MemoryMarshal.GetReference(residual);
                Vector128<long> sum;
<#      
        for(j = 0; j < item.Order - 1; j+=2)
        {
#>
                var vcoeff<#=j / 2#> = Sse41.ConvertToVector128Int64(Vector128.CreateScalarUnsafe(Unsafe.As<int, ulong>(ref Unsafe.Add(ref c, <#=j#>))).AsUInt32()).AsInt32();
<#
        }
        if(j < item.Order)
        {#>
                var vcoeff<#=j / 2#> = Sse41.ConvertToVector128Int64(Vector128.CreateScalarUnsafe(Unsafe.Add(ref c, <#=j#>)).AsUInt32()).AsInt32();
<#      }
        for(j = 0; j < item.Order - 1; j+=2)
        {
#>
                var vprev<#=j / 2#> = Sse2.Shuffle(Vector128.CreateScalarUnsafe(Unsafe.As<int, ulong>(ref Unsafe.Add(ref o, <#=jmax2 - j#>))).AsInt32(), 0b11_00_11_01);
<#
        }
        if(j < item.Order)
        {#>
                var vprev<#=j / 2#> = Sse2.Shuffle(Vector128.CreateScalarUnsafe(Unsafe.As<int, ulong>(ref o)).AsInt32(), 0b11_00_11_00);
<#      }
#>
                for(nint i = 0; i < dataLength;)
                {
<#      for(int i = 0; i < item.Order; i += 2){#>
                    sum = <#=(i == 0 ? "" : "Sse2.Add(sum, ")#>Sse41.Multiply(vcoeff<#=i / 2#>, vprev<#=i / 2#>)<#=(i == 0 ? "" : ")")#>;
<#      }#>
                    sum = Sse2.Add(sum, Sse2.ShiftRightLogical128BitLane(sum, 8));
                    var res = Vector128.CreateScalar(Unsafe.Add(ref r, i));
                    sum = Sse2.ShiftRightLogical(sum, vshift);
                    var yy = Sse2.Add(sum.AsInt32(), res);
                    Unsafe.Add(ref d, i) = yy.GetElement(0);
                    i++;
                    yy = Sse2.ShiftLeftLogical128BitLane(yy, 8);
<#      for(int i = 0; i < item.Order - 2; i += 2){#>
                    vprev<#=(jmax - i) / 2#> = Ssse3.AlignRight(vprev<#=(jmax - i) / 2#>, vprev<#=(jmax - i) / 2 - 1#>, 8);
<#      }#>
                    vprev0 = Ssse3.AlignRight(vprev0, yy, 8);
                }
            }
            
            [MethodImpl(OptimizationUtils.AggressiveOptimizationIfPossible)]
            internal static unsafe void <#=$"RestoreSignalOrder{item.Order}WideAvx2"#>(int shiftsNeeded, ReadOnlySpan<int> residual, ReadOnlySpan<int> coeffs, Span<int> output)
            {
<#
    var orderFloor4 = item.Order / 4 * 4;
#>
                const int Order = <#=item.Order#>;
                if(coeffs.Length < Order) return;
                _ = coeffs[Order - 1];
                var vshift = Vector128.CreateScalar((long)shiftsNeeded);
<#  if(item.Order % 4 == 3){#>
                var mask = Vector128.Create(~0, ~0, ~0, 0);
<#  }#>
                ref var c = ref MemoryMarshal.GetReference(coeffs);
                ref var o = ref MemoryMarshal.GetReference(output);
                ref var d = ref Unsafe.Add(ref o, Order);
                int dataLength = output.Length - Order;
                ref var r = ref MemoryMarshal.GetReference(residual);
                Vector128<long> sum;
                Vector256<long> sum256;
<#      
        for(j = 0; j < item.Order - 3; j+=4)
        {
#>
                var vcoeff<#=j / 4#> = Avx2.ConvertToVector256Int64(Unsafe.As<int, Vector128<int>>(ref Unsafe.Add(ref c, <#=j#>)).AsUInt32()).AsInt32();
<#
        }
        switch(item.Order % 4){
            case 1:#>
                var vcoeff<#=j / 4#> = Avx2.ConvertToVector256Int64(Vector128.CreateScalarUnsafe((uint)Unsafe.Add(ref c, <#=j#>))).AsInt32();
<#              break;
            case 2:#>
                var vcoeff<#=j / 4#> = Avx2.ConvertToVector256Int64(Vector128.CreateScalarUnsafe(Unsafe.As<int, ulong>(ref Unsafe.Add(ref c, <#=j#>))).AsUInt32()).AsInt32();
<#              break;
            case 3:
                if(item.Order == 3){    //When order is 3, j-1 becomes -1!#>
#if !DEBUG      //<#=NegativeDebugFlagDescription#>
                var vcoeff0 = Avx2.ConvertToVector256Int64(Avx2.MaskLoad((int*)Unsafe.AsPointer(ref c), mask)).AsInt32();
#else
                var vcoeff0 = Avx2.ConvertToVector256Int64(Vector128.Create(c, Unsafe.Add(ref c, 1), Unsafe.Add(ref c, 2), 0).AsUInt32()).AsInt32();
#endif
<#              }else{#>
#if !DEBUG      //<#=NegativeDebugFlagDescription#>
                var vcoeff<#=j / 4#> = Avx2.ConvertToVector256Int64(Avx2.MaskLoad((int*)Unsafe.AsPointer(ref Unsafe.Add(ref c, <#=j#>)), mask)).AsInt32();
#else
                var vcoeff<#=j / 4#> = Avx2.ConvertToVector256Int64(Sse2.ShiftRightLogical128BitLane(Unsafe.As<int, Vector128<int>>(ref Unsafe.Add(ref c, <#=j - 1#>)), 4)).AsInt32();
#endif
<#              }
                break;
            default:
                break;
        }
        int jmaxA2_1 = item.Order - 3;
        int jmaxA2_2 = item.Order - 4;
        for(j = 0; j < item.Order - 3; j += 4)
        {
#>
                var vprev<#=j / 4#> = Avx2.ConvertToVector256Int64(Sse2.Shuffle(Unsafe.As<int, Vector128<int>>(ref Unsafe.Add(ref o, <#=jmaxA2_1 - j - 1#>)).AsUInt32(), 0b00_01_10_11).AsUInt32()).AsInt32();
<#
        }
        switch(item.Order % 4){
            case 1:#>
                var vprev<#=j / 4#> = Avx2.ConvertToVector256Int64(Sse2.Shuffle(Vector128.CreateScalarUnsafe((uint)o), 0b11_11_11_00).AsUInt32()).AsInt32();
<#              break;
            case 2:#>
                var vprev<#=j / 4#> = Avx2.ConvertToVector256Int64(Sse2.Shuffle(Vector128.CreateScalarUnsafe(Unsafe.As<int, ulong>(ref o)).AsUInt32(), 0b11_01_00_01).AsUInt32()).AsInt32();
<#              break;
            case 3:#>
#if !DEBUG      //<#=NegativeDebugFlagDescription#>
                var vprev<#=j / 4#> = Avx2.ConvertToVector256Int64(Sse2.Shuffle(Avx2.MaskLoad((int*)Unsafe.AsPointer(ref o), mask).AsInt32(), 0b11_00_01_10)).AsInt32();
#else
                var vprev<#=j / 4#> = Avx2.ConvertToVector256Int64(Sse2.Shuffle(Unsafe.As<int, Vector128<int>>(ref o), 0b11_00_01_10)).AsInt32();
#endif
<#              break;
            default:
                break;
        }
#>
                for(nint i = 0; i < dataLength;)
                {
                    var res = Vector128.CreateScalarUnsafe(Unsafe.Add(ref r, i));
<#      for(int i = 0; i < item.Order; i += 4){#>
                    sum256 = <#=(i == 0 ? "" : "Avx2.Add(sum256, ")#>Avx2.Multiply(vcoeff<#=i / 4#>, vprev<#=i / 4#>)<#=(i == 0 ? "" : ")")#>;
<#      }#>
                    sum = Sse2.Add(sum256.GetLower(), sum256.GetUpper());
                    sum = Sse2.Add(sum, Sse2.ShiftRightLogical128BitLane(sum, 8));
                    sum = Sse2.ShiftRightLogical(sum, vshift);
                    var yy = Sse2.Add(sum.AsInt32(), res);
                    Unsafe.Add(ref d, i) = yy.GetElement(0);
                    i++;
                    var yu = yy.ToVector256();
                    yu = Avx2.Permute4x64(yu.AsUInt64(), 0b00_00_00_00).AsInt32();
<#      for(int i = 0; i < item.Order; i += 4){#>
                    vprev<#=(jmax - i) / 4#> = Avx2.Permute4x64(vprev<#=(jmax - i) / 4#>.AsInt64(), 0b10_01_00_11).AsInt32();
<#      }#>
<#      for(int i = 0; i < item.Order - 4; i += 4){#>
                    vprev<#=(jmax - i) / 4#> = Avx2.Blend(vprev<#=(jmax - i) / 4#>, vprev<#=(jmax - i) / 4 - 1#>, 0b0000_0001);
<#      }#>
                    vprev0 = Avx2.Blend(vprev0, yu, 0b0000_0001);
                }
            }
#endregion Order<#=item.Order#>
<#      }
    } #>
        }
    }
}
#endif