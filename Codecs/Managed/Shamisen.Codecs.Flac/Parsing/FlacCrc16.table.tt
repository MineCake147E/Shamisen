<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="$(UserProfile)\.nuget\packages\system.memory\4.5.4\lib\netstandard2.0\System.Memory.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var table = new ushort[256];
    ushort CrcSquare(ushort value) => (ushort)(((byte)value << 8) ^ table[value >> 8]);
    ushort CrcPower(ushort value, uint power) => power switch {
        0 => value,
        1 => CrcSquare(value),
        _ => CrcSquare(CrcPower(value, power - 1))};
    ushort crc = 0x8000;
    for(int i = 1; i < 129; i <<= 1)
    {
        if ((crc & 0x8000) > 0)
        {
            crc <<= 1;
            crc ^= (ushort)0x8005;  //fixed polynomial
        }
        else crc <<= 1;
        for (int j = 0; j < i; j ++)
        {
            table[i ^ j] = (ushort)(crc ^ table[j]);
        }
    }

#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Shamisen.Codecs.Flac.Parsing
{
    /// <summary>
    /// Calculates a CRC16 for FLAC stream.
    /// </summary>
    public partial struct FlacCrc16
    {
<#//Generating 8 tables for using same algorithm as libFLAC.
    for(uint p = 0; p < 8; p++){#>

        private static ReadOnlySpan<byte> Table<#=p#> => new byte[512] {
        <#
        int h = 0;
        foreach(var item in table){
            if(h == 0) Write("\t");
            var value = CrcPower(item, p);
            Write($"0x{(byte)value:X2},");
            Write($"0x{(byte)(value >> 8):X2},");
            if(h++ == 15)
            {
                h = 0;
                Write("\r\n\t\t");
            }
        }
        Write("};\r\n");
    }
    #>
        <#//Generating 8 tables for using same algorithm as libFLAC.
    for(uint p = 0; p < 8; p++){#>

        [MethodImpl(OptimizationUtils.InlineAndOptimizeIfPossible)]
        private static ushort GetTable<#=p#>At(int index) => BinaryExtensions.ConvertToLittleEndian(Unsafe.Add(ref Unsafe.As<byte, ushort>(ref MemoryMarshal.GetReference(Table<#=p#>)), (byte)index));
<#}#>
    }
}
