<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="$(UserProfile)\.nuget\packages\system.memory\4.5.4\lib\netstandard2.0\System.Memory.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var table = new byte[256];
    byte CrcSquare(byte value) => (byte)(((byte)value << 8) ^ table[value >> 8]);
    byte CrcPower(byte value, uint power) => power switch {
            0 => value,
            1 => CrcSquare(value),
            _ => CrcSquare(CrcPower(value, power - 1))};
    byte crc = 0x80;
    for(int i = 1; i < 129; i <<= 1)
    {
        if ((crc & 0x80) > 0)
        {
            crc <<= 1;
            crc ^= (byte)0x07;  //fixed polynomial
        }
        else crc <<= 1;
        for (int j = 0; j < i; j ++)
        {
            table[i ^ j] = (byte)(crc ^ table[j]);
        }
    }

#>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
// <auto-generated />
#region License
/*
 * Ported to C#.
 *
 * libFLAC - Free Lossless Audio Codec library
 * Copyright (C) 2000-2009  Josh Coalson
 * Copyright (C) 2011-2018  Xiph.Org Foundation
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * - Neither the name of the Xiph.org Foundation nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#endregion
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Shamisen.Codecs.Flac.Parsing
{
    /// <summary>
    /// Calculates a CRC8 for FLAC stream.
    /// </summary>
    public partial struct FlacCrc8
    {
        private static ReadOnlySpan<byte> Table => new byte[256] {
        <#
        int h = 0;
        foreach(var item in table){
            if(h == 0) Write("\t");
            Write($"0x{item:X2},");
            if(h++ == 15)
            {
                h = 0;
                Write("\r\n\t\t");
            }
        }
        Write("};\r\n");
    #>
        [MethodImpl(OptimizationUtils.InlineAndOptimizeIfPossible)]
        private static byte GetTableAt(int index) => Unsafe.Add(ref MemoryMarshal.GetReference(Table), (byte)index);
    }
}

