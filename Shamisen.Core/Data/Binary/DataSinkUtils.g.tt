<#@ template debug = "false" hostspecific = "false" language = "C#"#>
<#@ assembly name = "System.Core"#>
<#@ import namespace = "System.Linq"#>
<#@ import namespace = "System.Text"#>
<#@ import namespace = "System.Collections.Generic"#>
<#@ output extension = ".cs"#>
<#    var types = new [] {("ushort", "UInt16"),("short", "Int16"),("uint", "UInt32"),("int", "Int32"),("ulong", "UInt64"),("long", "Int64"), };#>
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Buffers.Binary;
namespace Shamisen.Data
{
    /// <summary>
    /// Contains some utility functions for <see cref="IDataSink{TSample}"/>.
    /// </summary>
    public static partial class DataSinkUtils
    {
<#foreach ((var friendly, var full) in types) {#>
        /// <summary>
        /// Writes the <see cref="<#=friendly #>"/> value to the specified <paramref name="sink"/> with little endian.
        /// </summary>
        /// <param name="sink">The sink to write to.</param>
        /// <param name="value">The value to write.</param>
        public static void Write<#=full #>LittleEndian(this IDataSink<byte> sink, <#=friendly #> value)
        {
            unsafe
            {
                <#=friendly #> cval = BinaryExtensions.ConvertToLittleEndian(value);
                Span<byte> span = new Span<byte>(&cval, sizeof(<#=friendly #>));
                sink.Write(span);
            }
        }
        /// <summary>
        /// Writes the <see cref="<#=friendly #>"/> value to the specified <paramref name="sink"/> with BIG endian.
        /// </summary>
        /// <param name="sink">The sink to write to.</param>
        /// <param name="value">The value to write.</param>
        public static void Write<#=full #>BigEndian(this IDataSink<byte> sink, <#=friendly #> value)
        {
            unsafe
            {
                <#=friendly #> cval = BinaryExtensions.ConvertToBigEndian(value);
                Span<byte> span = new Span<byte>(&cval, sizeof(<#=friendly #>));
                sink.Write(span);
            }
        }
<#}#>
    }
}
