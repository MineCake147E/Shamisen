<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="$(UserProfile)\.nuget\packages\system.memory\4.5.4\lib\netstandard2.0\System.Memory.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Buffers.Binary" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var regex = new Regex("^\"((?:(?<=\\\\)\"|[^\"])*)\",\\s*\"([^\"]*)\",\\s*\"([^\"]*)\",\\s*\"([^\"]*)\",", RegexOptions.Compiled);
var text = File.ReadAllText(this.Host.ResolvePath("..\\CodeGeneration\\PcmSampleFormats.csv"));
var lines = text.Split('\n').Where(a=>!string.IsNullOrWhiteSpace(a));
var parsedCsv = lines.Skip(1).Select(a=>regex.Match(a).Groups.OfType<Group>().Skip(1).Select(j => j.Value).ToArray());
IEnumerable<(string summary, string typeName, string sample, int bitDepth)> types = parsedCsv.Select(a => (a[0], a[1], a[2], int.Parse(a[3])));
#>
#nullable enable
// <auto-generated />
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;

namespace Shamisen
{
<# foreach(var item in types){#>

    /// <summary>
    /// <#=item.summary#>
    /// </summary>
    public readonly struct <#=item.typeName#> : IInterleavedAudioFormat<<#=item.sample#>>, IEquatable<<#=item.typeName#>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#=item.typeName#>"/> struct.
        /// </summary>
        /// <param name="channels">The channels.</param>
        /// <param name="sampleRate">The sample rate.</param>
        public <#=item.typeName#>(int channels, int sampleRate)
        {
            Channels = channels;
            SampleRate = sampleRate;
        }

        /// <summary>
        /// Gets the number of channels.
        /// It does not describe how these loudspeakers of each channels are placed in the room.
        /// </summary>
        /// <value>
        /// The number of channels.
        /// </value>
        public int Channels { get; }

        /// <summary>
        /// Gets the number indicates how many times the audio signal is sampled.
        /// </summary>
        /// <value>
        /// The sample rate.
        /// </value>
        public int SampleRate { get; }

        /// <summary>
        /// Gets the number indicates how many bits are consumed per every single 1-channel sample.
        /// Does not depend on the number of <see cref="Channels"/>.
        /// </summary>
        /// <value>
        /// The bit depth.
        /// </value>
        public int BitDepth => <#=item.bitDepth#>;

        /// <summary>
        /// Gets the value indicates how many <see cref="<#=item.sample#>"/> values are required per whole frame.<br/>
        /// It depends on <see cref="IAudioFormat{TSample}.Channels"/>.
        /// </summary>
        /// <value>
        /// The size of block.
        /// </value>
        public int BlockSize {
            [MethodImpl(MethodImplOptions.AggressiveInlining)] get => Channels; }

        /// <summary>
        /// Gets the value indicates how many <see cref="<#=item.sample#>"/>s are required per 1-channel sample.<br/>
        /// Does not depend on the number of <see cref="Channels"/>.<br/>
        /// </summary>
        /// <value>
        /// The size of a frame in <see cref="<#=item.sample#>"/>s.
        /// </value>
        public int SampleSize {
            [MethodImpl(MethodImplOptions.AggressiveInlining)] get => 1; }

        /// <summary>Indicates whether the current object is equal to another object of the same type.</summary>
        /// <param name="obj">An object to compare with this object.</param>
        /// <returns>
        ///   <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        public override bool Equals(object? obj)
        {
            return obj is <#=item.typeName#> format && Equals(format);
        }

        /// <summary>Indicates whether the current object is equal to another object of the same type.</summary>
        /// <param name="other">An object to compare with this object.</param>
        /// <returns>
        ///   <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        public bool Equals(<#=item.typeName#> other)
        {
            return Channels == other.Channels &&
                SampleRate == other.SampleRate;
        }

        /// <summary>Indicates whether the current object is equal to another object of the same type.</summary>
        /// <param name="other">An object to compare with this object.</param>
        /// <returns>
        ///   <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        public bool Equals(IAudioFormat<<#=item.sample#>>? other)
        {
            return !(other is null) && other.BitDepth == BitDepth && other.Channels == Channels && other.SampleRate == SampleRate;
        }

        /// <summary>Returns a hash code for this instance.</summary>
        /// <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode() => HashCode.Combine(Channels, SampleRate);


        /// <summary>
        /// Indicates whether the values of two specified <see cref="<#=item.typeName#>"/> objects are equal.
        /// </summary>
        /// <param name="left">The first <see cref="<#=item.typeName#>"/> to compare.</param>
        /// <param name="right">The second <see cref="<#=item.typeName#>"/> to compare.</param>
        /// <returns>
        ///   <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
        /// </returns>
        public static bool operator ==(<#=item.typeName#> left, <#=item.typeName#> right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Indicates whether the values of two specified <see cref="<#=item.typeName#>"/> objects are different.
        /// </summary>
        /// <param name="left">The first <see cref="<#=item.typeName#>"/> to compare.</param>
        /// <param name="right">The second <see cref="<#=item.typeName#>"/> to compare.</param>
        /// <returns>
        ///   <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
        /// </returns>
        public static bool operator !=(<#=item.typeName#> left, <#=item.typeName#> right)
        {
            return !(left == right);
        }
    }

<#}#>
}
