<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Shamisen.Core</name>
    </assembly>
    <members>
        <member name="T:Shamisen.AudioEncoding">
            <summary>
            Defines known encoding types.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Unknown">
            <summary>
            Unknown format
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.LinearPcm">
            <summary>
            Microsoft PCM Format
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.MsAdpcm">
            <summary>
            Microsoft ADPCM Format
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.IeeeFloat">
            <summary>
            IEEE 754 Single Precision Floating-Point Number
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Vselp">
            <summary>
            Vector sum excited linear prediction Compaq Computer Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.IbmCvsd">
            <summary>
            IBM Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Alaw">
            <summary>
            A-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Mulaw">
            <summary>
            Î¼-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.OkiAdpcm">
            <summary>
            OKI ADPCM
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.ImaAdpcm">
            <summary>
            Intel Corporation ADPCM
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.MediaspaceAdpcm">
            <summary>
            Videologic ADPCM
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.SierraAdpcm">
            <summary>
            Sierra Semiconductor Corp
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.G723Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Digistd">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Digifix">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.DialogicOkiAdpcm">
            <summary>
            Dialogic Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.MediavisionAdpcm">
            <summary>
            Media Vision, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.CuCodec">
            <summary>
            Hewlett-Packard Company
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.YamahaAdpcm">
            <summary>
            Yamaha Corporation of America
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Sonarc">
            <summary>
            Speech Compression
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.DspgroupTruespeech">
            <summary>
            DSP Group, Inc
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Echosc1">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.AudiofileAf36">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Aptx">
            <summary>
            Audio Processing Technology
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.AudiofileAf10">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Prosody1612">
            <summary>
            Aculab plc
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Lrc">
            <summary>
            Merging Technologies S.A.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.DolbyAc2">
            <summary>
            Dolby Laboratories
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Gsm610">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Msnaudio">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.AntexAdpcme">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.ControlResVqlpc">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Digireal">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Digiadpcm">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.ControlResCr10">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.NmsVbxadpcm">
            <summary>
            Natural MicroSystems
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.RolandRdac">
            <summary>
            Roland
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Echosc3">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.RockwellAdpcm">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.RockwellDigitalk">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Xebec">
            <summary>
            Xebec Multimedia Solutions Limited
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.G721Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.G728Celp">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Msg723">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Mpeg">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Rt24">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Pac">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Mpeglayer3">
            <summary>
            MPEG 3 Layer 1
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.LucentG723">
            <summary>
            Lucent Technologies
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Cirrus">
            <summary>
            Cirrus Logic
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Espcm">
            <summary>
            ESS Technology
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Voxware">
            <summary>
            Voxware Inc
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.CanopusAtrac">
            <summary>
            Canopus, Co., Ltd.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.G726Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.G722Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Dsat">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.DsatDisplay">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareByteAligned">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareAc8">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareAc10">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareAc16">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareAc20">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareRt24">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareRt29">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareRt29hw">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareVr12">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareVr18">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxwareTq40">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Softsound">
            <summary>
            Softsound, Ltd.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VoxareTq60">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Msrt24">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.G729a">
            <summary>
            AT&amp;T Laboratories
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.MviMv12">
            <summary>
            Motion Pixels
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.DfG726">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.DfGsm610">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Onlive">
            <summary>
            OnLive! Technologies, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Sbc24">
            <summary>
            Siemens Business Communications Systems
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.DolbyAc3Spdif">
            <summary>
            Sonic Foundry
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.ZyxelAdpcm">
            <summary>
            ZyXEL Communications, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.PhilipsLpcbb">
            <summary>
            Philips Speech Processing
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Packed">
            <summary>
            Studer Professional Audio AG
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.RhetorexAdpcm">
            <summary>
            Rhetorex, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.IbmMulaw">
            <summary>
            IBM mu-law format
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.IbmAlaw">
            <summary>
            IBM a-law format
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Adpcm">
            <summary>
            IBM AVC Adaptive Differential PCM format
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VivoG723">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VivoSiren">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.DigitalG723">
            <summary>
            Digital Equipment Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.CreativeAdpcm">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.CreativeFastspeech8">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.CreativeFastspeech10">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Quarterdeck">
            <summary>
            Quarterdeck Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.FmTownsSnd">
            <summary>
            Fujitsu Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.BzvDigital">
            <summary>
            Brooktree Corporation
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.VmeVmpcm">
            <summary>
            AT&amp;T Labs, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Oligsm">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Oliadpcm">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Olicelp">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Olisbc">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Oliopr">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.LhCodec">
            <summary>
            Lernout &amp; Hauspie
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Norris">
            <summary>
            Norris Communications, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.SoundspaceMusicompress">
            <summary>
            AT&amp;T Labs, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Dvm">
            <summary>
            FAST Multimedia AG
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.InterwavVsc112">
            <summary>
            ?????
            </summary>
        </member>
        <member name="F:Shamisen.AudioEncoding.Extensible">
             <summary>
            
             </summary>
        </member>
        <member name="T:Shamisen.AudioEncodingAttribute">
            <summary>
            Specifies the properties of audio encoding format.
            </summary>
        </member>
        <member name="T:Shamisen.BitDepthAttribute">
            <summary>
            Specifies the Bit Depth of an audio encoding format.
            </summary>
        </member>
        <member name="T:Shamisen.FixedBitDepthAttribute">
            <summary>
            Specifies the audio encoding format supports only fixed bit depth.
            </summary>
        </member>
        <member name="M:Shamisen.FixedBitDepthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.FixedBitDepthAttribute"/> class.
            </summary>
        </member>
        <member name="T:Shamisen.AudioMemory`2">
            <summary>
            Represents an audio buffer.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="M:Shamisen.AudioMemory`2.#ctor(`1,System.Memory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.AudioMemory`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="memory">The memory.</param>
        </member>
        <member name="P:Shamisen.AudioMemory`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.AudioMemory`2.Length">
            <summary>
            Gets the length of this <see cref="T:Shamisen.AudioMemory`2"/> in samples.
            </summary>
            <value>
            The length of this buffer.
            </value>
        </member>
        <member name="P:Shamisen.AudioMemory`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.AudioMemory`2.Memory">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="P:Shamisen.AudioMemory`2.Span">
            <summary>
            Gets the span.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="M:Shamisen.AudioMemory`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current memory starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <param name="length">The desired length in samples for the slice.</param>
            <returns>A memory that consists of <paramref name="length"/> elements from the current memory starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:Shamisen.AudioMemory`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current memory that begins at a specified index.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <returns>
            A memory that consists of all elements of the current memory from <paramref name="start"/> to the end of the memory.
            </returns>
        </member>
        <member name="M:Shamisen.AudioMemory`2.CopyTo(Shamisen.AudioMemory{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:Shamisen.AudioMemory`2"/> into a destination <see cref="T:Shamisen.AudioMemory`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Shamisen.AudioMemory`2.TryCopyTo(Shamisen.AudioMemory{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:Shamisen.AudioMemory`2"/> to a destination <see cref="T:Shamisen.AudioMemory`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:Shamisen.AudioMemory`2.Empty">
            <summary>
            Returns an empty <see cref="T:Shamisen.AudioMemory`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:Shamisen.AudioMemory`2"/> object.
            </value>
        </member>
        <member name="M:Shamisen.AudioMemory`2.op_Implicit(Shamisen.AudioMemory{`0,`1})~Shamisen.ReadOnlyAudioMemory{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.AudioMemory`2"/> to <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/>.
            </summary>
            <param name="memory">The memory.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.AudioMemory`2.op_Inequality(Shamisen.AudioMemory{`0,`1},Shamisen.AudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.AudioMemory`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.AudioMemory`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.AudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.AudioMemory`2.op_Equality(Shamisen.AudioMemory{`0,`1},Shamisen.AudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.AudioMemory`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.AudioMemory`2"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.AudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.AudioMemory`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.AudioMemory`2.Equals(Shamisen.AudioMemory{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="memory">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the memory parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.AudioMemory`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:Shamisen.AudioSpan`2">
            <summary>
            Provides a type-, memory-, and format-safe representation of a contiguous region of arbitrary memory that contains audio data.
            </summary>
            <typeparam name="TSample">The type of audio sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:Shamisen.AudioSpan`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.AudioSpan`2.Span">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:Shamisen.AudioSpan`2.Length">
            <summary>
            Gets the length of this <see cref="T:Shamisen.AudioSpan`2"/>.
            </summary>
            <value>
            The length of this span.
            </value>
        </member>
        <member name="P:Shamisen.AudioSpan`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.AudioSpan`2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/> in the <see cref="T:Shamisen.AudioSpan`2"/>.
            </summary>
            <value>
            The reference to the element.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.AudioSpan`2.#ctor(`1,System.Span{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.AudioSpan`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.AudioSpan`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current span starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <param name="length">The desired length in samples for the slice.</param>
            <returns>A span that consists of <paramref name="length"/> elements from the current span starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:Shamisen.AudioSpan`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current span that begins at a specified index.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <returns>
            A span that consists of all elements of the current span from <paramref name="start"/> to the end of the span.
            </returns>
        </member>
        <member name="M:Shamisen.AudioSpan`2.CopyTo(Shamisen.AudioSpan{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:Shamisen.AudioSpan`2"/> into a destination <see cref="T:Shamisen.AudioSpan`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Shamisen.AudioSpan`2.TryCopyTo(Shamisen.AudioSpan{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:Shamisen.AudioSpan`2"/> to a destination <see cref="T:Shamisen.AudioSpan`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Shamisen.AudioSpan`2.Fill(`0)">
            <summary>
            Fills the elements of this span with a specified value.
            </summary>
            <param name="value">The value to assign to each element of the span.</param>
        </member>
        <member name="M:Shamisen.AudioSpan`2.Clear">
            <summary>
            Clears the contents of this <see cref="T:Shamisen.AudioSpan`2"/> object.
            </summary>
        </member>
        <member name="P:Shamisen.AudioSpan`2.Empty">
            <summary>
            Returns an empty <see cref="T:Shamisen.AudioSpan`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:Shamisen.AudioSpan`2"/> object.
            </value>
        </member>
        <member name="M:Shamisen.AudioSpan`2.op_Implicit(Shamisen.AudioSpan{`0,`1})~Shamisen.ReadOnlyAudioSpan{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.AudioSpan`2"/> to <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/>.
            </summary>
            <param name="span">The span.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.AudioSpan`2.op_Inequality(Shamisen.AudioSpan{`0,`1},Shamisen.AudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.AudioSpan`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.AudioSpan`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.AudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.AudioSpan`2.op_Equality(Shamisen.AudioSpan{`0,`1},Shamisen.AudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.AudioSpan`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.AudioSpan`2"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.AudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.AudioSpan`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.AudioSpan`2.Equals(Shamisen.AudioSpan{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="span">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the span parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.AudioSpan`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:Shamisen.InterleavedAudioMemory`2">
            <summary>
            Represents a contiguous region of channel-interleaved memory that contains audio data.
            </summary>
        </member>
        <member name="P:Shamisen.InterleavedAudioMemory`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.InterleavedAudioMemory`2.Memory">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="P:Shamisen.InterleavedAudioMemory`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.InterleavedAudioMemory`2.SampleLength">
            <summary>
            Gets the length of this <see cref="T:Shamisen.InterleavedAudioMemory`2"/> in samples.
            </summary>
            <value>
            The length of this memory in samples.
            </value>
        </member>
        <member name="P:Shamisen.InterleavedAudioMemory`2.Length">
            <summary>
            Gets the length of this <see cref="T:Shamisen.InterleavedAudioMemory`2"/> in frames.
            </summary>
            <value>
            The length of this memory in frames.
            </value>
        </member>
        <member name="P:Shamisen.InterleavedAudioMemory`2.Item(System.Int32)">
            <summary>
            Gets the frame at the specified <paramref name="frame"/> in the <see cref="T:Shamisen.InterleavedAudioMemory`2"/>.
            </summary>
            <value>
            The memory to the frame.
            </value>
            <param name="frame">The index of frame.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.#ctor(`1,System.Memory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.InterleavedAudioMemory`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="memory">The memory.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="memory"/> must be aligned with <paramref name="format"/>'s <see cref="P:Shamisen.IInterleavedAudioFormat`1.BlockSize"/>!</exception>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current memory starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <param name="length">The desired length in frame for the slice.</param>
            <returns>A memory that consists of <paramref name="length"/> elements from the current memory starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current memory that begins at a specified index.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <returns>
            A memory that consists of all elements of the current memory from <paramref name="start"/> to the end of the memory.
            </returns>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.CopyTo(Shamisen.InterleavedAudioMemory{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:Shamisen.InterleavedAudioMemory`2"/> into a destination <see cref="T:Shamisen.InterleavedAudioMemory`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.TryCopyTo(Shamisen.InterleavedAudioMemory{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:Shamisen.InterleavedAudioMemory`2"/> to a destination <see cref="T:Shamisen.InterleavedAudioMemory`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:Shamisen.InterleavedAudioMemory`2.Empty">
            <summary>
            Returns an empty <see cref="T:Shamisen.InterleavedAudioMemory`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:Shamisen.InterleavedAudioMemory`2"/> object.
            </value>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.op_Implicit(Shamisen.InterleavedAudioMemory{`0,`1})~Shamisen.ReadOnlyInterleavedAudioMemory{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.InterleavedAudioMemory`2"/> to <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/>.
            </summary>
            <param name="memory">The memory.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.op_Implicit(Shamisen.AudioMemory{`0,`1})~Shamisen.InterleavedAudioMemory{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.AudioMemory`2"/> to <see cref="T:Shamisen.InterleavedAudioMemory`2"/>.
            </summary>
            <param name="memory">The memory.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.op_Inequality(Shamisen.InterleavedAudioMemory{`0,`1},Shamisen.InterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.InterleavedAudioMemory`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.InterleavedAudioMemory`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.InterleavedAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.op_Equality(Shamisen.InterleavedAudioMemory{`0,`1},Shamisen.InterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.InterleavedAudioMemory`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.InterleavedAudioMemory`2"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.InterleavedAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.Equals(Shamisen.InterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="memory">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the memory parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.InterleavedAudioMemory`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:Shamisen.Buffers.InterleavedAudioSpan`2">
            <summary>
            Provides a type-, memory-, and format-safe representation of a contiguous region of channel-interleaved memory that contains audio data.
            </summary>
            <typeparam name="TSample">The type of audio sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:Shamisen.Buffers.InterleavedAudioSpan`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Buffers.InterleavedAudioSpan`2.Span">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:Shamisen.Buffers.InterleavedAudioSpan`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Buffers.InterleavedAudioSpan`2.SampleLength">
            <summary>
            Gets the length of this <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> in samples.
            </summary>
            <value>
            The length of this span in samples.
            </value>
        </member>
        <member name="P:Shamisen.Buffers.InterleavedAudioSpan`2.Length">
            <summary>
            Gets the length of this <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> in frames.
            </summary>
            <value>
            The length of this span in frames.
            </value>
        </member>
        <member name="P:Shamisen.Buffers.InterleavedAudioSpan`2.Item(System.Int32)">
            <summary>
            Gets the frame at the specified <paramref name="frame"/> in the <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/>.
            </summary>
            <value>
            The span to the frame.
            </value>
            <param name="frame">The index of frame.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.#ctor(`1,System.Span{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="span">The span.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="span"/> must be aligned with <paramref name="format"/>'s <see cref="P:Shamisen.IInterleavedAudioFormat`1.BlockSize"/>!</exception>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current span starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <param name="length">The desired length in frame for the slice.</param>
            <returns>A span that consists of <paramref name="length"/> elements from the current span starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current span that begins at a specified index.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <returns>
            A span that consists of all elements of the current span from <paramref name="start"/> to the end of the span.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.CopyTo(Shamisen.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> into a destination <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.TryCopyTo(Shamisen.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> to a destination <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.Fill(`0)">
            <summary>
            Fills the elements of this span with a specified value.
            </summary>
            <param name="value">The value to assign to each element of the span.</param>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.Clear">
            <summary>
            Clears the contents of this <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> object.
            </summary>
        </member>
        <member name="P:Shamisen.Buffers.InterleavedAudioSpan`2.Empty">
            <summary>
            Returns an empty <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> object.
            </value>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.op_Implicit(Shamisen.Buffers.InterleavedAudioSpan{`0,`1})~Shamisen.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> to <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/>.
            </summary>
            <param name="span">The span.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.op_Implicit(Shamisen.AudioSpan{`0,`1})~Shamisen.Buffers.InterleavedAudioSpan{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.AudioSpan`2"/> to <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/>.
            </summary>
            <param name="span">The span.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.op_Inequality(Shamisen.Buffers.InterleavedAudioSpan{`0,`1},Shamisen.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.op_Equality(Shamisen.Buffers.InterleavedAudioSpan{`0,`1},Shamisen.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.Equals(Shamisen.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="span">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the span parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.InterleavedAudioSpan`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2">
            <summary>
            Provides a read-only type-, memory-, and format-safe representation of a contiguous region of channel-interleaved memory that contains audio data.
            </summary>
            <typeparam name="TSample">The type of audio sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.Span">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.SampleLength">
            <summary>
            Gets the length of this <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> in samples.
            </summary>
            <value>
            The length of this span in samples.
            </value>
        </member>
        <member name="P:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.Length">
            <summary>
            Gets the length of this <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> in frames.
            </summary>
            <value>
            The length of this span in frames.
            </value>
        </member>
        <member name="P:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.Item(System.Int32)">
            <summary>
            Gets the frame at the specified <paramref name="frame"/> in the <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/>.
            </summary>
            <value>
            The span to the frame.
            </value>
            <param name="frame">The index of frame.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.#ctor(`1,System.ReadOnlySpan{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="span">The span.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="span"/> must be aligned with <paramref name="format"/>'s <see cref="P:Shamisen.IInterleavedAudioFormat`1.BlockSize"/>!</exception>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current span starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <param name="length">The desired length in frame for the slice.</param>
            <returns>A span that consists of <paramref name="length"/> elements from the current span starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current span that begins at a specified index.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <returns>
            A span that consists of all elements of the current span from <paramref name="start"/> to the end of the span.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.CopyTo(Shamisen.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> into a destination <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.TryCopyTo(Shamisen.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> to a destination <see cref="T:Shamisen.Buffers.InterleavedAudioSpan`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.Empty">
            <summary>
            Returns an empty <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> object.
            </value>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.op_Implicit(Shamisen.ReadOnlyAudioSpan{`0,`1})~Shamisen.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> to <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/>.
            </summary>
            <param name="span">The span.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.op_Inequality(Shamisen.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1},Shamisen.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.op_Equality(Shamisen.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1},Shamisen.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.Equals(Shamisen.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="span">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the span parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Buffers.ReadOnlyInterleavedAudioSpan`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:Shamisen.ReadOnlyAudioMemory`2">
            <summary>
            Represents a read-only audio buffer.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioMemory`2.#ctor(`1,System.ReadOnlyMemory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="memory">The memory.</param>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioMemory`2.Item(System.Int32)">
            <summary>
            Gets the element at the specified <paramref name="index"/> in the <see cref="T:Shamisen.AudioMemory`2"/>.
            </summary>
            <value>
            The element.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioMemory`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioMemory`2.Length">
            <summary>
            Gets the length of this <see cref="T:Shamisen.AudioMemory`2"/>.
            </summary>
            <value>
            The length of this buffer.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioMemory`2.Memory">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioMemory`2.Span">
            <summary>
            Gets the span.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioMemory`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioMemory`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current memory starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <param name="length">The desired length in samples for the slice.</param>
            <returns>A memory that consists of <paramref name="length"/> elements from the current memory starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioMemory`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current memory that begins at a specified index.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <returns>
            A memory that consists of all elements of the current memory from <paramref name="start"/> to the end of the memory.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioMemory`2.CopyTo(Shamisen.AudioMemory{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> into a destination <see cref="T:Shamisen.AudioMemory`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioMemory`2.TryCopyTo(Shamisen.AudioMemory{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> to a destination <see cref="T:Shamisen.AudioMemory`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioMemory`2.Empty">
            <summary>
            Returns an empty <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> object.
            </value>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioMemory`2.op_Inequality(Shamisen.ReadOnlyAudioMemory{`0,`1},Shamisen.ReadOnlyAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioMemory`2.op_Equality(Shamisen.ReadOnlyAudioMemory{`0,`1},Shamisen.ReadOnlyAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioMemory`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioMemory`2.Equals(Shamisen.ReadOnlyAudioMemory{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="memory">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the memory parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioMemory`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:Shamisen.ReadOnlyAudioSpan`2">
            <summary>
            Provides a read-only type-, memory-, and format-safe representation of a contiguous region of arbitrary memory that contains audio data.
            </summary>
            <typeparam name="TSample">The type of audio sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioSpan`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioSpan`2.Span">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioSpan`2.Length">
            <summary>
            Gets the length of this <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/>.
            </summary>
            <value>
            The length of this span.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioSpan`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioSpan`2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/> in the <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/>.
            </summary>
            <value>
            The reference to the element.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioSpan`2.#ctor(`1,System.ReadOnlySpan{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioSpan`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current span starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <param name="length">The desired length in samples for the slice.</param>
            <returns>A span that consists of <paramref name="length"/> elements from the current span starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioSpan`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current span that begins at a specified index.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <returns>
            A span that consists of all elements of the current span from <paramref name="start"/> to the end of the span.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioSpan`2.CopyTo(Shamisen.AudioSpan{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> into a destination <see cref="T:Shamisen.AudioSpan`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioSpan`2.TryCopyTo(Shamisen.AudioSpan{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> to a destination <see cref="T:Shamisen.AudioSpan`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:Shamisen.ReadOnlyAudioSpan`2.Empty">
            <summary>
            Returns an empty <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> object.
            </value>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioSpan`2.op_Inequality(Shamisen.ReadOnlyAudioSpan{`0,`1},Shamisen.ReadOnlyAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioSpan`2.op_Equality(Shamisen.ReadOnlyAudioSpan{`0,`1},Shamisen.ReadOnlyAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.ReadOnlyAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioSpan`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioSpan`2.Equals(Shamisen.ReadOnlyAudioSpan{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="span">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the span parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyAudioSpan`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:Shamisen.ReadOnlyInterleavedAudioMemory`2">
            <summary>
            Provides a read-only type-, memory-, and format-safe representation of a contiguous region of channel-interleaved memory that contains audio data.
            </summary>
            <typeparam name="TSample">The type of audio sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:Shamisen.ReadOnlyInterleavedAudioMemory`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyInterleavedAudioMemory`2.Memory">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyInterleavedAudioMemory`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyInterleavedAudioMemory`2.SampleLength">
            <summary>
            Gets the length of this <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> in samples.
            </summary>
            <value>
            The length of this memory in samples.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyInterleavedAudioMemory`2.Length">
            <summary>
            Gets the length of this <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> in frames.
            </summary>
            <value>
            The length of this memory in frames.
            </value>
        </member>
        <member name="P:Shamisen.ReadOnlyInterleavedAudioMemory`2.Item(System.Int32)">
            <summary>
            Gets the frame at the specified <paramref name="frame"/> in the <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/>.
            </summary>
            <value>
            The memory to the frame.
            </value>
            <param name="frame">The index of frame.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.#ctor(`1,System.ReadOnlyMemory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="memory">The memory.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="memory"/> must be aligned with <paramref name="format"/>'s <see cref="P:Shamisen.IInterleavedAudioFormat`1.BlockSize"/>!</exception>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current memory starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <param name="length">The desired length in frame for the slice.</param>
            <returns>A memory that consists of <paramref name="length"/> elements from the current memory starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current memory that begins at a specified index.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <returns>
            A memory that consists of all elements of the current memory from <paramref name="start"/> to the end of the memory.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.CopyTo(Shamisen.InterleavedAudioMemory{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> into a destination <see cref="T:Shamisen.InterleavedAudioMemory`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.TryCopyTo(Shamisen.InterleavedAudioMemory{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> to a destination <see cref="T:Shamisen.InterleavedAudioMemory`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:Shamisen.ReadOnlyInterleavedAudioMemory`2.Empty">
            <summary>
            Returns an empty <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> object.
            </value>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.op_Implicit(Shamisen.ReadOnlyAudioMemory{`0,`1})~Shamisen.ReadOnlyInterleavedAudioMemory{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:Shamisen.ReadOnlyAudioMemory`2"/> to <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/>.
            </summary>
            <param name="memory">The memory.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.op_Inequality(Shamisen.ReadOnlyInterleavedAudioMemory{`0,`1},Shamisen.ReadOnlyInterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.op_Equality(Shamisen.ReadOnlyInterleavedAudioMemory{`0,`1},Shamisen.ReadOnlyInterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.ReadOnlyInterleavedAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.Equals(Shamisen.ReadOnlyInterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="memory">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the memory parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.ReadOnlyInterleavedAudioMemory`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:Shamisen.Codecs.CodecUtils">
            <summary>
            Provides some utility functions for <see cref="T:Shamisen.Codecs.IEncoder`3"/> and <see cref="T:Shamisen.Codecs.IDecoder"/>.
            </summary>
        </member>
        <member name="T:Shamisen.Codecs.Composing.IComposable">
            <summary>
            Defines a base infrastructure of a composable object.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Composing.IComposable.WriteTo(Shamisen.IDataSink{System.Byte})">
            <summary>
            Writes this <see cref="T:Shamisen.Codecs.Composing.IComposable"/> instance to <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <param name="sink">The sink.</param>
        </member>
        <member name="T:Shamisen.Codecs.Composing.IAsyncComposable">
            <summary>
            Defines a base infrastructure of an asynchronously composable object.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Composing.IAsyncComposable.WriteTo(Shamisen.IDataSink{System.Byte})">
            <summary>
            Writes this <see cref="T:System.IComparable"/> instance to <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <param name="sink">The sink.</param>
        </member>
        <member name="T:Shamisen.Codecs.IComposer`2">
            <summary>
            Defines a base infrastructure of an instance of encoder.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.IComposer`2.FramesWritten">
            <summary>
            Gets the frames written to the <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <value>
            The frames written.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.IComposer`2.TheoreticalMaxCapacity">
            <summary>
            Gets the theoretical maximum capacity of the codec.<br/>
            The <see langword="null"/> means the codec doesn't have any limitation of size.
            </summary>
            <value>
            The theoretical maximum capacity of the file format.
            </value>
        </member>
        <member name="T:Shamisen.Codecs.IDecoder">
            <summary>
            Defines a base infrastructure of an audio decoder.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.IDecoder.DetermineDecodabilityAsync(Shamisen.IDataSource{System.Byte})">
            <summary>
            Determines whether the data from <paramref name="dataSource"/> can be decoded by this decoder asynchronously.<br/>
            The actual decoding stream must be opened after seeking the source <see cref="T:System.IO.Stream"/> to head.
            </summary>
            <param name="dataSource">The <see cref="T:Shamisen.IDataSource`1"/> to read the data from.</param>
            <returns>
            The whole verification task which returns the value below:<br/>
            <c>true</c> if the data from <paramref name="dataSource"/> can be supported by this decoder, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.IDecoder.TryCreateDecoderAsync(Shamisen.IDataSource{System.Byte})">
            <summary>
            Tries to create a decoder that asynchronously decodes the data asynchronously read from <paramref name="dataSource"/>.
            </summary>
            <param name="dataSource">The <see cref="T:Shamisen.IDataSource`1"/> to read the data from.</param>
            <returns>
            success: The value which indicates whether the data is decodable, and the decoder is created.
            decoder: The decoding <see cref="T:Shamisen.IWaveSource"/>.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.IEncoder`3">
            <summary>
            Defines a base infrastructure of an audio encoder that handles <see cref="T:Shamisen.IReadableAudioSource`2"/> and <see cref="T:Shamisen.ISampleSource"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.IEncoder`3.IsEncodable(Shamisen.IReadableAudioSource{`0,`1},Shamisen.IDataSink{System.Byte},`2)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IReadableAudioSource`2"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Codecs.IEncoder`3.IsEncodableAsync(Shamisen.IAsyncReadableAudioSource{`0,`1},Shamisen.IDataSink{System.Byte},`2)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncReadableAudioSource`2"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Codecs.IEncoder`3.Encode(Shamisen.IReadableAudioSource{`0,`1},Shamisen.IDataSink{System.Byte},`2)">
            <summary>
            Encodes <paramref name="source"/> to the specified <paramref name="sink"/>.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IReadableAudioSource`2"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
        </member>
        <member name="M:Shamisen.Codecs.IEncoder`3.EncodeAsync(Shamisen.IAsyncReadableAudioSource{`0,`1},Shamisen.IDataSink{System.Byte},`2)">
            <summary>
            Encodes <paramref name="source"/> to the specified <paramref name="sink"/> asynchronously.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncReadableAudioSource`2"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns>The whole encoding task.</returns>
        </member>
        <member name="T:Shamisen.Codecs.ISampleEncoder`1">
            <summary>
            Defines a base infrastructure of an audio encoder that handles <see cref="T:Shamisen.ISampleSource"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.ISampleEncoder`1.IsEncodable(Shamisen.ISampleSource,Shamisen.IDataSink{System.Byte},`0)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.ISampleSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Codecs.ISampleEncoder`1.IsEncodableAsync(Shamisen.IAsyncSampleSource,Shamisen.IDataSink{System.Byte},`0)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncSampleSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Codecs.ISampleEncoder`1.Encode(Shamisen.ISampleSource,Shamisen.IDataSink{System.Byte},`0)">
            <summary>
            Encodes <paramref name="source"/> to the specified <paramref name="sink"/>.
            </summary>
            <param name="source">The <see cref="T:Shamisen.ISampleSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
        </member>
        <member name="M:Shamisen.Codecs.ISampleEncoder`1.EncodeAsync(Shamisen.IAsyncSampleSource,Shamisen.IDataSink{System.Byte},`0)">
            <summary>
            Encodes <paramref name="source"/> to the specified <paramref name="sink"/> asynchronously.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncSampleSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns>The whole encoding task.</returns>
        </member>
        <member name="T:Shamisen.Codecs.IWaveEncoder`1">
            <summary>
            Defines a base infrastructure of an <see cref="T:Shamisen.IWaveSource"/> encoder.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.IWaveEncoder`1.IsEncodable(Shamisen.IWaveSource,Shamisen.IDataSink{System.Byte},`0)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IWaveSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Codecs.IWaveEncoder`1.IsEncodableAsync(Shamisen.IAsyncWaveSource,Shamisen.IDataSink{System.Byte},`0)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncWaveSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Codecs.IWaveEncoder`1.Encode(Shamisen.IWaveSource,Shamisen.IDataSink{System.Byte},`0)">
            <summary>
            Encodes <paramref name="source"/> to the specified <paramref name="sink"/>.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IWaveSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
        </member>
        <member name="M:Shamisen.Codecs.IWaveEncoder`1.EncodeAsync(Shamisen.IAsyncWaveSource,Shamisen.IDataSink{System.Byte},`0)">
            <summary>
            Encodes <paramref name="source"/> to the specified <paramref name="sink"/> asynchronously.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncWaveSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns>The whole encoding task.</returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.ChunkId">
            <summary>
            Represents a chunk ID for waveform file format in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Riff">
            <summary>
            The RIFF chunk "RIFF" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Rf64">
            <summary>
            The RF64 chunk "RF64" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Bw64">
            <summary>
            The BWF chunk "bw64" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Rf64DataSize">
            <summary>
            The RF64/BWF data size chunk "ds64" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Format">
            <summary>
            The format chunk "fmt " read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Fact">
            <summary>
            The fact chunk "fact" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Data">
            <summary>
            The data chunk "data" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.WaveList">
            <summary>
            The Wave List chunk "wavl" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Silent">
            <summary>
            The silent chunk "slnt" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Cue">
            <summary>
            The cue chunk "cue " read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Playlist">
            <summary>
            The playlist chunk "plst" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.AssociatedDataList">
            <summary>
            The associated data list chunk "list" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Label">
            <summary>
            The label chunk "labl" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Note">
            <summary>
            The note chunk "note" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.LabeledText">
            <summary>
            The labeled text chunk "ltxt" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Sampler">
            <summary>
            The sampler chunk "smpl" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.Instrument">
            <summary>
            The instrument chunk "inst" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.JunkLarge">
            <summary>
            The JUNK chunk "JUNK" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.JunkSmall">
            <summary>
            The junk chunk "junk" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.MetadataRawAXml">
            <summary>
            The raw XML metadata chunk "axml" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.MetadataCompressedBinaryXml">
            <summary>
            The compressed binary XML metadata chunk "bxml" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.MetadataSubXmlList">
            <summary>
            The XML list metadata chunk "sxml" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.MetadataAudioDefinitionModel">
            <summary>
            The metadata chunk of ITU-R BS.2076-2 audio definition model "chna" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.AssociatedDataListUpperCase">
            <summary>
            The riff metadata chunk "LIST" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.ChunkId.MetadataId3">
            <summary>
            The id3 metadata chunk "id3 " read in Little Endian.
            </summary>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Composing.FactChunk">
            <summary>
            Represents a "fact" chunk.
            </summary>
            <seealso cref="T:Shamisen.Codecs.Waveform.Composing.IRf64Chunk" />
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.FactChunk.#ctor(System.UInt32,Shamisen.Codecs.Waveform.ChunkId,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.FactChunk"/> struct.
            </summary>
            <param name="sampleCountInFrames">The sample count in frames.</param>
            <param name="chunkId">The chunk identifier.</param>
            <param name="riffSize">Size of the riff.</param>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.FactChunk.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.FactChunk.ContentSize">
            <summary>
            Gets the size of the content.
            </summary>
            <value>
            The size of the content.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.FactChunk.ActualSize">
            <summary>
            Gets the actual size.
            </summary>
            <value>
            The actual size.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.FactChunk.RiffSize">
            <summary>
            Gets the size of the riff.
            </summary>
            <value>
            The size of the riff.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.FactChunk.Shamisen#Codecs#Waveform#Composing#IRf64Chunk#Contents">
            <summary>
            Gets the contents.
            </summary>
            <value>
            The contents.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.FactChunk.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.FactChunk.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.FactChunk.Equals(Shamisen.Codecs.Waveform.Composing.FactChunk)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.FactChunk.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.FactChunk.WriteTo(Shamisen.IDataSink{System.Byte})">
            <summary>
            Writes this <see cref="T:Shamisen.Codecs.Composing.IComposable" /> instance to <see cref="T:Shamisen.IDataSink`1" />.
            </summary>
            <param name="sink">The sink.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.FactChunk.op_Equality(Shamisen.Codecs.Waveform.Composing.FactChunk,Shamisen.Codecs.Waveform.Composing.FactChunk)">
            <summary>
            Implements the operator op_Equality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.FactChunk.op_Inequality(Shamisen.Codecs.Waveform.Composing.FactChunk,Shamisen.Codecs.Waveform.Composing.FactChunk)">
            <summary>
            Implements the operator op_Inequality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Composing.BinaryContent">
            <summary>
            Represents a binary content like <see cref="T:System.Int32"/> and <see cref="T:System.Single"/>.
            </summary>
            <seealso cref="T:Shamisen.Codecs.Waveform.Composing.IRf64Content" />
            <summary>
            Represents a binary content like <see cref="T:System.Int32"/> and <see cref="T:System.Single"/>.
            </summary>
            <seealso cref="T:Shamisen.Codecs.Waveform.Composing.IRf64Content" />
        </member>
        <member name="F:Shamisen.Codecs.Waveform.Composing.BinaryContent.BinaryObject">
            <summary>
            The binary object
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.#ctor(System.Memory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct.
            </summary>
            <param name="binaryObject">The binary object.</param>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.BinaryContent.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.WriteTo(Shamisen.IDataSink{System.Byte})">
            <summary>
            Writes this <see cref="T:System.IComparable"/> instance to <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <param name="sink">The sink.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.op_Explicit(System.UInt16)~Shamisen.Codecs.Waveform.Composing.BinaryContent">
            <summary>
            Performs an explicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> in little endian.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.op_Explicit(System.Int16)~Shamisen.Codecs.Waveform.Composing.BinaryContent">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> in little endian.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.op_Explicit(System.UInt32)~Shamisen.Codecs.Waveform.Composing.BinaryContent">
            <summary>
            Performs an explicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> in little endian.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.op_Explicit(System.Int32)~Shamisen.Codecs.Waveform.Composing.BinaryContent">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> in little endian.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.op_Explicit(System.UInt64)~Shamisen.Codecs.Waveform.Composing.BinaryContent">
            <summary>
            Performs an explicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> in little endian.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.op_Explicit(System.Int64)~Shamisen.Codecs.Waveform.Composing.BinaryContent">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int64"/> to <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> in little endian.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateLittleEndian(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in little endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateLittleEndian(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in little endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateLittleEndian(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in little endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateLittleEndian(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in little endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateLittleEndian(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in little endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateLittleEndian(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in little endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateBigEndian(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in BIG endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateBigEndian(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in BIG endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateBigEndian(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in BIG endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateBigEndian(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in BIG endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateBigEndian(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in BIG endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.BinaryContent.CreateBigEndian(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.BinaryContent"/> struct with specified <paramref name="value"/> in BIG endian.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Composing.IRf64Chunk">
            <summary>
            Defines a base infrastructure of an RF64 chunk.
            </summary>
            <seealso cref="T:Shamisen.IDataSource`1" />
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.IRf64Chunk.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.IRf64Chunk.ContentSize">
            <summary>
            Gets the size of the content excluding header.
            </summary>
            <value>
            The size of the content.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.IRf64Chunk.ActualSize">
            <summary>
            Gets the actual size including RIFF chunk header.
            </summary>
            <value>
            The actual size.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.IRf64Chunk.RiffSize">
            <summary>
            Gets the size of the riff.
            </summary>
            <value>
            The size of the riff.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.IRf64Chunk.Contents">
            <summary>
            Gets the contents.
            </summary>
            <value>
            The contents.
            </value>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Composing.IRf64Content">
            <summary>
            Defines a base infrastructure of a content of RF64 chunk.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.IRf64Content.Size">
            <summary>
            Gets the size of this <see cref="T:Shamisen.Codecs.Waveform.Composing.IRf64Content"/>.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk">
            <summary>
            Represents a mutable RF64 chunk.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.#ctor(Shamisen.Codecs.Waveform.ChunkId,System.Nullable{System.UInt32})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk"/> class.
            </summary>
            <param name="chunkId">The chunk identifier.</param>
            <param name="size">The size value to overwrite.</param>
            <exception cref="T:System.ArgumentNullException">dataCache</exception>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.#ctor(Shamisen.Codecs.Waveform.ChunkId,System.Collections.Generic.List{Shamisen.Codecs.Waveform.Composing.IRf64Content},System.Nullable{System.UInt32})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk"/> class.
            </summary>
            <param name="chunkId">The chunk identifier.</param>
            <param name="contents">The contents.</param>
            <param name="size">The size value to overwrite.</param>
            <exception cref="T:System.ArgumentNullException">contents</exception>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.ActualSize">
            <summary>
            Gets the actual size including RIFF chunk header.
            </summary>
            <value>
            The actual size.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.ContentSize">
            <summary>
            Gets the size of the content excluding header.
            </summary>
            <value>
            The size of the content.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.RiffSize">
            <summary>
            Gets the size of the riff.
            </summary>
            <value>
            The size of the riff.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.Contents">
            <summary>
            Gets the contents.
            </summary>
            <value>
            The contents.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Shamisen.Codecs.Waveform.Composing.IRf64Content"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:Shamisen.Codecs.Waveform.Composing.IRf64Content"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.WriteTo(Shamisen.IDataSink{System.Byte})">
            <summary>
            Writes this <see cref="T:System.IComparable"/> instance to <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <param name="sink">The sink.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.IndexOf(Shamisen.Codecs.Waveform.Composing.IRf64Content)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.Insert(System.Int32,Shamisen.Codecs.Waveform.Composing.IRf64Content)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.Add(Shamisen.Codecs.Waveform.Composing.IRf64Content)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.Clear">
            <summary>
            Clears this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.Contains(Shamisen.Codecs.Waveform.Composing.IRf64Content)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the specified item exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.CopyTo(Shamisen.Codecs.Waveform.Composing.IRf64Content[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.Remove(Shamisen.Codecs.Waveform.Composing.IRf64Content)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.MutableRf64Chunk.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder">
            <summary>
            Provides functionality of encoding WAVE file format.
            </summary>
            <seealso cref="T:Shamisen.Codecs.IEncoder`3" />
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.Instance">
            <summary>
            Gets the global instance of <see cref="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder"/>.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.Encode(Shamisen.IWaveSource,Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Encodes <paramref name="source" /> to the specified <paramref name="sink" />.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IWaveSource" /> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.Encode(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat},Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Encodes <paramref name="source"/> to the specified <paramref name="sink"/>.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IReadableAudioSource`2"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.Encode(Shamisen.ISampleSource,Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Encodes <paramref name="source"/> to the specified <paramref name="sink"/>.
            </summary>
            <param name="source">The <see cref="T:Shamisen.ISampleSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.EncodeAsync(Shamisen.IAsyncWaveSource,Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Encodes <paramref name="source" /> to the specified <paramref name="sink" /> asynchronously.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncWaveSource" /> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns>
            The whole encoding task.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.EncodeAsync(Shamisen.IAsyncReadableAudioSource{System.Byte,Shamisen.IWaveFormat},Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Encodes <paramref name="source"/> to the specified <paramref name="sink"/> asynchronously.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncReadableAudioSource`2"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns>The whole encoding task.</returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.EncodeAsync(Shamisen.IAsyncSampleSource,Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Encodes <paramref name="source"/> to the specified <paramref name="sink"/> asynchronously.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncSampleSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns>The whole encoding task.</returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.IsEncodable(Shamisen.IWaveSource,Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Determines whether the <paramref name="source" /> can be encoded to <paramref name="sink" /> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IWaveSource" /> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <returns>
              <c>true</c> if the <paramref name="source" /> is supported by this encoder and <paramref name="sink" /> meets the requirement of encoding, otherwise, <c>false</c>.
            </returns>
            <param name="options">The encoding options.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.IsEncodable(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat},Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IReadableAudioSource`2"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.IsEncodable(Shamisen.ISampleSource,Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.ISampleSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.IsEncodableAsync(Shamisen.IAsyncWaveSource,Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncWaveSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.IsEncodableAsync(Shamisen.IAsyncReadableAudioSource{System.Byte,Shamisen.IWaveFormat},Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncReadableAudioSource`2"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder.IsEncodableAsync(Shamisen.IAsyncSampleSource,Shamisen.IDataSink{System.Byte},Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Determines whether the <paramref name="source"/> can be encoded to <paramref name="sink"/> by this codec.
            </summary>
            <param name="source">The <see cref="T:Shamisen.IAsyncSampleSource"/> to read the data to encode from.</param>
            <param name="sink">The destination.</param>
            <param name="options">The encoding options.</param>
            <returns><c>true</c> if the <paramref name="source"/> is supported by this encoder and <paramref name="sink"/> meets the requirement of encoding, otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions">
            <summary>
            Represents an option for <see cref="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoder"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions"/> struct.
            </summary>
            <param name="preferRiff">if set to <c>true</c> you prefer RIFF over RF64.</param>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions.PreferRiff">
            <summary>
            Gets a value indicating whether to prefer RIFF over RF64 or not.
            </summary>
            <value>
              <c>true</c> if you prefer RIFF over RF64; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions.Equals(Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions.op_Equality(Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions,Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions.op_Inequality(Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions,Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Codecs.Waveform.Composing.SimpleWaveEncoderOptions"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader">
            <summary>
            Represents a "ds64" chunk(excluding <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/>).
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt32,Shamisen.Codecs.Waveform.ChunkId,System.Nullable{System.UInt32})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader"/> struct.
            </summary>
            <param name="riffSize">Size of the RF64 chunk.</param>
            <param name="dataSize">Size of the data chunk.</param>
            <param name="frameCount">The number of frames in the file.</param>
            <param name="tableLength">Length of the table of <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/>.</param>
            <param name="chunkId">The chunk identifier.</param>
            <param name="chunkSize">Size of the chunk.</param>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.ContentSize">
            <summary>
            Gets the size of the content.
            </summary>
            <value>
            The size of the content.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.ActualSize">
            <summary>
            Gets the actual size.
            </summary>
            <value>
            The actual size.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.RiffSize">
            <summary>
            Gets the size of the riff.
            </summary>
            <value>
            The size of the riff.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.Shamisen#Codecs#Waveform#Composing#IRf64Chunk#Contents">
            <summary>
            Gets the contents.
            </summary>
            <value>
            The contents.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.RiffChunkSize">
            <summary>
            Gets the size of the riff chunk.
            </summary>
            <value>
            The size of the riff chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.DataChunkSize">
            <summary>
            Gets the size of the data chunk.
            </summary>
            <value>
            The size of the data chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.FrameCount">
            <summary>
            Gets the frame count.
            </summary>
            <value>
            The frame count.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.TableLength">
            <summary>
            Gets the length of the table of <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/>.
            </summary>
            <value>
            The length of the table of <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/>.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.WriteTo(Shamisen.IDataSink{System.Byte})">
            <summary>
            Writes this <see cref="T:Shamisen.Codecs.Composing.IComposable" /> instance to <see cref="T:Shamisen.IDataSink`1" />.
            </summary>
            <param name="sink">The sink.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.Equals(Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.op_Equality(Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader,Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader)">
            <summary>
            Implements the operator op_Equality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader.op_Inequality(Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader,Shamisen.Codecs.Waveform.Chunks.Rf64DataSizeChunkHeader)">
            <summary>
            Implements the operator op_Inequality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.ChunkUtils">
            <summary>
            Provides a utility function that manipulates chunks in WAVE file.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ChunkUtils.IsJunkChunk(Shamisen.Codecs.Waveform.ChunkId)">
            <summary>
            Determines whether the specified <paramref name="chunkId"/> represents JUNK chunk.
            </summary>
            <param name="chunkId">The chunk identifier.</param>
            <returns>
              <c>true</c> if the specified <paramref name="chunkId"/> represents JUNK chunk; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.ExtensibleWaveFormat">
            <summary>
            Represents an "extensible" wave format.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.#ctor(Shamisen.Codecs.Waveform.StandardWaveFormat,System.UInt16,System.UInt16,Shamisen.Speakers,System.Guid,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.ExtensibleWaveFormat"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="extensionSize">Size of the extension.</param>
            <param name="validBitsPerSample">The valid bits per sample.</param>
            <param name="channelMask">The channel mask.</param>
            <param name="subFormat">The sub format.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.ExtensionSize">
            <summary>
            Gets the size of the extension.
            </summary>
            <value>
            The size of the extension.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.ValidBitsPerSample">
            <summary>
            Gets the valid bits per sample.
            </summary>
            <value>
            The valid bits per sample.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.ChannelCombination">
            <summary>
            Gets the channel combination.
            </summary>
            <value>
            The channel combination.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.SubFormat">
            <summary>
            Gets the sub format.
            </summary>
            <value>
            The sub format.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.BlockSize">
            <summary>
            Gets the value indicates how many bytes are required per whole sample.
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.SampleSize">
            <summary>
            Gets the size of the frame.
            </summary>
            <value>
            The size of the frame.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.ExtraData">
            <summary>
            Gets the extra data.
            </summary>
            <value>
            The extra data.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.Equals(Shamisen.Codecs.Waveform.ExtensibleWaveFormat)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.Equals(Shamisen.IAudioFormat{System.Byte})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.WriteTo(Shamisen.IDataSink{System.Byte})">
            <summary>
            Writes this <see cref="T:System.IComparable" /> instance to <see cref="T:Shamisen.IDataSink`1" />.
            </summary>
            <param name="sink">The sink.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.op_Equality(Shamisen.Codecs.Waveform.ExtensibleWaveFormat,Shamisen.Codecs.Waveform.ExtensibleWaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.ExtensibleWaveFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.ExtensibleWaveFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Codecs.Waveform.ExtensibleWaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.op_Inequality(Shamisen.Codecs.Waveform.ExtensibleWaveFormat,Shamisen.Codecs.Waveform.ExtensibleWaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.ExtensibleWaveFormat"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.ExtensibleWaveFormat"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Codecs.Waveform.ExtensibleWaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.ExtensionPart">
            <summary>
            Represents an "extension" part of <see cref="T:Shamisen.Codecs.Waveform.ExtensibleWaveFormat"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ExtensionPart.#ctor(System.UInt16,System.UInt16,System.UInt32,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.ExtensionPart"/> struct.
            </summary>
            <param name="extensionSize">Size of the extension.</param>
            <param name="validBitsPerSample">The valid bits per sample.</param>
            <param name="channelMask">The channel mask.</param>
            <param name="subFormat">The sub format.</param>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensionPart.ExtensionSize">
            <summary>
            Gets the size of the extension region data.
            </summary>
            <value>
            The size of the extension region data.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensionPart.ValidBitsPerSample">
            <summary>
            Gets the valid bits per sample.
            </summary>
            <value>
            The valid bits per sample.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensionPart.ChannelMask">
            <summary>
            Gets the channel mask.
            </summary>
            <value>
            The channel mask.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.ExtensionPart.SubFormat">
            <summary>
            Gets the sub format.
            </summary>
            <value>
            The sub format.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.ExtensionPart.ReverseEndianness">
            <summary>
            Reverses endianness for all fields, and returns a new value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser">
            <summary>
            Parses n-bit Linear and IEEE 754 floating point PCM data chunk.
            </summary>
            <seealso cref="T:Shamisen.Codecs.Waveform.Parsing.Chunks.IWaveformChunkParser" />
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.#ctor(Shamisen.Codecs.Waveform.IChunkReader,Shamisen.IWaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            format
            </exception>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.ChunkLength">
            <summary>
            Gets the length of this chunk excluding header 8 bytes.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Source">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The source chunk reader.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser">
            <summary>
            Parses fmt chunks for PCM-Like files.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.#ctor(Shamisen.Codecs.Waveform.IChunkReader,Shamisen.AudioEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.RequireFactChunk">
            <summary>
            Gets a value indicating whether the format requires a fact chunk.
            </summary>
            <value>
              <c>true</c> if the format requires a fact chunk; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.Data">
            <summary>
            Gets the stored data.<br />
            The data must be parsed at initialization.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.ChunkLength">
            <summary>
            Gets the length of this chunk excluding header 8 bytes.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.Source">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The source chunk reader.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.GetWaveformChunkParser(Shamisen.Codecs.Waveform.IChunkReader,Shamisen.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer)">
            <summary>
            Gets the waveform chunk parser.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
            <param name="rf64ChunkSizeContainer">The container of informations about the size of certain chunks.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.ParseFactChunk(Shamisen.Codecs.Waveform.IChunkReader)">
            <summary>
            Parses the fact chunk.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.IChunkReader">
            <summary>
            Defines a base infrastructure of a chunk reader.
            </summary>
            <seealso cref="T:Shamisen.IDataSource`1" />
        </member>
        <member name="P:Shamisen.Codecs.Waveform.IChunkReader.ChunkId">
            <summary>
            Gets the current chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.IChunkReader.TotalSize">
            <summary>
            Gets the total size of this chunk excluding the 8 bytes of header.
            </summary>
            <value>
            The total size.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.IChunkReader.RemainingBytes">
            <summary>
            Gets the length of remaining data in bytes.
            </summary>
            <value>
            The remaining bytes.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.IChunkReader.CurrentSubChunk">
            <summary>
            Gets the current sub chunk.
            </summary>
            <value>
            The current sub chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.IChunkReader.CanPubliclyRead">
            <summary>
            Gets a value indicating whether this instance can be read by <see cref="M:Shamisen.IReadSupport`1.Read(System.Span{`0})"/> and <see cref="M:Shamisen.IAsyncReadSupport`1.ReadAsync(System.Memory{`0})"/>.
            </summary>
            <value>
              <c>true</c> if this instance can publicly read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.IChunkReader.ReadSubChunk">
            <summary>
            Opens the stream for sub chunk.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.IEndiannessReversible`1">
            <summary>
            Defines a base infrastructure of a chunk of data that is bi-endianed.
            </summary>
            <typeparam name="TImplementation">The type of an implementation of this interface.</typeparam>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.IEndiannessReversible`1.ReverseEndianness">
            <summary>
            Reverses endianness for all fields, and returns a new value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.InfoSubChunkId">
            <summary>
            Represents a subchunk ID for waveform "LIST" chunk in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.ArchivalLocation">
            <summary>
            The Archival Location subchunk "IARL" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Artist">
            <summary>
            The Artist subchunk "IART" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Commissioned">
            <summary>
            The Commissioned subchunk "ICMS" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Comments">
            <summary>
            The Comments subchunk "ICMT" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Copyright">
            <summary>
            The Copyright subchunk "ICOP" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.CreationDate">
            <summary>
            The Creation Date subchunk "ICRD" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Cropped">
            <summary>
            The Cropped subchunk "ICRP" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Dimensions">
            <summary>
            The Dimensions subchunk "IDIM" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.DotsPerInch">
            <summary>
            The Dots Per Inch subchunk "IDPI" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Engineer">
            <summary>
            The Engineer subchunk "IENG" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Genre">
            <summary>
            The Genre subchunk "IGNR" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Keywords">
            <summary>
            The Keywords subchunk "IKEY" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Lightness">
            <summary>
            The Lightness subchunk "ILGT" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Medium">
            <summary>
            The Medium subchunk "IMED" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Name">
            <summary>
            The Name subchunk "INAM" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.PaletteSetting">
            <summary>
            The Palette Setting subchunk "IPLT" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Product">
            <summary>
            The Product subchunk "IPRD" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Subject">
            <summary>
            The Subject subchunk "ISBJ" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Software">
            <summary>
            The Software subchunk "ISFT" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Sharpness">
            <summary>
            The Sharpness subchunk "ISHP" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Source">
            <summary>
            The Source subchunk "ISRC" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.SourceForm">
            <summary>
            The SourceForm subchunk "ISRF" read in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.InfoSubChunkId.Technician">
            <summary>
            The Technician subchunk "ITCH" read in Little Endian.
            </summary>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.Chunks.IFactChunkParser">
            <summary>
            Defines a base infrastructure of a "fact" chunk parser.
            </summary>
            <seealso cref="T:Shamisen.Codecs.Waveform.Parsing.IChunkParserWithSingleData`1" />
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.Chunks.IFormatChunkParser">
            <summary>
            Defines a base infrastructure of a parser for "fmt " chunk.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.Chunks.IFormatChunkParser.RequireFactChunk">
            <summary>
            Gets a value indicating whether the format requires a fact chunk.
            </summary>
            <value>
              <c>true</c> if the format requires a fact chunk; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.Chunks.IFormatChunkParser.GetWaveformChunkParser(Shamisen.Codecs.Waveform.IChunkReader,Shamisen.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer)">
            <summary>
            Gets the waveform chunk parser.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
            <param name="rf64ChunkSizeContainer">The container of informations about the size of certain chunks.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Shamisen.Codecs.Waveform.Parsing.Chunks.IFormatChunkParser"/> didn't parse a required "fact" chunk.</exception>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.Chunks.IFormatChunkParser.ParseFactChunk(Shamisen.Codecs.Waveform.IChunkReader)">
            <summary>
            Parses the fact chunk.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.Chunks.IWaveformChunkParser">
            <summary>
            Parses a ".wav" file into waveform data.
            Applicable for chunks like <see cref="F:Shamisen.Codecs.Waveform.ChunkId.WaveList"/>, <see cref="F:Shamisen.Codecs.Waveform.ChunkId.Silent"/>, and <see cref="F:Shamisen.Codecs.Waveform.ChunkId.Data"/>
            </summary>
            <seealso cref="T:Shamisen.Codecs.Waveform.Parsing.IChunkParser" />
            <seealso cref="T:Shamisen.IWaveSource" />
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.Chunks.JunkChunkParser">
            <summary>
            Parses "JUNK", "PAD ", and non-supported chunks.
            </summary>
            <seealso cref="T:Shamisen.Codecs.Waveform.Parsing.IChunkParser" />
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.Chunks.JunkChunkParser.#ctor(Shamisen.Codecs.Waveform.ChunkId,System.UInt64,Shamisen.Codecs.Waveform.IChunkReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Parsing.Chunks.JunkChunkParser"/> class.
            </summary>
            <param name="chunkId">The chunk identifier.</param>
            <param name="chunkLength">Length of the chunk.</param>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.Chunks.JunkChunkParser.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.Chunks.JunkChunkParser.ChunkLength">
            <summary>
            Gets the length of this chunk excluding header 8 bytes.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.Chunks.JunkChunkParser.Source">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The source chunk reader.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.Chunks.JunkChunkParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.IChunkParser">
            <summary>
            Parses a wave sub-chunk.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.IChunkParser.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.IChunkParser.ChunkLength">
            <summary>
            Gets the length of this chunk excluding header 8 bytes.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.IChunkParser.Source">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The source chunk reader.
            </value>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.IChunkParserWithSingleData`1">
            <summary>
            Parses a wave sub-chunk with certain data.
            </summary>
            <typeparam name="T">The type of stored data.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.IChunkParserWithSingleData`1.Data">
            <summary>
            Gets the stored data.<br/>
            The data must be parsed at initialization.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.IChunkParserWithMultipleData`1">
            <summary>
            Parses a wave sub-chunk with certain multiple data.
            </summary>
            <typeparam name="T">The type of stored data.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.IChunkParserFactory">
            <summary>
            Defines a base infrastructure of a chunk-parser factory.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.IChunkParserFactory.GetChunkParser(Shamisen.Codecs.Waveform.ChunkId,Shamisen.Codecs.Waveform.IChunkReader)">
            <summary>
            Gets the chunk parser for the specified <paramref name="id"/>.
            </summary>
            <param name="id">The identifier.</param>
            <param name="chunkReader">The source chunk reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.IChunkParserFactory.GetFormatChunkParser(Shamisen.Codecs.Waveform.IChunkReader)">
            <summary>
            Gets the format chunk parser.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer">
            <summary>
            Defines a base structure that contains informations about the size of certain chunks.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer.RiffSize">
            <summary>
            Gets the size of the RF64 chunk.
            </summary>
            <value>
            The size of the RF64 chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer.DataSize">
            <summary>
            Gets the size of the data chunk.
            </summary>
            <value>
            The size of the data chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer.SampleCount">
            <summary>
            Gets the sample count in the fact chunk.
            </summary>
            <value>
            The sample count in the fact chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer.ChunkSizeTable">
            <summary>
            Gets the chunk size table.
            </summary>
            <value>
            The chunk size table.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer.GetSizeForNextChunk(Shamisen.Codecs.Waveform.ChunkId)">
            <summary>
            Gets the size for next chunk with specified <paramref name="id"/>.<br/>
            This function must not be called more than once for single chunk.
            </summary>
            <param name="id">The chunk identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.IWaveParser">
            <summary>
            Decodes a ".wav" file from <see cref="T:Shamisen.Codecs.Waveform.IChunkReader"/>.<br/>
            The instance of <see cref="T:Shamisen.Codecs.Waveform.Parsing.IWaveParser"/> must be ready to <see cref="M:Shamisen.IReadSupport`1.Read(System.Span{`0})"/> after the instance is initialized with its constructor.
            </summary>
            <seealso cref="T:Shamisen.IWaveSource" />
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.IWaveParser.ChunkParserFactory">
            <summary>
            Gets the chunk parser factory.
            </summary>
            <value>
            The chunk parser factory.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.IWaveParser.ChunkReader">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The chunk reader.
            </value>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.IRf64Parser">
            <summary>
            Decodes an RF64 ".wav" file from <see cref="T:Shamisen.Codecs.Waveform.IChunkReader"/>.
            </summary>
            <seealso cref="T:Shamisen.Codecs.Waveform.Parsing.IWaveParser" />
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.RegisterableChunkParserFactory">
             <summary>
            
             </summary>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.SimpleChunkParserFactory">
            <summary>
            Constructs simple chunk parsers and discards any metadata chunks.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.SimpleChunkParserFactory.GetChunkParser(Shamisen.Codecs.Waveform.ChunkId,Shamisen.Codecs.Waveform.IChunkReader)">
            <summary>
            Gets the chunk parser for the specified <paramref name="id" />.
            </summary>
            <param name="id">The identifier.</param>
            <param name="chunkReader">The source chunk reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.SimpleChunkParserFactory.GetFormatChunkParser(Shamisen.Codecs.Waveform.IChunkReader)">
            <summary>
            Gets the format chunk parser.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser">
            <summary>
            Parses ".wav" files from <see cref="T:Shamisen.Codecs.Waveform.IChunkReader"/>
            </summary>
            <seealso cref="T:Shamisen.Codecs.Waveform.Parsing.IWaveParser" />
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.ChunkParserFactory">
            <summary>
            Gets the chunk parser factory.
            </summary>
            <value>
            The chunk parser factory.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.ChunkReader">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The chunk reader.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.ChunkSizeTable">
            <summary>
            Gets the chunk size table.
            </summary>
            <value>
            The chunk size table.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.DataSize">
            <summary>
            Gets the size of the data chunk.
            </summary>
            <value>
            The size of the data chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.RiffSize">
            <summary>
            Gets the size of the RF64 chunk.
            </summary>
            <value>
            The size of the RF64 chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.SampleCount">
            <summary>
            Gets the sample count in the fact chunk.
            </summary>
            <value>
            The sample count in the fact chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.#ctor(Shamisen.Codecs.Waveform.Parsing.IChunkParserFactory,Shamisen.IReadableDataSource{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser" /> class.
            </summary>
            <param name="chunkParserFactory">The chunk parser factory.</param>
            <param name="dataSource">The data source for whole WAVE file.</param>
            <exception cref="T:System.ArgumentNullException">chunkParserFactory
            or
            chunkReader</exception>
            <exception cref="T:System.NotSupportedException">The \"{chars}\" file is not supported!</exception>
            <exception cref="T:System.IO.InvalidDataException">
            The first chunk wasn't \"ds64\"!
            or
            "fmt " chunk not found!
            or
            "fact" chunk not found!
            or
            The "wavl" and "slnt" chunks are not currently supported!
            </exception>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.GetSizeForNextChunk(Shamisen.Codecs.Waveform.ChunkId)">
            <summary>
            Gets the size for next chunk with specified <paramref name="id" />.<br />
            This function must not be called more than once for single chunk.
            </summary>
            <param name="id">The chunk identifier.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">The parser is not parsing RF64 data.</exception>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Parsing.SimpleWaveParser.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry">
            <summary>
            Represents a chunk's size entry of RF64.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry.Id">
            <summary>
            The identifier of the corresponding chunk.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry.ChunkSize">
            <summary>
            The chunk size.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry.#ctor(Shamisen.Codecs.Waveform.ChunkId,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> struct.
            </summary>
            <param name="id">The identifier.</param>
            <param name="chunkSize">Size of the chunk.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry.Equals(Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry.op_Equality(Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry,Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry.op_Inequality(Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry,Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader">
            <summary>
            Parses and reads RF64 Chunks.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.CanPubliclyRead">
            <summary>
            Gets a value indicating whether this instance can be read by <see cref="M:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.Read(System.Span{System.Byte})"/> and <see cref="M:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.ReadAsync(System.Memory{System.Byte})"/>.
            </summary>
            <value>
              <c>true</c> if this instance can publicly read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.ChunkId">
            <summary>
            Gets the current chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.CurrentSubChunk">
            <summary>
            Gets the current sub chunk.
            </summary>
            <value>
            The current sub chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.RemainingBytes">
            <summary>
            Gets the length of remaining data in bytes.
            </summary>
            <value>
            The remaining bytes.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.Parser">
            <summary>
            Gets the parser.
            </summary>
            <value>
            The parser.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in number of <see cref="T:System.Byte"/>s.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in number of <see cref="T:System.Byte"/>s.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IDataSource`1" /> in number of <see cref="T:System.Byte"/>s.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IDataSource`1" /> in number of <see cref="T:System.Byte"/>s.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IDataSource`1" /> in number of <see cref="T:System.Byte"/>s.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IDataSource`1" /> in number of <see cref="T:System.Byte"/>s.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.ReadSupport">
            <summary>
            Gets the read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.AsyncReadSupport">
            <summary>
            Gets the asynchronous read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.TotalSize">
            <summary>
            Gets the total size of this chunk.
            </summary>
            <value>
            The total size.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.#ctor(Shamisen.IReadableDataSource{System.Byte},Shamisen.Codecs.Waveform.Parsing.IRf64Parser,Shamisen.StackOnlyActionContainer{System.UInt64}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader" /> class that reads <see cref="F:Shamisen.Codecs.Waveform.ChunkId.Riff" /> and <see cref="F:Shamisen.Codecs.Waveform.ChunkId.Rf64" /> chunk.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="parser">The RF64 parser instance.</param>
            <param name="totalSizeSetter">A method to set the <see cref="P:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.TotalSize"/>.</param>
            <exception cref="T:System.ArgumentNullException">dataSource</exception>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.#ctor(Shamisen.IReadableDataSource{System.Byte},Shamisen.Codecs.Waveform.Parsing.IRf64Parser)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader" /> class that reads <see cref="F:Shamisen.Codecs.Waveform.ChunkId.Riff" /> and <see cref="F:Shamisen.Codecs.Waveform.ChunkId.Rf64" /> chunk.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="parser">The RF64 parser instance.</param>
            <exception cref="T:System.ArgumentNullException">dataSource</exception>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.Read(System.Span{System.Byte})">
            <summary>
            Reads the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.ReadAsync(System.Memory{System.Byte})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <see cref="T:System.Byte" />s read from this <see cref="T:Shamisen.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.ReadSubChunk">
            <summary>
            Opens the stream for sub chunk.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.Skip(System.UInt64)">
            <summary>
            Skips this data source the specified number of elements to skip.
            </summary>
            <param name="numberOfElementsToSkip">The number of elements to skip.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.Rf64.Rf64ChunkReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.RiffChunkHeader">
            <summary>
            Represents a header of RIFF chunks.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkHeader.#ctor(Shamisen.Codecs.Waveform.ChunkId,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.RiffChunkHeader"/> struct.
            </summary>
            <param name="chunkId">The chunk identifier.</param>
            <param name="length">The length.</param>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkHeader.ChunkId">
            <summary>
            Gets or sets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkHeader.Length">
            <summary>
            Gets or sets the length of this chunk.
            </summary>
            <value>
            The length of this chunk.
            </value>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.RiffChunkName">
            <summary>
            Represents a name of a RIFF chunk.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkName.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.RiffChunkName"/> struct.
            </summary>
            <param name="b0">The first byte.</param>
            <param name="b1">The second byte.</param>
            <param name="b2">The third byte.</param>
            <param name="b3">The fourth byte.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkName.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.RiffChunkName"/> struct.
            </summary>
            <param name="valueLittleEndian">The value in little endian.</param>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkName.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkName.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkName.Equals(Shamisen.Codecs.Waveform.RiffChunkName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkName.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkName.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            The fully qualified type name.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkName.op_Equality(Shamisen.Codecs.Waveform.RiffChunkName,Shamisen.Codecs.Waveform.RiffChunkName)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.RiffChunkName"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.RiffChunkName"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Codecs.Waveform.RiffChunkName"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkName.op_Inequality(Shamisen.Codecs.Waveform.RiffChunkName,Shamisen.Codecs.Waveform.RiffChunkName)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.RiffChunkName"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.RiffChunkName"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Codecs.Waveform.RiffChunkName"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.RiffChunkReader">
            <summary>
            Parses and reads RIFF Chunks.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.CanPubliclyRead">
            <summary>
            Gets a value indicating whether this instance can be read by <see cref="M:Shamisen.Codecs.Waveform.RiffChunkReader.Read(System.Span{System.Byte})"/> and <see cref="M:Shamisen.Codecs.Waveform.RiffChunkReader.ReadAsync(System.Memory{System.Byte})"/>.
            </summary>
            <value>
              <c>true</c> if this instance can publicly read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.ChunkId">
            <summary>
            Gets the current chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.CurrentSubChunk">
            <summary>
            Gets the current sub chunk.
            </summary>
            <value>
            The current sub chunk.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.RemainingBytes">
            <summary>
            Gets the length of remaining data in bytes.
            </summary>
            <value>
            The remaining bytes.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in bytes.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in bytes.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.ReadSupport">
            <summary>
            Gets the read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.AsyncReadSupport">
            <summary>
            Gets the asynchronous read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.RiffChunkReader.TotalSize">
            <summary>
            Gets the total size of this chunk.
            </summary>
            <value>
            The total size.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkReader.#ctor(Shamisen.IReadableDataSource{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.RiffChunkReader"/> class that reads <see cref="F:Shamisen.Codecs.Waveform.ChunkId.Riff"/> chunk.
            </summary>
            <param name="dataSource">The data source.</param>
            <exception cref="T:System.ArgumentNullException">dataSource</exception>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkReader.Read(System.Span{System.Byte})">
            <summary>
            Reads the specified destination.
            </summary>
            <param name="buffer">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkReader.ReadAsync(System.Memory{System.Byte})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <see cref="T:System.Byte" />s read from this <see cref="T:Shamisen.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkReader.ReadSubChunk">
            <summary>
            Opens the stream for sub chunk.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkReader.Skip(System.UInt64)">
            <summary>
            Skips this data source the specified number of elements to skip.
            </summary>
            <param name="numberOfElementsToSkip">The number of elements to skip.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.RiffChunkReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.Riff.RiffSubChunkId">
            <summary>
            Represents a RIFF sub-chunk ID for waveform file format in Little Endian.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.Riff.RiffSubChunkId.Wave">
            <summary>
            The wave sub chunk.
            </summary>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.StandardWaveFormat">
            <summary>
            Represents a standard wave format inside "*.wav" files.
            </summary>
            <seealso cref="T:Shamisen.IWaveFormat" />
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormat.#ctor(Shamisen.AudioEncoding,System.UInt16,System.UInt32,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormat"/> struct.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="bytesPerSecond">The bytes per second.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="bitDepth">The bit depth.</param>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormat.BlockSize">
            <summary>
            Gets the value indicates how many bytes are required per whole sample.
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.Codecs.Waveform.StandardWaveFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormat.SampleSize">
            <summary>
            Gets the size of the frame.
            </summary>
            <value>
            The size of the frame.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormat.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormat.ExtraData">
            <summary>
            Gets the extra data.
            </summary>
            <value>
            The extra data.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormat.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormat.Equals(Shamisen.Codecs.Waveform.StandardWaveFormat)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormat.Equals(Shamisen.IAudioFormat{System.Byte})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormat.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormat.WriteTo(Shamisen.IDataSink{System.Byte})">
            <summary>
            Writes this <see cref="T:Shamisen.Codecs.Composing.IComposable" /> instance to <see cref="T:Shamisen.IDataSink`1" />.
            </summary>
            <param name="sink">The sink.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormat.op_Equality(Shamisen.Codecs.Waveform.StandardWaveFormat,Shamisen.Codecs.Waveform.StandardWaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormat.op_Inequality(Shamisen.Codecs.Waveform.StandardWaveFormat,Shamisen.Codecs.Waveform.StandardWaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormat"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormat"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData">
            <summary>
            Represents an "extended" wave format.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.#ctor(Shamisen.Codecs.Waveform.StandardWaveFormat,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData"/> struct.
            </summary>
            <param name="format"></param>
            <param name="extraData"></param>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.Encoding">
            <summary>
            Gets the encoding.
            </summary>
            <value>
            The encoding.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.ExtraData">
            <summary>
            Gets the extra data.
            </summary>
            <value>
            The extra data.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.BlockSize">
            <summary>
            Gets the size of the block.
            </summary>
            <value>
            The size of the block.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.SampleSize">
            <summary>
            Gets the size of the sample.
            </summary>
            <value>
            The size of the sample.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.Channels">
            <summary>
            Gets the channels.
            </summary>
            <value>
            The channels.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.SampleRate">
            <summary>
            Gets the sample rate.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.BitDepth">
            <summary>
            Gets the bit depth.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.Size">
            <summary>
            Gets the size.
            </summary>
            <value>
            The size.
            </value>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.Equals(Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.Equals(Shamisen.IAudioFormat{System.Byte})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.WriteTo(Shamisen.IDataSink{System.Byte})">
            <summary>
            Writes this <see cref="T:Shamisen.Codecs.Composing.IComposable" /> instance to <see cref="T:Shamisen.IDataSink`1" />.
            </summary>
            <param name="sink">The sink.</param>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.op_Equality(Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData,Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData.op_Inequality(Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData,Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.Codecs.Waveform.StandardWaveFormatWithExtraData"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.WaveCodec">
            <summary>
            Encodes and decodes some ".wav" files in certain formats.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.WaveCodec.DetermineDecodabilityAsync(Shamisen.IDataSource{System.Byte})">
            <summary>
            Determines whether the data from <paramref name="dataSource" /> can be decoded by this decoder asynchronously.<br/>
            The actual decoding stream must be opened after seeking the source <see cref="T:System.IO.Stream"/> to head.
            </summary>
            <param name="dataSource">The <see cref="T:Shamisen.IDataSource`1" /> to read the data from.</param>
            <returns>
            The whole verification task which returns the value below:<br /><c>true</c> if the data from <paramref name="dataSource" /> can be supported by this decoder, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.WaveCodec.TryCreateDecoderAsync(Shamisen.IDataSource{System.Byte})">
            <summary>
            Tries to create a decoder that asynchronously decodes the data asynchronously read from <paramref name="dataSource" />.
            </summary>
            <param name="dataSource">The <see cref="T:Shamisen.IDataSource`1" /> to read the data from.</param>
            <returns>
            success: The value which indicates whether the data is decodable, and the decoder is created.
            decoder: The decoding <see cref="T:Shamisen.IWaveSource" />.
            </returns>
        </member>
        <member name="T:Shamisen.Codecs.Waveform.WaveformSubFormats">
            <summary>
            Represents a sub format for <see cref="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.SubFormat"/>.
            </summary>
            <summary>
            Represents a sub format for <see cref="P:Shamisen.Codecs.Waveform.ExtensibleWaveFormat.SubFormat"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Codecs.Waveform.WaveformSubFormats.ToGuid(Shamisen.AudioEncoding)">
            <summary>
            Converts specified <paramref name="encoding"/> to GUID.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Mpeg1Packet">
            <summary>
            MPEG-1 audio payload.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Mpeg1Payload">
            <summary>
            MPEG1 audio packet.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Unknown">
            <summary>
            Unknown format
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.LinearPcm">
            <summary>
            Microsoft PCM Format
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.MsAdpcm">
            <summary>
            Microsoft ADPCM Format
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.IeeeFloat">
            <summary>
            IEEE 754 Single Precision Floating-Point Number
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Vselp">
            <summary>
            Vector sum excited linear prediction Compaq Computer Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.IbmCvsd">
            <summary>
            IBM Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Alaw">
            <summary>
            A-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Mulaw">
            <summary>
            Î¼-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.OkiAdpcm">
            <summary>
            OKI ADPCM
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.ImaAdpcm">
            <summary>
            Intel Corporation ADPCM
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.MediaspaceAdpcm">
            <summary>
            Videologic ADPCM
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.SierraAdpcm">
            <summary>
            Sierra Semiconductor Corp
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.G723Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Digistd">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Digifix">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.DialogicOkiAdpcm">
            <summary>
            Dialogic Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.MediavisionAdpcm">
            <summary>
            Media Vision, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.CuCodec">
            <summary>
            Hewlett-Packard Company
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.YamahaAdpcm">
            <summary>
            Yamaha Corporation of America
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Sonarc">
            <summary>
            Speech Compression
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.DspgroupTruespeech">
            <summary>
            DSP Group, Inc
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Echosc1">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.AudiofileAf36">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Aptx">
            <summary>
            Audio Processing Technology
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.AudiofileAf10">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Prosody1612">
            <summary>
            Aculab plc
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Lrc">
            <summary>
            Merging Technologies S.A.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.DolbyAc2">
            <summary>
            Dolby Laboratories
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Gsm610">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Msnaudio">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.AntexAdpcme">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.ControlResVqlpc">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Digireal">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Digiadpcm">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.ControlResCr10">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.NmsVbxadpcm">
            <summary>
            Natural MicroSystems
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.RolandRdac">
            <summary>
            Roland
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Echosc3">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.RockwellAdpcm">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.RockwellDigitalk">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Xebec">
            <summary>
            Xebec Multimedia Solutions Limited
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.G721Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.G728Celp">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Msg723">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Mpeg">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Rt24">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Pac">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Mpeglayer3">
            <summary>
            MPEG 3 Layer 1
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.LucentG723">
            <summary>
            Lucent Technologies
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Cirrus">
            <summary>
            Cirrus Logic
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Espcm">
            <summary>
            ESS Technology
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Voxware">
            <summary>
            Voxware Inc
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.CanopusAtrac">
            <summary>
            Canopus, Co., Ltd.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.G726Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.G722Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Dsat">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.DsatDisplay">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareByteAligned">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareAc8">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareAc10">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareAc16">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareAc20">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareRt24">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareRt29">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareRt29hw">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareVr12">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareVr18">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxwareTq40">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Softsound">
            <summary>
            Softsound, Ltd.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VoxareTq60">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Msrt24">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.G729a">
            <summary>
            AT&amp;T Laboratories
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.MviMv12">
            <summary>
            Motion Pixels
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.DfG726">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.DfGsm610">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Onlive">
            <summary>
            OnLive! Technologies, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Sbc24">
            <summary>
            Siemens Business Communications Systems
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.DolbyAc3Spdif">
            <summary>
            Sonic Foundry
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.ZyxelAdpcm">
            <summary>
            ZyXEL Communications, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.PhilipsLpcbb">
            <summary>
            Philips Speech Processing
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Packed">
            <summary>
            Studer Professional Audio AG
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.RhetorexAdpcm">
            <summary>
            Rhetorex, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.IbmMulaw">
            <summary>
            IBM mu-law format
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.IbmAlaw">
            <summary>
            IBM a-law format
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Adpcm">
            <summary>
            IBM AVC Adaptive Differential PCM format
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VivoG723">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VivoSiren">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.DigitalG723">
            <summary>
            Digital Equipment Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.CreativeAdpcm">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.CreativeFastspeech8">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.CreativeFastspeech10">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Quarterdeck">
            <summary>
            Quarterdeck Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.FmTownsSnd">
            <summary>
            Fujitsu Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.BzvDigital">
            <summary>
            Brooktree Corporation
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.VmeVmpcm">
            <summary>
            AT&amp;T Labs, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Oligsm">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Oliadpcm">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Olicelp">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Olisbc">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Oliopr">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.LhCodec">
            <summary>
            Lernout &amp; Hauspie
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Norris">
            <summary>
            Norris Communications, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.SoundspaceMusicompress">
            <summary>
            AT&amp;T Labs, Inc.
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.Dvm">
            <summary>
            FAST Multimedia AG
            </summary>
        </member>
        <member name="F:Shamisen.Codecs.Waveform.WaveformSubFormats.InterwavVsc112">
            <summary>
            ?????
            </summary>
        </member>
        <member name="T:Shamisen.Concepts.ConceptKind">
            <summary>
            Represents a kind of concepts.
            </summary>
        </member>
        <member name="F:Shamisen.Concepts.ConceptKind.None">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:Shamisen.Concepts.ConceptKind.Unit">
            <summary>
            The concept of Units.
            </summary>
        </member>
        <member name="T:Shamisen.Concepts.ConceptAttribute">
            <summary>
            Defines a concept.
            </summary>
        </member>
        <member name="M:Shamisen.Concepts.ConceptAttribute.#ctor(Shamisen.Concepts.ConceptKind)">
            <summary>
            Initializes a new instance of <see cref="T:Shamisen.Concepts.ConceptAttribute"/>.
            </summary>
            <param name="kind">The kind of concept.</param>
        </member>
        <member name="P:Shamisen.Concepts.ConceptAttribute.Kind">
            <summary>
            The kind of concept.
            </summary>
        </member>
        <member name="T:Shamisen.Units">
            <summary>
            The concepts for Units.
            </summary>
        </member>
        <member name="P:Shamisen.Units.Frame">
            <summary>
            The <see cref="P:Shamisen.Units.Frame"/> is a packed unit of multiple audio <see cref="P:Shamisen.Units.Sample"/>s.<br/>
            A single <see cref="P:Shamisen.Units.Frame"/> contains the same number of samples as the channel of the stream.<br/>
            For example, the length of frames in the 2ch <see cref="F:Shamisen.AudioEncoding.IeeeFloat"/> audio data in bytes is <c>sizeof(float) * 4</c>, which is 16.<br/>
            </summary>
        </member>
        <member name="P:Shamisen.Units.Sample">
            <summary>
            The <see cref="P:Shamisen.Units.Sample"/> is a smallest unit of the multi-channel discrete(digital) audio data.<br/>
            The <see cref="P:Shamisen.Units.Sample"/> besides channel-by-channel, so the length of frame in bytes is the size of the sample itself, multiplied by the number of channels.
            </summary>
        </member>
        <member name="T:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter">
            <summary>
            Converts monaural audio to stereo.
            </summary>
        </member>
        <member name="M:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.TotalLength">
            <summary>
            Gets the total length.
            </summary>
            <value>
            The total length.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.Position">
            <summary>
            Gets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.SkipSupport">
            <summary>
            Gets the skip support.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.SeekSupport">
            <summary>
            Gets the seek support.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Conversion.ChannelConverters.MonauralToStrereoSampleConverter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Conversion.IAudioConverter`4">
            <summary>
            The base definition of some audio converters.
            </summary>
            <typeparam name="TFrom">The type to convert from.</typeparam>
            <typeparam name="TFromFormat"></typeparam>
            <typeparam name="TTo">The type to convert data to.</typeparam>
            <typeparam name="TToFormat"></typeparam>
        </member>
        <member name="P:Shamisen.Conversion.IAudioConverter`4.Source">
            <summary>
            Gets the source to read the samples from.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="T:Shamisen.Conversion.Resampling.Sample.ResamplerBase">
            <summary>
            The base of resampler.
            </summary>
            <seealso cref="T:Shamisen.Filters.IAudioFilter`2" />
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Channels">
            <summary>
            Gets the channels of output.
            </summary>
            <value>
            The channels of output.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.ChannelsDivisor">
            <summary>
            Gets the divisor for dividing a number by <see cref="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Channels"/>.
            </summary>
            <value>
            The divisor object.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.RateDivDivisor">
            <summary>
            Gets the divisor for converting source sample rate to destination sample rate.
            </summary>
            <value>
            The divisor object.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.RateDivDivisor64">
            <summary>
            Gets the divisor for converting source sample rate to destination sample rate.
            </summary>
            <value>
            The divisor object.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.RateDiv">
            <summary>
            Gets the rate source sample rate.
            </summary>
            <value>
            The number to divide with.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.RateDivInverse">
            <summary>
            Gets the divisor source sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.RateMulDivisor">
            <summary>
            Gets the divisor for converting destination sample rate to source sample rate.
            </summary>
            <value>
            The divisor object.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.RateMul">
            <summary>
            Gets the rate destination sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.RateMulInverse">
            <summary>
            Gets the divisor destination sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GradientIncrement">
            <summary>
            Gets the number to increment conversion gradient.
            </summary>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.IndexIncrement">
            <summary>
            Gets the number to increment conversion source position.
            </summary>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.Resampling.Sample.ResamplerBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destinationSampleRate">The destination sample rate.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">destinationSampleRate</exception>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GetCeiledInputPosition(System.Int32)">
            <summary>
            Gets the rounded input position further than -inf.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GetFlooredOutputPosition(System.Int32)">
            <summary>
            Gets the rounded output position further than +inf.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GetConversionGradient(System.Int32)">
            <summary>
            Calculates the conversion gradient a little precisely.
            </summary>
            <param name="outputPosition">The output position that is not multiplied by <see cref="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Channels"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GetConversionPosition(System.Int32)">
            <summary>
            Calculates the conversion gradient.
            </summary>
            <param name="outputPosition">The output position that is not multiplied by <see cref="P:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Channels"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GetInputPosition(System.Int32)">
            <summary>
            Gets the input buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GetInputPosition(System.Int64)">
            <summary>
            Gets the input buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GetInputPosition(System.Single)">
            <summary>
            Gets the input buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GetOutputPosition(System.Int32)">
            <summary>
            Gets the output buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GetOutputPosition(System.Int64)">
            <summary>
            Gets the output buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.GetOutputPosition(System.Single)">
            <summary>
            Gets the output buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.ActualDispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.ResamplerBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.Resampling.Sample.SplineResampler">
             <summary>
             Performs up-sampling using Catmull-Rom Spline interpolation.
            
             </summary>
             <seealso cref="T:Shamisen.Conversion.Resampling.Sample.ResamplerBase" />
        </member>
        <member name="F:Shamisen.Conversion.Resampling.Sample.SplineResampler.preCalculatedCatmullRomCoefficients">
            <summary>
            The pre calculated Catmull-Rom coefficients.<br/>
            X: The coefficient for value1 ((-xP3 + 2 * xP2 - x) * 0.5f)<br/>
            Y: The coefficient for value2 (((3 * xP3) - (5 * xP2) + 2) * 0.5f)<br/>
            Z: The coefficient for value3 ((-(3 * xP3) + 4 * xP2 + x) * 0.5f)<br/>
            W: The coefficient for value4 ((xP3 - xP2) * 0.5f)<br/>
            </summary>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.Resampling.Sample.SplineResampler"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destinationSampleRate">The destination sample rate.</param>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.RearrangeCoefficentsCachedDirect(System.Span{System.Numerics.Vector4},System.Int32,System.Int32)">
             <summary>
             [WIP] Rearranges coefficients for <see cref="F:Shamisen.Conversion.Resampling.Sample.SplineResampler.ResampleStrategy.CachedDirect"/>.
            
             </summary>
             <param name="coeffs"></param>
             <param name="rateMul"></param>
             <param name="acc"></param>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.RearrangeCoefficentsCachedWrappedOdd(System.Span{System.Numerics.Vector4},System.Int32,System.Int32)">
             <summary>
             Rearranges coefficients for <see cref="F:Shamisen.Conversion.Resampling.Sample.SplineResampler.ResampleStrategy.CachedWrappedOdd"/>.
            
             </summary>
             <param name="coeffs"></param>
             <param name="rateMul"></param>
             <param name="acc"></param>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.RearrangeCoefficentsCachedWrappedEven(System.Span{System.Numerics.Vector4},System.Int32,System.Int32)">
             <summary>
             Rearranges coefficients for <see cref="F:Shamisen.Conversion.Resampling.Sample.SplineResampler.ResampleStrategy.CachedWrappedEven"/>.
            
             </summary>
             <param name="coeffs"></param>
             <param name="rateMul"></param>
             <param name="acc"></param>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.GenerateCoeffsSse2(System.Span{System.Numerics.Vector4},System.Single)">
            <summary>
            SSE2 vectorized path
            x1.1 faster than Standard on Core i7-4790 at 3.90GHz
            </summary>
            <param name="coeffs"></param>
            <param name="rateMulInverse"></param>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.GenerateCoeffsFma128(System.Span{System.Numerics.Vector4},System.Single)">
            <summary>
            FMA vectorized path
            x1.5 faster than Sse2 on Core i7-4790 at 3.59GHz(AVX DOWNCLOCK!?)
            </summary>
            <param name="coeffs"></param>
            <param name="rateMulInverse"></param>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.ActualDispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.ResampleDirectGeneric(System.Span{System.Single},System.Span{System.Single},System.Int32,System.Int32@,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Performs resampling no matter how many channels to process.
            </summary>
            <param name="buffer"></param>
            <param name="srcBuffer"></param>
            <param name="channels"></param>
            <param name="x"></param>
            <param name="ram"></param>
            <param name="acc"></param>
            <param name="facc"></param>
            <param name="rmi"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.ResampleCachedDirectMonauralUpAnyRateGenericSse(System.Span{System.Single},System.Span{System.Single},System.Numerics.Vector4@,System.Int32@,System.Int32,System.Int32,System.Int32@)">
            <summary>
            For arbitrary sampling frequency ratio larger than 1
            </summary>
            <param name="buffer"></param>
            <param name="srcBuffer"></param>
            <param name="coeffPtr"></param>
            <param name="x"></param>
            <param name="ram"></param>
            <param name="acc"></param>
            <param name="rci"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.Resampling.Sample.SplineResampler.ResampleCachedDirectStereoQuadrupleRateX64(System.Span{System.Single},System.Span{System.Single},System.Numerics.Vector4@,System.Int32@)">
            <summary>
            This variant needs more than 8 xmm registers so AVX or x64 SSE is required<br/>
            It does not use 256bit floating-point arithmetic, making it suitable for the Haswell micro-architecture.<br/>
            TODO: Post-Rocket-Lake variant using 256bit floating-point arithmetic
            </summary>
            <param name="buffer"></param>
            <param name="srcBuffer"></param>
            <param name="coeffPtr"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="F:Shamisen.Conversion.Resampling.Sample.SplineResampler.ResampleStrategy.Direct">
            <summary>
            Calculate on demand
            </summary>
        </member>
        <member name="F:Shamisen.Conversion.Resampling.Sample.SplineResampler.ResampleStrategy.CachedDirect">
            <summary>
            Pre-Calculated
            </summary>
        </member>
        <member name="F:Shamisen.Conversion.Resampling.Sample.SplineResampler.ResampleStrategy.CachedWrappedOdd">
            <summary>
            Pre-Calculated and Wrapped
            </summary>
        </member>
        <member name="T:Shamisen.Conversion.SampleToWaveConverters.SampleToALawConverter">
            <summary>
            Converts Sample to G.711 8bit A-Law PCM.
            </summary>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToALawConverter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToALawConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToALawConverter.BytesPerSample">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToALawConverter.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToALawConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.SampleToWaveConverters.SampleToFloat32Converter">
            <summary>
            Converts Sample to 32-bit IeeeFloat PCM.
            </summary>
            <seealso cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToFloat32Converter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToFloat32Converter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToFloat32Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToFloat32Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToFloat32Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.SampleToWaveConverters.SampleToLinearPcmConversionPolicy">
            <summary>
            Defines some options for <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter"/> and its close relatives.
            </summary>
        </member>
        <member name="F:Shamisen.Conversion.SampleToWaveConverters.SampleToLinearPcmConversionPolicy.Normal">
            <summary>
            The normal conversion.
            </summary>
        </member>
        <member name="F:Shamisen.Conversion.SampleToWaveConverters.SampleToLinearPcmConversionPolicy.DeltaSigmaModulation">
            <summary>
            The conversion will be noise-shaped.
            </summary>
        </member>
        <member name="F:Shamisen.Conversion.SampleToWaveConverters.SampleToLinearPcmConversionPolicy.AllowFusedMultiplyAdd">
            <summary>
            The conversion will be allowed to utilize Fused-Multiply-Add for better performance.
            </summary>
        </member>
        <member name="F:Shamisen.Conversion.SampleToWaveConverters.SampleToLinearPcmConversionPolicy.ReversedOutput">
            <summary>
            The output must be BIG-ENDIAN if the system is little-endian.<br/>
            The output must be little-endian if the system is BIG-ENDIAN.
            </summary>
        </member>
        <member name="T:Shamisen.Conversion.SampleToWaveConverters.SampleToMuLawConverter">
            <summary>
            Converts Sample to G.711 8bit Î¼-Law PCM.
            </summary>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToMuLawConverter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToMuLawConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToMuLawConverter.BytesPerSample">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToMuLawConverter.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToMuLawConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter">
            <summary>
            Converts samples to 16-bit PCM.
            </summary>
            <seealso cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},System.Boolean,Shamisen.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="doDeltaSigmaModulation">Turns on <see cref="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.DoDeltaSigmaModulation"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},System.Boolean,Shamisen.Optimization.X86Intrinsics,Shamisen.Optimization.ArmIntrinsics,System.Boolean,Shamisen.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="enableIntrinsics"></param>
            <param name="enabledX86Intrinsics"></param>
            <param name="enabledArmIntrinsics"></param>
            <param name="doDeltaSigmaModulation">Turns on <see cref="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.DoDeltaSigmaModulation"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.DoDeltaSigmaModulation">
            <summary>
            Gets a value indicating whether the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter"/> does the 16-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Convert(System.Single)">
            <summary>
            Clamps the specified <paramref name="srcval"/> between -1 and 1, and then converts to <see cref="T:System.Int16"/>.
            </summary>
            <param name="srcval"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.ConvertScaled(System.Single)">
            <summary>
            Clamps the specified <paramref name="srcval"/> between -32768.0f and 32767.0f, and then converts to <see cref="T:System.Int16"/>.
            </summary>
            <param name="srcval"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm24Converter">
            <summary>
            Converts samples to 24-bit PCM.
            </summary>
            <seealso cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm24Converter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},System.Boolean,Shamisen.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm24Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm24Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm24Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm24Converter"/> does the 24-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm24Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter">
            <summary>
            Converts samples to 32-bit PCM.
            </summary>
            <seealso cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},System.Boolean,Shamisen.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter"/> does the 32-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Convert(System.Single)">
            <summary>
            Clamps the specified <paramref name="srcval"/> between -1 and 1, and then converts to <see cref="T:System.Int32"/>.<br/>
            Note that the value >= 1.0f will be converted to <see cref="F:System.Int32.MaxValue"/> instead of 0 or 2147483520 in order to avoid overflows and quantization noises.
            </summary>
            <param name="srcval"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter.ConvertScaled(System.Single)">
            <summary>
            Clamps the specified <paramref name="srcval"/> between -2147483648.0f and 2147483648.0f, and then converts to <see cref="T:System.Int32"/>.<br/>
            Note that the value >= 1.0f will be converted to <see cref="F:System.Int32.MaxValue"/> instead of 0 or 2147483520 in order to avoid overflows and quantization noises.
            </summary>
            <param name="srcval"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter">
            <summary>
            Converts samples to 8-bit PCM.
            </summary>
            <seealso cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter.AccuracyMode"/> when <c>true</c>.</param>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter"/> does the 8-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter.Convert(System.Single)">
            <summary>
            Clamps the specified <paramref name="srcval"/> between -1 and 1, and then converts to <see cref="T:System.Byte"/>.
            </summary>
            <param name="srcval"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter.ConvertScaled(System.Single)">
            <summary>
            Clamps the specified <paramref name="srcval"/> between -32768.0f and 32767.0f, and then converts to <see cref="T:System.Byte"/>.
            </summary>
            <param name="srcval"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToPcm8Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase">
            <summary>
            Converts samples to wave data.
            </summary>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="F:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},Shamisen.IWaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            format
            </exception>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter">
            <summary>
            Converts 8-bit A-Law PCM to Sample.
            </summary>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.#ctor(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.ConvertALawToSingle(System.Byte)">
            <summary>
            Converts A-law value to <see cref="T:System.Single"/> value.<br/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.ConvertALawToInt16(System.Byte)">
            <summary>
            Converts A-law value to <see cref="T:System.Int16"/> value.<br/>
            Remains only for test uses.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.ALawToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter">
            <summary>
            Converts 32-bit IeeeFloat PCM to Sample.
            </summary>
            <seealso cref="T:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter.#ctor(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Float32ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter">
            <summary>
            Converts 8-bit Î¼-Law PCM to Sample.
            </summary>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter.#ctor(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.MuLawToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter">
            <summary>
            Converts 16-bit PCM to Sample.
            </summary>
            <seealso cref="T:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.#ctor(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat},Shamisen.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.ProcessNormalAvx2A(System.Span{System.Single},System.Span{System.Int16})">
            <summary>
            Tricky convert-and-subtract approach, witch the conversion is also done with trick.
            This one can be slightly faster than simple approach.
            </summary>
            <param name="dest"></param>
            <param name="wrote"></param>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter">
            <summary>
            Converts 24-bit PCM to Sample.
            </summary>
            <seealso cref="T:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.#ctor(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat},Shamisen.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter">
            <summary>
            Converts 32-bit PCM to Sample.
            </summary>
            <seealso cref="T:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.#ctor(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat},Shamisen.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter">
            <summary>
            Converts 8-bit PCM to Sample.
            </summary>
            <seealso cref="T:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.#ctor(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.ProcessAvx2M(System.Span{System.Byte},System.Span{System.Single})">
            <summary>
            Straightforward convert-and-multiply approach.
            </summary>
            <param name="wrote"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.ProcessAvx2A(System.Span{System.Byte},System.Span{System.Single})">
            <summary>
            Tricky convert-and-subtract approach, witch the conversion is also done with trick.
            This one is slightly faster than simple approach.
            </summary>
            <param name="wrote"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter">
            <summary>
            Converts 32-bit Ranged Linear PCM to IEEE 754 Single Precision Floating-Point Sample.
            </summary>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter.#ctor(Shamisen.IReadableAudioSource{System.Int32,Shamisen.Formats.Int32RangedLinearPcmSampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter"/> class.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter.Source">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter.Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter.TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter.Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter.Read(System.Span{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.RangedPcm32ToSampleConverter.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase">
            <summary>
            Converts wave data to samples.
            </summary>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.#ctor(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat},Shamisen.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            format
            </exception>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="F:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.IO.DataFlow">
            <summary>
            Represents a flow kind of audio data.
            </summary>
        </member>
        <member name="F:Shamisen.IO.DataFlow.None">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:Shamisen.IO.DataFlow.Render">
            <summary>
            Output.
            </summary>
        </member>
        <member name="F:Shamisen.IO.DataFlow.Capture">
            <summary>
            Input.
            </summary>
        </member>
        <member name="T:Shamisen.IO.IPlaybackController">
            <summary>
            Defines a base infrastructure of playback controller.
            </summary>
        </member>
        <member name="M:Shamisen.IO.IPlaybackController.Play">
            <summary>
            Starts the audio playback.
            </summary>
        </member>
        <member name="M:Shamisen.IO.IPlaybackController.Pause">
            <summary>
            Pauses the audio playback.
            </summary>
        </member>
        <member name="M:Shamisen.IO.IPlaybackController.Resume">
            <summary>
            Resumes the audio playback.
            </summary>
        </member>
        <member name="M:Shamisen.IO.IPlaybackController.Stop">
            <summary>
            Stops the audio playback.
            </summary>
        </member>
        <member name="P:Shamisen.IO.IPlaybackController.PlaybackState">
            <summary>
            Gets the state of the playback.
            </summary>
            <value>
            The state of the playback.
            </value>
        </member>
        <member name="T:Shamisen.IO.IRecordingController">
            <summary>
            Defines a base infrastructure of a sound recording controller.
            </summary>
        </member>
        <member name="M:Shamisen.IO.IRecordingController.Start">
            <summary>
            Starts recording.
            </summary>
        </member>
        <member name="M:Shamisen.IO.IRecordingController.Stop">
            <summary>
            Stops recording.
            </summary>
        </member>
        <member name="P:Shamisen.IO.IRecordingController.RecordingState">
            <summary>
            Gets the state of the recording.
            </summary>
            <value>
            The state of the recording.
            </value>
        </member>
        <member name="T:Shamisen.IO.PlaybackState">
            <summary>
            Represents a state of playback.
            </summary>
        </member>
        <member name="F:Shamisen.IO.PlaybackState.NotInitialized">
            <summary>
            The output is not initialized
            </summary>
        </member>
        <member name="F:Shamisen.IO.PlaybackState.Stopped">
            <summary>
            The playback is stopped.
            </summary>
        </member>
        <member name="F:Shamisen.IO.PlaybackState.Playing">
            <summary>
            The playback is running.
            </summary>
        </member>
        <member name="F:Shamisen.IO.PlaybackState.Paused">
            <summary>
            The playback is paused.
            </summary>
        </member>
        <member name="T:Shamisen.IO.RecordingState">
            <summary>
            Represents a state of recording.
            </summary>
        </member>
        <member name="F:Shamisen.IO.RecordingState.Stopped">
            <summary>
            The recording is stopped.
            </summary>
        </member>
        <member name="F:Shamisen.IO.RecordingState.Recording">
            <summary>
            The recording is in progress.
            </summary>
        </member>
        <member name="T:Shamisen.IAudioSink`2">
            <summary>
            Defines a base infrastructure for writing audio data.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:Shamisen.IAudioSink`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="T:Shamisen.IAudioSource`2">
            <summary>
            Defines a base infrastructure for all audio sources.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:Shamisen.IAudioSource`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.IAudioSource`2.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.
            </value>
        </member>
        <member name="P:Shamisen.IAudioSource`2.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.IAudioSource`2.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.IAudioSource`2.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.IAudioSource`2.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="T:Shamisen.IDataSink`1">
            <summary>
            Defines a base infrastructure for writing data.
            </summary>
            <typeparam name="TSample">The type of writing data.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:Shamisen.IDataSink`1.AsyncWriteSupport">
            <summary>
            Gets the asynchronous write support.
            </summary>
            <value>
            The asynchronous write support.
            </value>
        </member>
        <member name="P:Shamisen.IDataSink`1.CurrentSize">
            <summary>
            Gets the current size of written data.
            </summary>
            <value>
            The current size of written data.
            </value>
        </member>
        <member name="P:Shamisen.IDataSink`1.RemainingSpace">
            <summary>
            Gets the remaining space of this <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <value>
            The remaining space.
            </value>
        </member>
        <member name="P:Shamisen.IDataSink`1.MaxSize">
            <summary>
            Gets the maximum size of this <see cref="T:Shamisen.IDataSink`1"/>.<br/>
            The <see langword="null"/> means that maximum size is either not available, beyond <see cref="F:System.UInt64.MaxValue"/>, or infinity.
            </summary>
            <value>
            The maximum size.
            </value>
        </member>
        <member name="P:Shamisen.IDataSink`1.Position">
            <summary>
            Gets the current position of this <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Shamisen.IDataSink`1.SkipSupport">
            <summary>
            Gets the skip support of this <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.IDataSink`1.SeekSupport">
            <summary>
            Gets the seek support of this <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="T:Shamisen.IDataSource`1">
            <summary>
            Defines a base infrastructure of a source of binary data.
            </summary>
        </member>
        <member name="P:Shamisen.IDataSource`1.ReadSupport">
            <summary>
            Gets the read support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
        </member>
        <member name="P:Shamisen.IDataSource`1.AsyncReadSupport">
            <summary>
            Gets the asynchronous read support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
        </member>
        <member name="P:Shamisen.IDataSource`1.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.IDataSource`1.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.IDataSource`1.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.IDataSource`1.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.IDataSource`1.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="T:Shamisen.ISkippableDataSource`1">
            <summary>
            Defines a base infrastructure of a source of binary data, which supports skipping.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <seealso cref="T:Shamisen.IDataSource`1" />
        </member>
        <member name="T:Shamisen.ISeekableDataSource`1">
            <summary>
            Defines a base infrastructure of a source of binary data, which supports seeking.
            </summary>
            <seealso cref="T:Shamisen.IDataSource`1" />
        </member>
        <member name="T:Shamisen.IReadableAudioSource`2">
            <summary>
            Defines a base infrastructure of a readable audio source.
            </summary>
            <typeparam name="TSample">The type of audio data.</typeparam>
            <typeparam name="TFormat">The format of audio data.</typeparam>
            <seealso cref="T:Shamisen.IAudioSource`2" />
        </member>
        <member name="T:Shamisen.IAsyncReadableAudioSource`2">
            <summary>
            Defines a base infrastructure of an asynchronously readable audio source.
            </summary>
            <typeparam name="TSample">The type of audio data.</typeparam>
            <typeparam name="TFormat">The format of audio data.</typeparam>
            <seealso cref="T:Shamisen.IAudioSource`2" />
        </member>
        <member name="T:Shamisen.IReadableDataSource`1">
            <summary>
            Defines a base infrastructure of a readable data source.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <seealso cref="T:Shamisen.IDataSource`1" />
            <seealso cref="T:Shamisen.IReadSupport`1" />
        </member>
        <member name="T:Shamisen.IAsyncReadableDataSource`1">
            <summary>
            Defines a base infrastructure of an asynchronously readable data source.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <seealso cref="T:Shamisen.IDataSource`1" />
            <seealso cref="T:Shamisen.IReadSupport`1" />
        </member>
        <member name="T:Shamisen.IReadSupport`1">
            <summary>
            Defines a base infrastructure of a read support of <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
        </member>
        <member name="M:Shamisen.IReadSupport`1.Read(System.Span{`0})">
            <summary>
            Reads the data to the specified <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="T:Shamisen.IAsyncReadSupport`1">
            <summary>
            Defines a base infrastructure of an asynchronous read support of <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
        </member>
        <member name="M:Shamisen.IAsyncReadSupport`1.ReadAsync(System.Memory{`0})">
            <summary>
            Reads the data to the specified buffer asynchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="T:Shamisen.ISampleSource">
            <summary>
            Defines a base infrastructure of a IEEE 754 Floating-Point PCM audio source.
            </summary>
            <seealso cref="T:Shamisen.IReadableAudioSource`2" />
        </member>
        <member name="T:Shamisen.IAsyncSampleSource">
            <summary>
            Defines a base infrastructure of a IEEE 754 Floating-Point PCM audio source.
            </summary>
            <seealso cref="T:Shamisen.IReadableAudioSource`2" />
        </member>
        <member name="T:Shamisen.ISampleAggregator">
            <summary>
            Defines a base infrastructure of a IEEE 754 Floating-Point PCM audio filter.
            </summary>
            <seealso cref="T:Shamisen.IAggregator`3" />
        </member>
        <member name="T:Shamisen.ISeekSupport">
            <summary>
            Defines a base infrastructure that contains seek support of <see cref="T:Shamisen.IAudioSource`2"/> or <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
        </member>
        <member name="M:Shamisen.ISeekSupport.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2"/> with the specified offset in frames.
            </summary>
            <param name="offset">The offset in frames.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Shamisen.ISeekSupport.SeekTo(System.UInt64)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2"/> to the specified index in frames.
            </summary>
            <param name="index">The index in frames.</param>
        </member>
        <member name="M:Shamisen.ISeekSupport.StepBack(System.UInt64)">
            <summary>
            Steps this data source the specified step back in frames.
            </summary>
            <param name="step">The number of frames to step back.</param>
        </member>
        <member name="M:Shamisen.ISeekSupport.SeekLast(System.UInt64)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2"/> to the specified index in frames from the end of stream.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:Shamisen.ISkipSupport">
            <summary>
            Defines a base infrastructure that contains skip support of <see cref="T:Shamisen.IAudioSource`2"/> or <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
        </member>
        <member name="M:Shamisen.ISkipSupport.Skip(System.UInt64)">
            <summary>
            Skips the source the specified step in frames.
            </summary>
            <param name="step">The number of frames to skip.</param>
        </member>
        <member name="T:Shamisen.IWaveSource">
            <summary>
            Defines a base infrastructure of a raw audio data source.
            </summary>
            <seealso cref="T:Shamisen.IReadableAudioSource`2" />
        </member>
        <member name="T:Shamisen.IAsyncWaveSource">
            <summary>
            Defines a base infrastructure of an asynchronously-readable raw audio data source.
            </summary>
            <seealso cref="T:Shamisen.IAsyncReadableAudioSource`2" />
        </member>
        <member name="T:Shamisen.IWaveAggregator">
            <summary>
            Defines a base infrastructure of a raw audio data filter.
            </summary>
            <seealso cref="T:Shamisen.IAggregator`3" />
        </member>
        <member name="T:Shamisen.Data.Binary.DataReaderExtensions">
            <summary>
            Provides some functions that helps you to analyze data input binary.
            </summary>
            <seealso cref="T:Shamisen.IDataSource`1" />
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadByte(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single <see cref="T:System.Byte"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadSignedByte(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single <see cref="T:System.SByte"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadUInt16LittleEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadUInt16BigEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadInt16LittleEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.Int16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadInt16BigEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.Int16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadUInt32LittleEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadUInt32BigEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadInt32LittleEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.Int32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadInt32BigEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.Int32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadUInt64LittleEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadUInt64BigEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadInt64LittleEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.Int64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadInt64BigEndian(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.Int64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadStruct``1(Shamisen.IDataSource{System.Byte})">
            <summary>
            Reads single <typeparamref name="TStruct"/> value from <paramref name="dataReader"/>.
            </summary>
            <typeparam name="TStruct">The type to read.</typeparam>
            <param name="dataReader">The data reader.</param>
            <returns>The deserialized <typeparamref name="TStruct"/> value.</returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadByte(Shamisen.IDataSource{System.Byte},System.Byte@)">
            <summary>
            Reads single <see cref="T:System.Byte"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadSignedByte(Shamisen.IDataSource{System.Byte},System.SByte@)">
            <summary>
            Reads single <see cref="T:System.SByte"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadUInt16LittleEndian(Shamisen.IDataSource{System.Byte},System.UInt16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadUInt16BigEndian(Shamisen.IDataSource{System.Byte},System.UInt16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadInt16LittleEndian(Shamisen.IDataSource{System.Byte},System.Int16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadInt16BigEndian(Shamisen.IDataSource{System.Byte},System.Int16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadUInt32LittleEndian(Shamisen.IDataSource{System.Byte},System.UInt32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadUInt32BigEndian(Shamisen.IDataSource{System.Byte},System.UInt32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadInt32LittleEndian(Shamisen.IDataSource{System.Byte},System.Int32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadInt32BigEndian(Shamisen.IDataSource{System.Byte},System.Int32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadUInt64LittleEndian(Shamisen.IDataSource{System.Byte},System.UInt64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadUInt64BigEndian(Shamisen.IDataSource{System.Byte},System.UInt64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadInt64LittleEndian(Shamisen.IDataSource{System.Byte},System.Int64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadInt64BigEndian(Shamisen.IDataSource{System.Byte},System.Int64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="read">The value read.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ReadAll``1(Shamisen.IDataSource{``0},System.Span{``0})">
            <summary>
            Reads some data from <paramref name="dataSource"/> to fill <paramref name="buffer"/>.
            </summary>
            <typeparam name="T">Type of buffer data.</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.TryReadAll``1(Shamisen.IDataSource{``0},System.Span{``0})">
            <summary>
            Tries to read some data from <paramref name="dataSource"/> to fill <paramref name="buffer"/> while the <paramref name="dataSource"/> doesn't run out of data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataSource">The data source.</param>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.CheckRead``1(Shamisen.IDataSource{``0},System.Span{``0})">
            <summary>
            Reads some data from <paramref name="dataSource"/> to <paramref name="buffer"/>.
            </summary>
            <typeparam name="T">Type of buffer data.</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Binary.DataReaderExtensions.ThrowWhenInsufficient(Shamisen.ReadResult,System.Int32,System.String)">
            <summary>
            Throws an exception when the read data is insufficient.
            </summary>
            <param name="readResult">The read result.</param>
            <param name="lengthRequired">The least length required.</param>
            <param name="situation">The situation of reading some required data.</param>
        </member>
        <member name="T:Shamisen.Data.DataSinkUtils">
            <summary>
            Contains some utility functions for <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <summary>
            Contains some utility functions for <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteUInt16LittleEndian(Shamisen.IDataSink{System.Byte},System.UInt16)">
            <summary>
            Writes the <see cref="T:System.UInt16"/> value to the specified <paramref name="sink"/> with little endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteUInt16BigEndian(Shamisen.IDataSink{System.Byte},System.UInt16)">
            <summary>
            Writes the <see cref="T:System.UInt16"/> value to the specified <paramref name="sink"/> with BIG endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteInt16LittleEndian(Shamisen.IDataSink{System.Byte},System.Int16)">
            <summary>
            Writes the <see cref="T:System.Int16"/> value to the specified <paramref name="sink"/> with little endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteInt16BigEndian(Shamisen.IDataSink{System.Byte},System.Int16)">
            <summary>
            Writes the <see cref="T:System.Int16"/> value to the specified <paramref name="sink"/> with BIG endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteUInt32LittleEndian(Shamisen.IDataSink{System.Byte},System.UInt32)">
            <summary>
            Writes the <see cref="T:System.UInt32"/> value to the specified <paramref name="sink"/> with little endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteUInt32BigEndian(Shamisen.IDataSink{System.Byte},System.UInt32)">
            <summary>
            Writes the <see cref="T:System.UInt32"/> value to the specified <paramref name="sink"/> with BIG endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteInt32LittleEndian(Shamisen.IDataSink{System.Byte},System.Int32)">
            <summary>
            Writes the <see cref="T:System.Int32"/> value to the specified <paramref name="sink"/> with little endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteInt32BigEndian(Shamisen.IDataSink{System.Byte},System.Int32)">
            <summary>
            Writes the <see cref="T:System.Int32"/> value to the specified <paramref name="sink"/> with BIG endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteUInt64LittleEndian(Shamisen.IDataSink{System.Byte},System.UInt64)">
            <summary>
            Writes the <see cref="T:System.UInt64"/> value to the specified <paramref name="sink"/> with little endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteUInt64BigEndian(Shamisen.IDataSink{System.Byte},System.UInt64)">
            <summary>
            Writes the <see cref="T:System.UInt64"/> value to the specified <paramref name="sink"/> with BIG endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteInt64LittleEndian(Shamisen.IDataSink{System.Byte},System.Int64)">
            <summary>
            Writes the <see cref="T:System.Int64"/> value to the specified <paramref name="sink"/> with little endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteInt64BigEndian(Shamisen.IDataSink{System.Byte},System.Int64)">
            <summary>
            Writes the <see cref="T:System.Int64"/> value to the specified <paramref name="sink"/> with BIG endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteByte(Shamisen.IDataSink{System.Byte},System.Byte)">
            <summary>
            Writes the byte to the specified <paramref name="sink"/>.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteSByte(Shamisen.IDataSink{System.Byte},System.SByte)">
            <summary>
            Writes the <see cref="T:System.SByte"/> value to the specified <paramref name="sink"/>.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteSByte(Shamisen.IDataSink{System.Byte},Shamisen.OffsetSByte)">
            <summary>
            Writes the <see cref="T:Shamisen.OffsetSByte"/> value to the specified <paramref name="sink"/>.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteSingleLittleEndian(Shamisen.IDataSink{System.Byte},System.Single)">
            <summary>
            Writes the <see cref="T:System.Single"/> value to the specified <paramref name="sink"/> with little endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteSingleBigEndian(Shamisen.IDataSink{System.Byte},System.Single)">
            <summary>
            Writes the <see cref="T:System.Single"/> value to the specified <paramref name="sink"/> with BIG endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteDoubleLittleEndian(Shamisen.IDataSink{System.Byte},System.Double)">
            <summary>
            Writes the <see cref="T:System.Single"/> value to the specified <paramref name="sink"/> with little endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Shamisen.Data.DataSinkUtils.WriteDoubleBigEndian(Shamisen.IDataSink{System.Byte},System.Double)">
            <summary>
            Writes the <see cref="T:System.Single"/> value to the specified <paramref name="sink"/> with BIG endian.
            </summary>
            <param name="sink">The sink to write to.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="T:Shamisen.Data.BufferingException">
            <summary>
            The exception that is thrown when a reader of <see cref="T:Shamisen.IDataSource`1"/> has ran out of buffered data.
            </summary>
            <seealso cref="T:System.IO.IOException" />
        </member>
        <member name="M:Shamisen.Data.BufferingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.BufferingException"/> class.
            </summary>
        </member>
        <member name="M:Shamisen.Data.BufferingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.BufferingException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
        </member>
        <member name="M:Shamisen.Data.BufferingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.BufferingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Shamisen.Data.BufferingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.BufferingException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:Shamisen.Data.DataCache`1">
            <summary>
            Caches data into managed memory region.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Shamisen.Data.DataCache`1.BufferInstance.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Shamisen.Data.DataCache`1.BytesWritten">
            <summary>
            Gets the bytes written inside internal buffer.
            </summary>
            <value>
            The bytes written.
            </value>
        </member>
        <member name="P:Shamisen.Data.DataCache`1.ReadPosition">
            <summary>
            Gets or sets the current reading position.
            </summary>
            <value>
            The read position.
            </value>
        </member>
        <member name="P:Shamisen.Data.DataCache`1.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.Data.DataCache`1.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.Data.DataCache`1.Shamisen#IDataSource{TSample}#Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.Data.DataCache`1.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Data.DataCache`1.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Data.DataCache`1.ReadSupport">
            <summary>
            Gets the read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="P:Shamisen.Data.DataCache`1.AsyncReadSupport">
            <summary>
            Gets the asynchronous read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.DataCache`1"/> class.
            </summary>
            <param name="allocationUnit">The allocation unit.</param>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.Read(System.Span{`0})">
            <summary>
            Reads the data to the specified destination.
            </summary>
            <param name="buffer">The destination.</param>
            <returns>
            The number of <typeparamref name="TSample"/>s read from this <see cref="T:Shamisen.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.Clear(System.Boolean)">
            <summary>
            Clears this <see cref="T:Shamisen.Data.DataCache`1"/>.
            </summary>
            <param name="fillWithDefault">The value which indicates whether this must fill the internal buffer with default value, or not.</param>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.ReadAsync(System.Memory{`0})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <see cref="T:System.Byte" />s read from this <see cref="T:Shamisen.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.Write(System.ReadOnlySpan{`0})">
            <summary>
            Writes the data inside specified buffer to this instance.
            </summary>
            <param name="buffer">The data buffer.</param>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.CopyTo(Shamisen.IDataSink{`0})">
            <summary>
            Copies all of the content of <see cref="T:Shamisen.Data.DataCache`1"/> to the specified <paramref name="sink"/>.
            </summary>
            <param name="sink">The sink.</param>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.WriteAsync(System.ReadOnlyMemory{`0})">
            <summary>
            Asynchronously writes the data inside specified buffer to this instance.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the specified offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.SeekTo(System.UInt64)">
            <summary>
            Seeks this data source to the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.Skip(System.UInt64)">
            <summary>
            Skips this data source the specified number of elements to skip.
            </summary>
            <param name="step">The number of elements to skip.</param>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.StepBack(System.UInt64)">
            <summary>
            Steps this data source the specified step back in frames.
            </summary>
            <param name="step">The number of frames to step back.</param>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.SeekLast(System.UInt64)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2"/> to the specified index in frames from the end of stream.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Shamisen.Data.DataCache`1"/> class.
            </summary>
        </member>
        <member name="M:Shamisen.Data.DataCache`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Data.DataSourceUtils">
            <summary>
            Contains some utility functions for <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Data.DataSourceUtils.Preload``1(Shamisen.IDataSource{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.PreloadDataBuffer`1"/> class.
            </summary>
            <param name="source">The data source.</param>
            <param name="initialBlockSize">
            The size of initial buffer in Frames(independent on the number of channel and the type of sample).<br/>
            The buffer is automatically extended if the internal buffer is smaller than the size of reading buffers.
            </param>
            <param name="internalBufferNumber">The number of internal buffer.</param>
            <param name="allowWaitForRead">The value which indicates whether the <see cref="T:Shamisen.Data.PreloadDataBuffer`1"/> should wait for another sample block or not.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialBlockSize"/> should be larger than or equals to 2048.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="internalBufferNumber"/> should be larger than or equals to 16.</exception>
        </member>
        <member name="T:Shamisen.Data.DummyDataSource`1">
            <summary>
            Does nothing when
            </summary>
        </member>
        <member name="P:Shamisen.Data.DummyDataSource`1.ReadSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Data.DummyDataSource`1.AsyncReadSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Data.DummyDataSource`1.Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Data.DummyDataSource`1.TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Data.DummyDataSource`1.Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Data.DummyDataSource`1.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Data.DummyDataSource`1.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Data.DummyDataSource`1.Read(System.Span{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Data.DummyDataSource`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.Data.OffsetSeekableDataSink`1">
            <summary>
            Writes some data with specified offset.
            </summary>
        </member>
        <member name="M:Shamisen.Data.OffsetSeekableDataSink`1.#ctor(Shamisen.IDataSink{`0},System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.OffsetSeekableDataSink`1"/> class.
            </summary>
            <param name="sink">The sink.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:Shamisen.Data.OffsetSeekableDataSink`1.Offset">
            <summary>
            Gets the offset.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:Shamisen.Data.OffsetSeekableDataSink`1.AsyncWriteSupport">
            <summary>
            Gets the asynchronous write support.
            </summary>
            <value>
            The asynchronous write support.
            </value>
        </member>
        <member name="P:Shamisen.Data.OffsetSeekableDataSink`1.CurrentSize">
            <summary>
            Gets the current size of written data.
            </summary>
            <value>
            The current size of written data.
            </value>
        </member>
        <member name="P:Shamisen.Data.OffsetSeekableDataSink`1.RemainingSpace">
            <summary>
            Gets the remaining space of this <see cref="T:Shamisen.IDataSink`1" />.
            </summary>
            <value>
            The remaining space.
            </value>
        </member>
        <member name="P:Shamisen.Data.OffsetSeekableDataSink`1.MaxSize">
            <summary>
            Gets the maximum size of this <see cref="T:Shamisen.IDataSink`1" />.<br />
            The <see langword="null" /> means that maximum size is either not available, beyond <see cref="F:System.UInt64.MaxValue" />, or infinity.
            </summary>
            <value>
            The maximum size.
            </value>
        </member>
        <member name="P:Shamisen.Data.OffsetSeekableDataSink`1.Position">
            <summary>
            Gets the current position of this <see cref="T:Shamisen.IDataSink`1" />.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Shamisen.Data.OffsetSeekableDataSink`1.SkipSupport">
            <summary>
            Gets the skip support of this <see cref="T:Shamisen.IDataSink`1" />.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Data.OffsetSeekableDataSink`1.SeekSupport">
            <summary>
            Gets the seek support of this <see cref="T:Shamisen.IDataSink`1" />.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Data.OffsetSeekableDataSink`1.Sink">
            <summary>
            Gets the sink.
            </summary>
            <value>
            The sink.
            </value>
        </member>
        <member name="M:Shamisen.Data.OffsetSeekableDataSink`1.Write(System.ReadOnlySpan{`0})">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The writing data.</param>
        </member>
        <member name="M:Shamisen.Data.OffsetSeekableDataSink`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Data.Parsing.BufferedBinaryParser">
            <summary>
            Parses binary data with internal buffer.<br/>
            It is more efficient than <see cref="T:Shamisen.Data.Binary.DataReaderExtensions"/>'s methods.<br/>
            The <see cref="T:Shamisen.Data.Parsing.BufferedBinaryParser"/> won't <see cref="M:System.IDisposable.Dispose"/> the <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source"/> even if the parser gets disposed.
            </summary>
            <seealso cref="T:Shamisen.IDataSource`1" />
        </member>
        <member name="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="F:Shamisen.Data.Parsing.BufferedBinaryParser.MinimumBufferLength">
            <summary>
            The minimum buffer length
            </summary>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.#ctor(Shamisen.IReadableDataSource{System.Byte},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.Parsing.BufferedBinaryParser"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="bufferLength">The length of internal buffer, which must be larger than or equals to <see cref="F:Shamisen.Data.Parsing.BufferedBinaryParser.MinimumBufferLength"/>.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Shamisen.Data.Parsing.BufferedBinaryParser.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in bytes.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in bytes.
            </value>
        </member>
        <member name="P:Shamisen.Data.Parsing.BufferedBinaryParser.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.
            </value>
        </member>
        <member name="P:Shamisen.Data.Parsing.BufferedBinaryParser.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.
            </value>
        </member>
        <member name="P:Shamisen.Data.Parsing.BufferedBinaryParser.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Data.Parsing.BufferedBinaryParser.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Data.Parsing.BufferedBinaryParser.ReadSupport">
            <summary>
            Gets the read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="P:Shamisen.Data.Parsing.BufferedBinaryParser.AsyncReadSupport">
            <summary>
            Gets the asynchronous read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.Read(System.Span{System.Byte})">
            <summary>
            Reads the data to the specified destination.
            </summary>
            <param name="buffer">The destination.</param>
            <returns>
            The number of <see cref="T:System.Byte"/>s read from this <see cref="T:Shamisen.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.ReadAsync(System.Memory{System.Byte})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="buffer">The destination.</param>
            <returns>
            The number of <see cref="T:System.Byte"/>s read from this <see cref="T:Shamisen.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseByte(System.Byte@)">
            <summary>
            Reads single <see cref="T:System.Byte" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseInt16BigEndian(System.Int16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int16" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseInt16LittleEndian(System.Int16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int16" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseInt32BigEndian(System.Int32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int32" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseInt32LittleEndian(System.Int32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int32" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseInt64BigEndian(System.Int64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int64" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseInt64LittleEndian(System.Int64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int64" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseSignedByte(System.SByte@)">
            <summary>
            Reads single <see cref="T:System.SByte" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseUInt16BigEndian(System.UInt16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt16" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseUInt16LittleEndian(System.UInt16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt16" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseUInt32BigEndian(System.UInt32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt32" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseUInt32LittleEndian(System.UInt32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt32" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseUInt64BigEndian(System.UInt64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt64" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseUInt64LittleEndian(System.UInt64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt64" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseDoubleLittleEndian(System.Double@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Double" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseDoudleBigEndian(System.Double@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Double" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseSingleLittleEndian(System.Single@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Single" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.BufferedBinaryParser.TryParseSingleBigEndian(System.Single@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Single" /> from <see cref="P:Shamisen.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Data.Parsing.IBinaryParser">
            <summary>
            Defines a base infrastructure to parse binary data from <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Data.Parsing.IBinaryParser.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseByte(System.Byte@)">
            <summary>
            Reads single <see cref="T:System.Byte"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseSignedByte(System.SByte@)">
            <summary>
            Reads single <see cref="T:System.SByte"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseUInt16LittleEndian(System.UInt16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt16"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseUInt16BigEndian(System.UInt16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt16"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseInt16LittleEndian(System.Int16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int16"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseInt16BigEndian(System.Int16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int16"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseUInt32LittleEndian(System.UInt32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt32"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseUInt32BigEndian(System.UInt32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt32"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseInt32LittleEndian(System.Int32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int32"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseInt32BigEndian(System.Int32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int32"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseUInt64LittleEndian(System.UInt64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt64"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseUInt64BigEndian(System.UInt64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt64"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseInt64LittleEndian(System.Int64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int64"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseInt64BigEndian(System.Int64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int64"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseDoubleLittleEndian(System.Double@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Double"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseDoudleBigEndian(System.Double@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Double"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseSingleLittleEndian(System.Single@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Single"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.Parsing.IBinaryParser.TryParseSingleBigEndian(System.Single@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Single"/> from <see cref="P:Shamisen.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Data.PreloadDataBuffer`1">
            <summary>
            Buffers the data asynchronously like YouTube does.<br/>
            It reads a little more than required, and prevents waiting for IOs.
            </summary>
        </member>
        <member name="P:Shamisen.Data.PreloadDataBuffer`1.AllowWaitForRead">
            <summary>
            Gets or sets the value which indicates whether the <see cref="T:Shamisen.Data.PreloadDataBuffer`1"/> should wait for another sample block or not.
            </summary>
        </member>
        <member name="P:Shamisen.Data.PreloadDataBuffer`1.ReadSupport">
            <summary>
            Gets the read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="M:Shamisen.Data.PreloadDataBuffer`1.#ctor(Shamisen.IDataSource{`0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.PreloadDataBuffer`1"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="initialBlockSize">
            The size of initial buffer in Frames(independent on the number of channel and the type of sample).<br/>
            The buffer is automatically extended if the internal buffer is smaller than the size of reading buffers.
            </param>
            <param name="internalBufferNumber">The number of internal buffer.</param>
            <param name="allowWaitForRead">The value which indicates whether the <see cref="T:Shamisen.Data.PreloadDataBuffer`1"/> should wait for another sample block or not.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialBlockSize"/> should be larger than or equals to 2048.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="internalBufferNumber"/> should be larger than or equals to 16.</exception>
        </member>
        <member name="M:Shamisen.Data.PreloadDataBuffer`1.Read(System.Span{`0})">
            <summary>
            Reads the data to the specified buffer.
            </summary>
            <param name="destination">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Data.PreloadDataBuffer`1.ReadAsync(System.Memory{`0})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <typeparamref name="TSample" />s read from this <see cref="T:Shamisen.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:Shamisen.Data.PreloadDataBuffer`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Data.PreloadDataBuffer`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Data.SampleDataSource`2">
            <summary>
            Translates calls between <see cref="T:Shamisen.IDataSource`1"/> and <see cref="T:Shamisen.IReadableAudioSource`2"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="M:Shamisen.Data.SampleDataSource`2.#ctor(Shamisen.IReadableAudioSource{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.SampleDataSource`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Shamisen.Data.SampleDataSource`2.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.Data.SampleDataSource`2.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.Data.SampleDataSource`2.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.Data.SampleDataSource`2.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Data.SampleDataSource`2.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Data.SampleDataSource`2.ReadSupport">
            <summary>
            Gets the read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="P:Shamisen.Data.SampleDataSource`2.AsyncReadSupport">
            <summary>
            Gets the asynchronous read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="M:Shamisen.Data.SampleDataSource`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Data.StreamDataSink">
            <summary>
            Writes data to <see cref="T:System.IO.Stream"/>.
            </summary>
            <seealso cref="T:Shamisen.IDataSink`1" />
        </member>
        <member name="P:Shamisen.Data.StreamDataSink.PropagateDispose">
            <summary>
            Gets a value indicating whether the instance have to propagate <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
            <value>
              <c>true</c> if  the instance have to propagate <see cref="M:System.IDisposable.Dispose"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Shamisen.Data.StreamDataSink.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.StreamDataSink"/> class.
            </summary>
            <param name="destination">The destination.</param>
            <param name="propagateDispose">The value indicating whether the instance have to propagate <see cref="M:System.IDisposable.Dispose"/>.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Shamisen.Data.StreamDataSink.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.StreamDataSink"/> class.
            </summary>
            <param name="destination">The destination.</param>
            <param name="propagateDispose">The value indicating whether the instance have to propagate <see cref="M:System.IDisposable.Dispose"/>.</param>
            <param name="disableSeek">The value which indicates whether the instance have to disable seek supports.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Shamisen.Data.StreamDataSink.AsyncWriteSupport">
            <summary>
            Gets the asynchronous write support.
            </summary>
            <value>
            The asynchronous write support.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSink.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IDataSink`1" /> in number of <see cref="T:System.Byte"/>s.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSink`1"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IDataSink`1" /> in number of <see cref="T:System.Byte"/>s.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSink.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSink.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSink.CurrentSize">
            <summary>
            Gets the current size of written data.
            </summary>
            <value>
            The current size of written data.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSink.RemainingSpace">
            <summary>
            Gets the remaining space of this <see cref="T:Shamisen.IDataSink`1" />.
            </summary>
            <value>
            The remaining space.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSink.MaxSize">
            <summary>
            Gets the maximum size of this <see cref="T:Shamisen.IDataSink`1" />.<br />
            The <see langword="null" /> means that maximum size is either not available, beyond <see cref="F:System.UInt64.MaxValue" />, or infinity.
            </summary>
            <value>
            The maximum size.
            </value>
        </member>
        <member name="M:Shamisen.Data.StreamDataSink.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The writing data.</param>
        </member>
        <member name="M:Shamisen.Data.StreamDataSink.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Data.StreamDataSource">
            <summary>
            Reads data from <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Data.StreamDataSource.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.StreamDataSource"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="P:Shamisen.Data.StreamDataSource.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in bytes.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in bytes.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSource.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSource.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IDataSource`1" /> in bytes.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSource.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSource.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Data.StreamDataSource.ReadSupport">
            <summary>
            Gets the read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="P:Shamisen.Data.StreamDataSource.AsyncReadSupport">
            <summary>
            Gets the asynchronous read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="M:Shamisen.Data.StreamDataSource.Read(System.Span{System.Byte})">
            <summary>
            Reads the data to the specified destination.
            </summary>
            <param name="buffer">The destination.</param>
            <returns>The number of <see cref="T:System.Byte"/>s read from this <see cref="T:Shamisen.IDataSource`1"/>.</returns>
        </member>
        <member name="M:Shamisen.Data.StreamDataSource.ReadAsync(System.Memory{System.Byte})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="buffer">The destination.</param>
            <returns>The number of <see cref="T:System.Byte"/>s read from this <see cref="T:Shamisen.IDataSource`1"/>.</returns>
        </member>
        <member name="M:Shamisen.Data.StreamDataSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Shamisen.Data.StreamSeekSupport.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2"/> with the specified offset in frames.
            </summary>
            <param name="offset">The offset in frames.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Shamisen.Data.StreamSeekSupport.SeekLast(System.UInt64)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2"/> to the specified index in frames from the end of stream.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Shamisen.Data.StreamSeekSupport.SeekTo(System.UInt64)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2"/> to the specified index in frames.
            </summary>
            <param name="index">The index in frames.</param>
        </member>
        <member name="M:Shamisen.Data.StreamSeekSupport.Skip(System.UInt64)">
            <summary>
            Skips the source the specified step in frames.
            </summary>
            <param name="step">The number of frames to skip.</param>
        </member>
        <member name="M:Shamisen.Data.StreamSeekSupport.StepBack(System.UInt64)">
            <summary>
            Steps this data source the specified step back in frames.
            </summary>
            <param name="step">The number of frames to step back.</param>
        </member>
        <member name="T:Shamisen.Data.WaypointRweindingDataSource`1">
            <summary>
            Rewinds the data source to the previously-specified way-point if needed.
            </summary>
        </member>
        <member name="M:Shamisen.Data.WaypointRweindingDataSource`1.#ctor(Shamisen.IReadableDataSource{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Data.WaypointRweindingDataSource`1"/> class.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Shamisen.Data.WaypointRweindingDataSource`1.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IDataSource`1"/> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.Data.WaypointRweindingDataSource`1.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.Data.WaypointRweindingDataSource`1.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IDataSource`1"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IDataSource`1" /> in number of <typeparamref name="TSample"/>.
            </value>
        </member>
        <member name="P:Shamisen.Data.WaypointRweindingDataSource`1.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Data.WaypointRweindingDataSource`1.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IDataSource`1"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Data.WaypointRweindingDataSource`1.ReadSupport">
            <summary>
            Gets the read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="P:Shamisen.Data.WaypointRweindingDataSource`1.AsyncReadSupport">
            <summary>
            Gets the asynchronous read support of the <see cref="T:Shamisen.IDataSource`1" />.
            </summary>
        </member>
        <member name="M:Shamisen.Data.WaypointRweindingDataSource`1.Pin">
            <summary>
            Pins a way-point to this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.WaypointRweindingDataSource`1.UnPin">
            <summary>
            Unpins a way-point to this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.WaypointRweindingDataSource`1.Rewind">
            <summary>
            Rewinds this instance to the way-point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Data.WaypointRweindingDataSource`1.Read(System.Span{`0})">
            <summary>
            Reads the data to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Data.WaypointRweindingDataSource`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.DataUtils">
            <summary>
            Provides some extensions for <see cref="T:Shamisen.IDataSource`1"/>s.
            </summary>
        </member>
        <member name="M:Shamisen.DataUtils.SkipWithFallback``1(Shamisen.IDataSource{``0},System.UInt64)">
            <summary>
            Skips this data source the specified number of elements to skip.
            </summary>
            <param name="dataSource"></param>
            <param name="numberOfElementsToSkip">The number of elements to skip.</param>
        </member>
        <member name="M:Shamisen.DataUtils.Read``1(Shamisen.IDataSource{``0},System.Span{``0})">
            <summary>
            Reads the specified data source.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="span">The span.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.IAsyncWriteSupport`1">
            <summary>
            Defines a base infrastructure of an asynchronous write support of <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
        </member>
        <member name="M:Shamisen.IAsyncWriteSupport`1.WriteAsync(System.ReadOnlyMemory{`0})">
            <summary>
            Writes the specified data asynchronously.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.IWriteSupport`1">
            <summary>
            Defines a base infrastructure of a write support of <see cref="T:Shamisen.IDataSink`1"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
        </member>
        <member name="M:Shamisen.IWriteSupport`1.Write(System.ReadOnlySpan{`0})">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The writing data.</param>
        </member>
        <member name="T:Shamisen.ReadAsyncFunc`1">
            <summary>
            Encapsulates a method that asynchronously fills given <see cref="T:System.Memory`1"/> and returns how many <typeparamref name="TSample"/>s are filled.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <param name="buffer">The destination buffer.</param>
            <returns>The reading task that returns the length of buffer filled.</returns>
        </member>
        <member name="T:Shamisen.ReadFunc`1">
            <summary>
            Encapsulates a method that fills given <see cref="T:System.Span`1"/> and returns how many <typeparamref name="TSample"/>s are filled.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <param name="buffer">The destination buffer.</param>
            <returns>The length of buffer filled.</returns>
        </member>
        <member name="T:Shamisen.ReadWithParameterAsyncFunc`2">
            <summary>
            Encapsulates a method that asynchronously fills given <see cref="T:System.Memory`1"/> and returns how many <typeparamref name="TSample"/>s are filled.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <typeparam name="TParam">The type of parameter to call the method with.</typeparam>
            <param name="buffer">The destination buffer.</param>
            <param name="parameter">The parameter to call the method with.</param>
            <returns>The reading task that returns the length of buffer filled.</returns>
        </member>
        <member name="T:Shamisen.ReadWithParameterFunc`2">
            <summary>
            Encapsulates a method that fills given <see cref="T:System.Span`1"/> and returns how many <typeparamref name="TSample"/>s are filled.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <typeparam name="TParam">The type of parameter to call the method with.</typeparam>
            <param name="buffer">The destination buffer.</param>
            <param name="parameter">The parameter to call the method with.</param>
            <returns>The length of buffer filled.</returns>
        </member>
        <member name="T:Shamisen.WriteAction`1">
            <summary>
            Encapsulates a method that writes the given <see cref="T:System.ReadOnlySpan`1"/> into the destination.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <param name="data">The data to write.</param>
        </member>
        <member name="T:Shamisen.WriteAsyncFunc`1">
            <summary>
            Encapsulates a method that asynchronously writes the given <see cref="T:System.ReadOnlyMemory`1"/> into the destination.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <param name="data">The data to write.</param>
            <returns>The writing task.</returns>
        </member>
        <member name="T:Shamisen.WriteWithParameterAction`2">
            <summary>
            Encapsulates a method that writes the given <see cref="T:System.ReadOnlySpan`1"/> into the destination.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <typeparam name="TParam">The type of parameter to call the method with.</typeparam>
            <param name="data">The data to write.</param>
            <param name="parameter">The parameter to call the method with.</param>
        </member>
        <member name="T:Shamisen.WriteWithParameterAsyncFunc`2">
            <summary>
            Encapsulates a method that asynchronously writes the given <see cref="T:System.ReadOnlyMemory`1"/> into the destination.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <typeparam name="TParam">The type of parameter to call the method with.</typeparam>
            <param name="data">The data to write.</param>
            <param name="parameter">The parameter to call the method with.</param>
            <returns>The reading task that returns the length of buffer filled.</returns>
        </member>
        <member name="T:Shamisen.Filters.Attenuator">
            <summary>
            Modifies the velocity of <see cref="P:Shamisen.Filters.Attenuator.Source"/>
            </summary>
            <seealso cref="T:Shamisen.Filters.IAudioFilter`2" />
        </member>
        <member name="M:Shamisen.Filters.Attenuator.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.Attenuator"/> class.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Shamisen.Filters.Attenuator.Source">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Attenuator.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Attenuator.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Attenuator.Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Attenuator.TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Attenuator.Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Attenuator.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Attenuator.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Attenuator.Read(System.Span{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Attenuator.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Filters.Attenuator.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.Filters.BiQuadFilter">
            <summary>
            Filters audio signal with single Digital BiQuad Filter.
            </summary>
        </member>
        <member name="P:Shamisen.Filters.BiQuadFilter.AllowFusedMultiplyAddForPerformance">
            <summary>
            Gets the value which indicates whether the <see cref="T:Shamisen.Filters.BiQuadFilter"/> can alter results for speed, or not.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.BiQuadFilter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},Shamisen.Filters.BiQuadParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.BiQuadFilter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="parameter">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Shamisen.Filters.BiQuadFilter.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Shamisen.Filters.BiQuadFilter.Parameter">
            <summary>
            Gets the parameter.
            </summary>
            <value>
            The parameter.
            </value>
        </member>
        <member name="P:Shamisen.Filters.BiQuadFilter.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Shamisen.Filters.BiQuadFilter.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.BiQuadFilter.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.BiQuadFilter.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.BiQuadFilter.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.BiQuadFilter.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Filters.BiQuadFilter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadFilter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Filters.BiQuadFilter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Shamisen.Filters.BiQuadFilter"/> class.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.BiQuadFilter.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.Filters.BiQuadParameter">
            <summary>
            Represents a BiQuad filter parameters.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.BiQuadParameter"/> struct.
            </summary>
            <param name="b0">The b0.</param>
            <param name="b1">The b1.</param>
            <param name="b2">The b2.</param>
            <param name="a0">The a0.</param>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.BiQuadParameter"/> struct.
            </summary>
            <param name="b0">The b0.</param>
            <param name="b1">The b1.</param>
            <param name="b2">The b2.</param>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
        </member>
        <member name="F:Shamisen.Filters.BiQuadParameter.B">
            <summary>
            The normalized B parameters.
            </summary>
        </member>
        <member name="F:Shamisen.Filters.BiQuadParameter.A">
            <summary>
            The normalized A parameters.
            </summary>
        </member>
        <member name="F:Shamisen.Filters.BiQuadParameter.HalfLn2">
            <summary>
            The half Math.Log10(2)/Math.Log10(Math.E) with Bit-Exact representation.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateLPFParameter(System.Double,System.Double,System.Double)">
            <summary>
            Creates the LPF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="quality">The quality of LPF.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateHPFParameter(System.Double,System.Double,System.Double)">
            <summary>
            Creates the HPF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="quality">The quality of LPF.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateAPFParameter(System.Double,System.Double,System.Double)">
            <summary>
            Creates the APF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="quality">The quality of LPF.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateBPFParameterFromQuality(System.Double,System.Double,System.Double,Shamisen.Filters.BpfGainKind)">
            <summary>
            Creates the BPF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="gainKind">Kind of the gain.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The kind of gain is invalid! - gainKind</exception>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateBPFParameterFromBandWidth(System.Double,System.Double,System.Double,Shamisen.Filters.BpfGainKind)">
            <summary>
            Creates the BPF parameter from specified bandwidth.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="bandWidth">The bandwidth in Octaves.</param>
            <param name="gainKind">Kind of the gain.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The kind of gain is invalid! - gainKind</exception>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateNotchFilterParameterFromQuality(System.Double,System.Double,System.Double)">
            <summary>
            Creates the notch filter parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateNotchFilterParameterFromBandWidth(System.Double,System.Double,System.Double)">
            <summary>
            Creates the notch filter parameter from specified bandwidth.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="bandWidth">The bandwidth.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreatePeakingEqualizerParameterFromQuality(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the peaking equalizer parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreatePeakingEqualizerParameterFromBandWidth(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the peaking equalizer parameter from specified bandwidth.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="bandWidth">The bandwidth in Octaves.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateLowShelfFilterParameterFromQuality(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the low shelf filter parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateLowShelfFilterParameterFromSlope(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the low shelf filter parameter from specified slope.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="slope">The slope in dB/Oct.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateHighShelfFilterParameterFromQuality(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the High shelf filter parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.CreateHighShelfFilterParameterFromSlope(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the High shelf filter parameter from specified slope.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="slope">The slope in dB/Oct.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Filters.BiQuadParameter.Deconstruct(System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstructs an instance of <see cref="T:Shamisen.Filters.BiQuadParameter"/>.
            </summary>
            <param name="b0"></param>
            <param name="b1"></param>
            <param name="b2"></param>
            <param name="a1"></param>
            <param name="a2"></param>
        </member>
        <member name="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter">
            <summary>
            Filters audio signal with multiple Digital BiQuad Filter.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},Shamisen.Filters.BiQuadParameter[])">
            <summary>
            Initializes a new instance of <see cref="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="parameters">The filters for all channels.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.#ctor(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat},Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadParameters)">
            <summary>
            Initializes a new instance of <see cref="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter"/>.
            </summary>
            <param name="source"></param>
            <param name="parameters"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.Source">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.Read(System.Span{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.Process.X86.ProcessMonauralOrder8Avx2(System.Span{System.Single},System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Processes the signal with 5-8 order of cascaded BiQuad filters with the technique called "software pipelining".<br/>
            Software pipelining enables us to implement cascaded BiQuad parallelization as we did in scalar version of single BiQuad filter.<br/>
            The bypass can be represented by 1.0f for b0 and 0.0f for b1, b2, a1, and a2.<br/>
            The orders more than 8 should be processed with serially cascaded function calls.
            </summary>
            <param name="target"></param>
            <param name="parameters"></param>
            <param name="internalStates"></param>
        </member>
        <member name="M:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter.Process.X86.ProcessMonauralOrder4Sse41(System.Span{System.Single},System.Span{System.Single},System.Span{System.Single})">
            <summary>
            Processes the signal with 2-4 order of cascaded BiQuad filters with the technique called "software pipelining".<br/>
            Single BiQuad filters must be processed with <see cref="T:Shamisen.Filters.BiQuadFilter"/>.<br/>
            Software pipelining enables us to implement cascaded BiQuad parallelization as we did in scalar version of single BiQuad filter.<br/>
            The bypass can be represented by 1.0f for b0 and 0.0f for b1, b2, a1, and a2.
            </summary>
            <param name="target"></param>
            <param name="parameters"></param>
            <param name="internalStates"></param>
        </member>
        <member name="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilterStates">
            <summary>
            Contains states of <see cref="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter"/>.
            </summary>
        </member>
        <member name="F:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilterStates.parameters">
            <summary>
            access: parameters[ch + <see cref="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilterStates.Channels"/> * (order + <see cref="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilterStates.Orders"/> * kind)]
            kind id: {0 => b0, 1 => b1, 2 => b2, 3 => a1, 4 => a2}
            </summary>
        </member>
        <member name="F:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilterStates.states">
            <summary>
            access: states[ch + <see cref="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilterStates.Channels"/> * (order + <see cref="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilterStates.Orders"/> * kind)]
            kind id: {0 => z0, 1 => z1}
            </summary>
        </member>
        <member name="M:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilterStates.#ctor(System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Initializes a new Instance of <see cref="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilterStates"/>.
            </summary>
            <param name="channels"></param>
            <param name="orders"></param>
            <param name="parameters"></param>
            <param name="states"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilterStates.Item(System.Int32,System.Int32)">
            <summary>
            This thing is supplied only for coefficients changes.
            </summary>
            <param name="channel"></param>
            <param name="order"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadParameters">
            <summary>
            Represents a set of parameters cascaded in single <see cref="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadFilter"/> in array-of-structure form.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadParameters.#ctor(Shamisen.Filters.BiQuadParameter[0:,0:])">
            <summary>
            Initializes a new instance of <see cref="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadParameters"/>.
            </summary>
            <param name="parameters">The parameters arranged in [channels, order].</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadParameters.Channels">
            <summary>
            Gets the number of channels associated with this <see cref="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadParameters"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadParameters.Order">
            <summary>
            Gets the number of cascaded filters of this <see cref="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadParameters"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadParameters.Length">
            <summary>
            Gets the number of <see cref="T:Shamisen.Filters.BiQuadParameter"/>s in this <see cref="T:Shamisen.Filters.BiQuad.Cascaded.CascadedBiQuadParameters"/>.
            </summary>
        </member>
        <member name="T:Shamisen.Filters.BpfGainKind">
            <summary>
            Represents a BPF gain kind.
            </summary>
        </member>
        <member name="F:Shamisen.Filters.BpfGainKind.ConstSkirt">
            <summary>
            Constant skirt gain.
            Peak gain = Q
            </summary>
        </member>
        <member name="F:Shamisen.Filters.BpfGainKind.ZeroDBPeakGain">
            <summary>
            Constant 0 dB peak gain.
            </summary>
        </member>
        <member name="T:Shamisen.Filters.Buffering.AudioCache`2">
            <summary>
            Caches some audio data like <see cref="T:Shamisen.Data.DataCache`1"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.Buffering.AudioCache`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.Buffering.AudioCache`2"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Shamisen.Filters.Buffering.AudioCache`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.AudioCache`2.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.AudioCache`2.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.AudioCache`2.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.AudioCache`2.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.AudioCache`2.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Filters.Buffering.AudioCache`2.Read(System.Span{`0})">
            <summary>
            Reads the data to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Filters.Buffering.AudioCache`2.Write(System.ReadOnlySpan{`0})">
            <summary>
            Writes the data inside specified buffer to this instance.
            </summary>
            <param name="buffer">The data buffer.</param>
        </member>
        <member name="M:Shamisen.Filters.Buffering.AudioCache`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Filters.Buffering.BlockSizeReservoir`2">
            <summary>
            Aligns the result of <see cref="T:Shamisen.IReadableAudioSource`2"/> with <see cref="P:Shamisen.IInterleavedAudioFormat`1.BlockSize"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.Buffering.BlockSizeReservoir`2.#ctor(Shamisen.IReadableAudioSource{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.Buffering.BlockSizeReservoir`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Shamisen.Filters.Buffering.BlockSizeReservoir`2.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.BlockSizeReservoir`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.BlockSizeReservoir`2.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.BlockSizeReservoir`2.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.BlockSizeReservoir`2.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.BlockSizeReservoir`2.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Buffering.BlockSizeReservoir`2.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Filters.Buffering.BlockSizeReservoir`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Filters.Buffering.BlockSizeReservoir`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Filters.Buffering.BlockSizeReservoir`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Filters.StreamBuffer`2">
            <summary>
            Buffers the samples like YouTube does.<br/>
            It reads a little more than required, and prevents waiting for IOs / decoding.
            </summary>
        </member>
        <member name="P:Shamisen.Filters.StreamBuffer`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Filters.StreamBuffer`2.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Shamisen.Filters.StreamBuffer`2.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.StreamBuffer`2.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.StreamBuffer`2.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.StreamBuffer`2.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.StreamBuffer`2.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Filters.StreamBuffer`2.#ctor(Shamisen.IReadableAudioSource{`0,`1},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.StreamBuffer`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="initialBlockSize">
            The size of initial buffer in Frames(independent on the number of channel and the type of sample).<br/>
            The buffer is automatically extended if the internal buffer is smaller than the size of reading buffers.
            </param>
            <param name="internalBufferNumber">The number of internal buffer.</param>
            <param name="allowWaitForRead">The value which indicates whether the <see cref="T:Shamisen.Filters.StreamBuffer`2"/> should wait for another sample block or not.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> should not be <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialBlockSize"/> should be larger than or equals to 2048.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="internalBufferNumber"/> should be larger than or equals to 16.</exception>
        </member>
        <member name="M:Shamisen.Filters.StreamBuffer`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Filters.StreamBuffer`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.StreamBuffer`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Filters.StreamBuffer`2.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Shamisen.Filters.StreamBuffer`2"/> class.
            </summary>
        </member>
        <member name="T:Shamisen.Filters.IAudioFilter`2">
            <summary>
            Defines a base infrastructure of an audio filter.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The format of the sample.</typeparam>
            <seealso cref="T:Shamisen.Conversion.IAudioConverter`4" />
        </member>
        <member name="T:Shamisen.Filters.ISampleFilter">
            <summary>
            Defines a base infrastructure of an audio filter.
            </summary>
            <seealso cref="T:Shamisen.Conversion.IAudioConverter`4" />
        </member>
        <member name="T:Shamisen.Filters.IMultipleInputAudioFilter`2">
            <summary>
            Defines a base infrastructure of an audio filter with multiple inputs.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:Shamisen.Filters.IMultipleInputAudioFilter`2.Sources">
            <summary>
            Gets the sources.
            </summary>
            <value>
            The sources.
            </value>
        </member>
        <member name="T:Shamisen.Filters.IPlaylistSource`2">
            <summary>
            Defines a base infrastructure of a playlist source.
            </summary>
        </member>
        <member name="P:Shamisen.Filters.IPlaylistSource`2.CurrentSource">
            <summary>
            Gets the current source.
            </summary>
            <value>
            The current source.
            </value>
        </member>
        <member name="P:Shamisen.Filters.IPlaylistSource`2.ShuffleSupport">
            <summary>
            Gets the shuffle support.
            </summary>
            <value>
            The shuffle support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.IPlaylistSource`2.LoopSupport">
            <summary>
            Gets the loop support.
            </summary>
            <value>
            The loop support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.IPlaylistSource`2.SimpleAdditionSupport">
            <summary>
            Gets the simple addition support.
            </summary>
            <value>
            The simple addition support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.IPlaylistSource`2.ListSupport">
            <summary>
            Gets the list support.
            </summary>
            <value>
            The list support.
            </value>
        </member>
        <member name="T:Shamisen.Filters.ILoopSupport">
            <summary>
            Defines a base infrastructure that contains loop support of <see cref="T:Shamisen.Filters.IPlaylistSource`2"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Filters.ILoopSupport.IsLoopingEnabled">
            <summary>
            Gets a value indicating whether this instance is looping enabled.
            </summary>
            <value>
              <c>true</c> if this instance is looping enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Shamisen.Filters.IShuffleSupport">
            <summary>
            Defines a base infrastructure that contains shuffle support of <see cref="T:Shamisen.Filters.IPlaylistSource`2"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.IShuffleSupport.Shuffle">
            <summary>
            Shuffles the <see cref="T:Shamisen.Filters.IPlaylistSource`2"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.IShuffleSupport.UndoShuffle">
            <summary>
            Undoes the shuffle of <see cref="T:Shamisen.Filters.IPlaylistSource`2"/>.
            </summary>
        </member>
        <member name="T:Shamisen.Filters.ISimpleAdditionSupport`2">
            <summary>
            Defines a base infrastructure that contains source addition support of <see cref="T:Shamisen.Filters.IPlaylistSource`2"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="M:Shamisen.Filters.ISimpleAdditionSupport`2.AddToTail(Shamisen.IReadableAudioSource{`0,`1})">
            <summary>
            Adds the specified source to the tail of the playlist.
            </summary>
            <param name="source">The source to add.</param>
        </member>
        <member name="T:Shamisen.Filters.LengthTruncationSource`2">
            <summary>
            Truncates some infinitely-long <see cref="T:Shamisen.IReadableAudioSource`2"/> with specified length.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.LengthTruncationSource`2.#ctor(Shamisen.IReadableAudioSource{`0,`1},System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.LengthTruncationSource`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="totalLength">The total length.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:Shamisen.Filters.LengthTruncationSource`2.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LengthTruncationSource`2.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LengthTruncationSource`2.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LengthTruncationSource`2.TotalLength">
            <summary>
            Gets the total length.
            </summary>
            <value>
            The total length.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LengthTruncationSource`2.Position">
            <summary>
            Gets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LengthTruncationSource`2.SkipSupport">
            <summary>
            Gets the skip support.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LengthTruncationSource`2.SeekSupport">
            <summary>
            Gets the seek support.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Filters.LengthTruncationSource`2.Read(System.Span{`0})">
            <summary>
            Reads the data to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Filters.LengthTruncationSource`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Filters.LoopSource`2">
            <summary>
            Provides a looping source for <see cref="T:Shamisen.IReadableAudioSource`2"/> with non-<see langword="null"/> <see cref="P:Shamisen.IAudioSource`2.TotalLength"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <seealso cref="T:Shamisen.Filters.IAudioFilter`2" />
        </member>
        <member name="M:Shamisen.Filters.LoopSource`2.#ctor(Shamisen.IReadableAudioSource{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.LoopSource`2"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:Shamisen.Filters.LoopSource`2.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LoopSource`2.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LoopSource`2.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LoopSource`2.TotalLength">
            <summary>
            Gets the total length.
            </summary>
            <value>
            The total length.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LoopSource`2.Position">
            <summary>
            Gets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LoopSource`2.SkipSupport">
            <summary>
            Gets the skip support.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.LoopSource`2.SeekSupport">
            <summary>
            Gets the seek support.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Filters.LoopSource`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Filters.LoopSource`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Filters.Mixing.Advanced.AdvancedMixer">
             <summary>
            
             </summary>
        </member>
        <member name="T:Shamisen.Filters.Mixing.IMixerItem">
            <summary>
            Defines a base infrastructure of mixer item.
            </summary>
        </member>
        <member name="P:Shamisen.Filters.Mixing.IMixerItem.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Mixing.IMixerItem.SourceProperties">
            <summary>
            Gets the source properties.
            </summary>
            <value>
            The source properties.
            </value>
        </member>
        <member name="T:Shamisen.Filters.Mixing.ISourceBufferPair">
            <summary>
            Defines a base infrastructure of a pair of <see cref="T:Shamisen.ISampleSource"/> and buffer.
            </summary>
        </member>
        <member name="P:Shamisen.Filters.Mixing.ISourceBufferPair.Buffer">
            <summary>
            Gets the buffer associated with this <see cref="T:Shamisen.Filters.Mixing.ISourceBufferPair"/>.
            </summary>
            <value>
            The buffer associated with this <see cref="T:Shamisen.Filters.Mixing.ISourceBufferPair"/>.
            </value>
        </member>
        <member name="M:Shamisen.Filters.Mixing.ISourceBufferPair.CheckBuffer(System.Int32)">
            <summary>
            Checks and stretches the <see cref="P:Shamisen.Filters.Mixing.ISourceBufferPair.Buffer"/>.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="P:Shamisen.Filters.Mixing.ISourceBufferPair.Source">
            <summary>
            Gets the source associated with this <see cref="T:Shamisen.Filters.Mixing.ISourceBufferPair"/>.
            </summary>
            <value>
            The source associated with this <see cref="T:Shamisen.Filters.Mixing.ISourceBufferPair"/>.
            </value>
        </member>
        <member name="T:Shamisen.Filters.Mixing.MixerItem">
            <summary>
            Represents an item of <see cref="T:Shamisen.Filters.Mixing.SimpleMixer"/> and <see cref="T:Shamisen.Filters.Mixing.Advanced.AdvancedMixer"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.Mixing.MixerItem.#ctor(Shamisen.ISampleSource,Shamisen.Pipeline.AudioSourceProperties{System.Single,Shamisen.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.Mixing.MixerItem"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="sourceProperties">The source properties.</param>
            <exception cref="T:System.ArgumentNullException">sourceProperties</exception>
        </member>
        <member name="P:Shamisen.Filters.Mixing.MixerItem.Source">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.MixerItem.Volume">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.MixerItem.SourceProperties">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.MixerItem.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.MixerItem.Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.MixerItem.TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.MixerItem.Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.MixerItem.Shamisen#IAudioSource{System#Single,Shamisen#SampleFormat}#SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.MixerItem.Shamisen#IAudioSource{System#Single,Shamisen#SampleFormat}#SeekSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.MixerItem.Buffer">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Mixing.MixerItem.Read(System.Span{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Mixing.MixerItem.CheckBuffer(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Mixing.MixerItem.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Filters.Mixing.MixerItem.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.Filters.Mixing.SimpleMixer">
            <summary>
            Mixes down two signals into one signal.
            </summary>
            <seealso cref="T:Shamisen.ISampleSource" />
        </member>
        <member name="M:Shamisen.Filters.Mixing.SimpleMixer.#ctor(Shamisen.Filters.Mixing.IMixerItem,Shamisen.Filters.Mixing.IMixerItem)">
            <summary>
            TODO: Docs
            </summary>
            <param name="itemA"></param>
            <param name="itemB"></param>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleMixer.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleMixer.Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleMixer.TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleMixer.Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleMixer.ItemA">
            <summary>
            Gets the item A.
            </summary>
            <value>
            The item A.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleMixer.ItemB">
            <summary>
            Gets the item B.
            </summary>
            <value>
            The item B.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleMixer.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleMixer.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Mixing.SimpleMixer.Read(System.Span{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Mixing.SimpleMixer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Filters.Mixing.SimpleMixer.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.Filters.Mixing.SimpleSourceBufferPair">
            <summary>
            
            </summary>
        </member>
        <member name="M:Shamisen.Filters.Mixing.SimpleSourceBufferPair.#ctor(Shamisen.ISampleSource)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleSourceBufferPair.Source">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleSourceBufferPair.Buffer">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleSourceBufferPair.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleSourceBufferPair.Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleSourceBufferPair.TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleSourceBufferPair.Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleSourceBufferPair.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Mixing.SimpleSourceBufferPair.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Mixing.SimpleSourceBufferPair.CheckBuffer(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Mixing.SimpleSourceBufferPair.Read(System.Span{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Mixing.SimpleSourceBufferPair.Finalize">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Mixing.SimpleSourceBufferPair.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.Filters.Multiplier">
            <summary>
            Multiplies the instantaneous values of the two sources.<br/>
            It can be used to gradually modify the volume of a <see cref="T:Shamisen.ISampleSource"/>.<br/>
            If you put two <see cref="T:Shamisen.Synthesis.SinusoidSource"/> with different frequencies, the output will be a mix of two new sinusoid with two different frequencies, one at sum, and the other at difference.
            </summary>
        </member>
        <member name="M:Shamisen.Filters.Multiplier.#ctor(Shamisen.Filters.Mixing.ISourceBufferPair,Shamisen.Filters.Mixing.ISourceBufferPair)">
            <summary>
            TODO: Docs
            </summary>
            <param name="itemA"></param>
            <param name="itemB"></param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="itemA"/> or <paramref name="itemB"/> were <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="itemA"/>'s <see cref="P:Shamisen.IAudioSource`2.Format"/> is not same as <paramref name="itemB"/>'s <see cref="P:Shamisen.IAudioSource`2.Format"/>.</exception>
        </member>
        <member name="P:Shamisen.Filters.Multiplier.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Multiplier.Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Multiplier.TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Multiplier.Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Multiplier.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Multiplier.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Filters.Multiplier.ItemA">
            <summary>
            Gets the item A.
            </summary>
            <value>
            The item A.
            </value>
        </member>
        <member name="P:Shamisen.Filters.Multiplier.ItemB">
            <summary>
            Gets the item B.
            </summary>
            <value>
            The item B.
            </value>
        </member>
        <member name="M:Shamisen.Filters.Multiplier.Read(System.Span{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Multiplier.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Filters.Multiplier.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.Filters.SimplePlaylistSource`2">
             <summary>
            
             </summary>
             <typeparam name="TSample">The type of the sample.</typeparam>
             <typeparam name="TFormat">The type of the format.</typeparam>
             <seealso cref="T:Shamisen.Filters.IPlaylistSource`2" />
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.CurrentSource">
            <summary>
            Gets the current source.
            </summary>
            <value>
            The current source.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.ListSupport">
            <summary>
            Gets the list support.
            </summary>
            <value>
            The list support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.LoopSupport">
            <summary>
            Gets the loop support.
            </summary>
            <value>
            The loop support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.ShuffleSupport">
            <summary>
            Gets the shuffle support.
            </summary>
            <value>
            The shuffle support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.SimpleAdditionSupport">
            <summary>
            Gets the simple addition support.
            </summary>
            <value>
            The simple addition support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.Sources">
            <summary>
            Gets the sources.
            </summary>
            <value>
            The sources.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Filters.SimplePlaylistSource`2.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Filters.SimplePlaylistSource`2.#ctor(System.Collections.Generic.List{Shamisen.IReadableAudioSource{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.SimplePlaylistSource`2"/> class.
            </summary>
            <param name="contents">The contents.</param>
            <exception cref="T:System.ArgumentNullException">contents</exception>
        </member>
        <member name="M:Shamisen.Filters.SimplePlaylistSource`2.#ctor(System.Collections.Generic.IEnumerable{Shamisen.IReadableAudioSource{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.SimplePlaylistSource`2"/> class.
            </summary>
            <param name="contents">The contents.</param>
        </member>
        <member name="M:Shamisen.Filters.SimplePlaylistSource`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Filters.SimplePlaylistSource`2"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:Shamisen.Filters.SimplePlaylistSource`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Filters.SimplePlaylistSource`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shamisen.AudioSocket`2">
            <summary>
            The re-pluggable socket receiving audio from <see cref="T:Shamisen.IReadableAudioSource`2"/>
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <seealso cref="T:Shamisen.Filters.IAudioFilter`2" />
        </member>
        <member name="P:Shamisen.AudioSocket`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.AudioSocket`2.Source">
            <summary>
            Gets the source to read the samples from.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Shamisen.AudioSocket`2.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.AudioSocket`2.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.AudioSocket`2.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.
            </value>
        </member>
        <member name="P:Shamisen.AudioSocket`2.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.AudioSocket`2.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="M:Shamisen.AudioSocket`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.AudioSocket`2"/> class with the specified <paramref name="format"/>.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:Shamisen.AudioSocket`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.AudioSocket`2.ReplaceSource(Shamisen.IReadableAudioSource{`0,`1})">
            <summary>
            Replaces the source to the <paramref name="newSource"/>.
            </summary>
            <param name="newSource">The new source.</param>
            <returns>The <see cref="P:Shamisen.AudioSocket`2.Source"/> that was previously set.</returns>
            <exception cref="T:System.ArgumentException">The Format is not same as newSource's Format!</exception>
        </member>
        <member name="M:Shamisen.AudioSocket`2.DeplugSource">
            <summary>
            De-plugs the source.
            </summary>
            <returns>The old <see cref="P:Shamisen.AudioSocket`2.Source"/>.</returns>
        </member>
        <member name="M:Shamisen.AudioSocket`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Shamisen.AudioSocket`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.ChannelMaskUtils">
            <summary>
            Provides several utilities for manipulating <see cref="T:Shamisen.Speakers"/>.
            </summary>
        </member>
        <member name="M:Shamisen.ChannelMaskUtils.GetChannelMasks``1(Shamisen.IAudioFormat{``0})">
            <summary>
            Gets the value which indicates how the speakers are used.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
            <param name="format">The format.</param>
            <returns>The matching <see cref="T:Shamisen.Speakers"/> combination.</returns>
        </member>
        <member name="T:Shamisen.DoublePrecisionSampleFormat">
            <summary>
            Represents a format of a double-precision sample source.
            </summary>
        </member>
        <member name="M:Shamisen.DoublePrecisionSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.DoublePrecisionSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:Shamisen.DoublePrecisionSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.DoublePrecisionSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.DoublePrecisionSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.DoublePrecisionSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.DoublePrecisionSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Double"/> values are required per whole frame.<br/>
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.DoublePrecisionSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Double"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.DoublePrecisionSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Double"/>s.
            </value>
        </member>
        <member name="M:Shamisen.DoublePrecisionSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.DoublePrecisionSampleFormat.Equals(Shamisen.DoublePrecisionSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.DoublePrecisionSampleFormat.Equals(Shamisen.IAudioFormat{System.Double})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.DoublePrecisionSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Shamisen.DoublePrecisionSampleFormat.op_Equality(Shamisen.DoublePrecisionSampleFormat,Shamisen.DoublePrecisionSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.DoublePrecisionSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.DoublePrecisionSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.DoublePrecisionSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.DoublePrecisionSampleFormat.op_Inequality(Shamisen.DoublePrecisionSampleFormat,Shamisen.DoublePrecisionSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.DoublePrecisionSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.DoublePrecisionSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.DoublePrecisionSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.FormatUtils">
            <summary>
            Provides some utilities for <see cref="T:Shamisen.IAudioFormat`1"/>.
            </summary>
        </member>
        <member name="M:Shamisen.FormatUtils.GetFrameSizeInBytes``1(Shamisen.IAudioFormat{``0})">
            <summary>
            Gets the value which indicates how long the <see cref="P:Shamisen.Units.Frame"/> is, in bytes.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
            <param name="format">The format to calculate the length of frame.</param>
            <returns><c>sizeof(TSample) * <see cref="P:Shamisen.IAudioFormat`1.Channels"/></c></returns>
        </member>
        <member name="M:Shamisen.FormatUtils.GetBufferSizeRequired``1(Shamisen.IAudioFormat{``0},System.TimeSpan)">
            <summary>
            Gets the value which indicates how long the <see cref="T:System.Byte"/>[] buffer should be.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <param name="format">The format.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Formats.HalfPrecisionSampleFormat">
            <summary>
            Represents a format of a half-precision sample source.
            </summary>
        </member>
        <member name="M:Shamisen.Formats.HalfPrecisionSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Formats.HalfPrecisionSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:Shamisen.Formats.HalfPrecisionSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.Formats.HalfPrecisionSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.Formats.HalfPrecisionSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.Formats.HalfPrecisionSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.Formats.HalfPrecisionSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Half"/> values are required per whole frame.<br/>
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.Formats.HalfPrecisionSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Half"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.Formats.HalfPrecisionSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Half"/>s.
            </value>
        </member>
        <member name="M:Shamisen.Formats.HalfPrecisionSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Formats.HalfPrecisionSampleFormat.Equals(Shamisen.Formats.HalfPrecisionSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Formats.HalfPrecisionSampleFormat.Equals(Shamisen.IAudioFormat{System.Half})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Formats.HalfPrecisionSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Shamisen.Formats.HalfPrecisionSampleFormat.op_Equality(Shamisen.Formats.HalfPrecisionSampleFormat,Shamisen.Formats.HalfPrecisionSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Formats.HalfPrecisionSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Formats.HalfPrecisionSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Formats.HalfPrecisionSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Formats.HalfPrecisionSampleFormat.op_Inequality(Shamisen.Formats.HalfPrecisionSampleFormat,Shamisen.Formats.HalfPrecisionSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Formats.HalfPrecisionSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Formats.HalfPrecisionSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Formats.HalfPrecisionSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Formats.IChannelMaskedFormat">
            <summary>
            Defines a base structure of an <see cref="T:Shamisen.IAudioFormat`1"/> that has an information of channel masks.
            </summary>
        </member>
        <member name="P:Shamisen.Formats.IChannelMaskedFormat.ChannelCombination">
            <summary>
            Gets the value which indicates how the speakers are used.
            </summary>
        </member>
        <member name="T:Shamisen.Formats.IConvertibleWaveFormat">
            <summary>
            Defines a base infrastructure of a <see cref="T:Shamisen.IAudioFormat`1"/> that can be represented in <see cref="T:Shamisen.Codecs.Waveform.Composing.IRf64Content"/>
            </summary>
        </member>
        <member name="T:Shamisen.Formats.IExtensibleWaveFormat">
            <summary>
            Represents a base infrastructure of an extensible wave format.
            </summary>
        </member>
        <member name="P:Shamisen.Formats.IExtensibleWaveFormat.ExtensionSize">
            <summary>
            Gets the size of the extension.
            </summary>
            <value>
            The size of the extension.
            </value>
        </member>
        <member name="P:Shamisen.Formats.IExtensibleWaveFormat.ValidBitsPerSample">
            <summary>
            Gets the valid bits per sample.
            </summary>
            <value>
            The valid bits per sample.
            </value>
        </member>
        <member name="P:Shamisen.Formats.IExtensibleWaveFormat.SubFormat">
            <summary>
            Gets the sub format.
            </summary>
            <value>
            The sub format.
            </value>
        </member>
        <member name="P:Shamisen.Formats.IExtensibleWaveFormat.ExtraData">
            <summary>
            Gets the extra data.
            </summary>
            <value>
            The extra data.
            </value>
        </member>
        <member name="T:Shamisen.Formats.Int32RangedLinearPcmSampleFormat">
            <summary>
            Represents a format of a 32-bit Ranged Linear PCM sample source.<br/>
            The samples is not scaled appropriately to the maximum values of 32-bit signed integer if <see cref="P:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.EffectiveBitDepth"/> is not 32.<br/>
            Instead, samples are aligned to the least significant bits.
            </summary>
        </member>
        <member name="M:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Formats.Int32RangedLinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="effectiveBitDepth">The effective bits stored in every samples.</param>
        </member>
        <member name="P:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.EffectiveBitDepth">
            <summary>
            Gets the number indicates how many bits are actually stored per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The effective bit depth.
            </value>
        </member>
        <member name="P:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int32"/> values are required per whole frame.<br/>
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int32"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Int32"/>s.
            </value>
        </member>
        <member name="M:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.Equals(Shamisen.Formats.Int32RangedLinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.Equals(Shamisen.IAudioFormat{System.Int32})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.op_Equality(Shamisen.Formats.Int32RangedLinearPcmSampleFormat,Shamisen.Formats.Int32RangedLinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Formats.Int32RangedLinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Formats.Int32RangedLinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Formats.Int32RangedLinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Formats.Int32RangedLinearPcmSampleFormat.op_Inequality(Shamisen.Formats.Int32RangedLinearPcmSampleFormat,Shamisen.Formats.Int32RangedLinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Formats.Int32RangedLinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Formats.Int32RangedLinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Formats.Int32RangedLinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.IAudioFormat`1">
            <summary>
            Defines a base structure of audio formats.<br/>
            <typeparamref name="TSample"/> must not be affected by the number of <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
        </member>
        <member name="P:Shamisen.IAudioFormat`1.Channels">
            <summary>
            Gets the number of channels.<br/>
            It does not describe how these loudspeakers of each channels are placed in the room.<br/>
            It does not affect the type of <typeparamref name="TSample"/>.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.IAudioFormat`1.SampleRate">
             <summary>
             Gets the average number of samples contained in one second.<br/>
            
             </summary>
             <value>
             The sample rate.
             </value>
        </member>
        <member name="P:Shamisen.IAudioFormat`1.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.<br/>
            -1 means the bit depth is variable in the whole stream.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="T:Shamisen.IInterleavedAudioFormat`1">
            <summary>
            Defines a base structure of audio formats.<br/>
            <typeparamref name="TSample"/> must not be affected by the number of <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
        </member>
        <member name="P:Shamisen.IInterleavedAudioFormat`1.BlockSize">
            <summary>
            Gets the value indicates how many <typeparamref name="TSample"/>s are required per whole frame.<br/>
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of frame.
            </value>
        </member>
        <member name="P:Shamisen.IInterleavedAudioFormat`1.SampleSize">
            <summary>
            Gets the value indicates how many <typeparamref name="TSample"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.<br/>
            </summary>
            <value>
            The size of a sample in <typeparamref name="TSample"/>s.
            </value>
        </member>
        <member name="T:Shamisen.IWaveFormat">
            <summary>
            Defines a base infrastructure of a wave format.
            </summary>
        </member>
        <member name="P:Shamisen.IWaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:Shamisen.IWaveFormat.ExtraData">
            <summary>
            Gets the extra data.
            </summary>
            <value>
            The extra data.
            </value>
        </member>
        <member name="T:Shamisen.Int16LinearPcmSampleFormat">
            <summary>
            Represents a format of a 16-bit Linear PCM sample source.
            </summary>
        </member>
        <member name="M:Shamisen.Int16LinearPcmSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Int16LinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:Shamisen.Int16LinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.Int16LinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.Int16LinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.Int16LinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.Int16LinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int16"/> values are required per whole frame.<br/>
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.Int16LinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int16"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.Int16LinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Int16"/>s.
            </value>
        </member>
        <member name="M:Shamisen.Int16LinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int16LinearPcmSampleFormat.Equals(Shamisen.Int16LinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int16LinearPcmSampleFormat.Equals(Shamisen.IAudioFormat{System.Int16})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int16LinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Shamisen.Int16LinearPcmSampleFormat.op_Equality(Shamisen.Int16LinearPcmSampleFormat,Shamisen.Int16LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Int16LinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int16LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int16LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int16LinearPcmSampleFormat.op_Inequality(Shamisen.Int16LinearPcmSampleFormat,Shamisen.Int16LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Int16LinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int16LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int16LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Int24LinearPcmSampleFormat">
            <summary>
            Represents a format of a 24-bit Linear PCM sample source.
            </summary>
        </member>
        <member name="M:Shamisen.Int24LinearPcmSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Int24LinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:Shamisen.Int24LinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.Int24LinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.Int24LinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.Int24LinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.Int24LinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:Shamisen.Int24"/> values are required per whole frame.<br/>
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.Int24LinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:Shamisen.Int24"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.Int24LinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:Shamisen.Int24"/>s.
            </value>
        </member>
        <member name="M:Shamisen.Int24LinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int24LinearPcmSampleFormat.Equals(Shamisen.Int24LinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int24LinearPcmSampleFormat.Equals(Shamisen.IAudioFormat{Shamisen.Int24})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int24LinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Shamisen.Int24LinearPcmSampleFormat.op_Equality(Shamisen.Int24LinearPcmSampleFormat,Shamisen.Int24LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Int24LinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int24LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int24LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int24LinearPcmSampleFormat.op_Inequality(Shamisen.Int24LinearPcmSampleFormat,Shamisen.Int24LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Int24LinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int24LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int24LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Int32LinearPcmSampleFormat">
            <summary>
            Represents a format of a 32-bit Linear PCM sample source.
            </summary>
        </member>
        <member name="M:Shamisen.Int32LinearPcmSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Int32LinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:Shamisen.Int32LinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.Int32LinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.Int32LinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.Int32LinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.Int32LinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int32"/> values are required per whole frame.<br/>
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.Int32LinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int32"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.Int32LinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Int32"/>s.
            </value>
        </member>
        <member name="M:Shamisen.Int32LinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int32LinearPcmSampleFormat.Equals(Shamisen.Int32LinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int32LinearPcmSampleFormat.Equals(Shamisen.IAudioFormat{System.Int32})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int32LinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Shamisen.Int32LinearPcmSampleFormat.op_Equality(Shamisen.Int32LinearPcmSampleFormat,Shamisen.Int32LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Int32LinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int32LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int32LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int32LinearPcmSampleFormat.op_Inequality(Shamisen.Int32LinearPcmSampleFormat,Shamisen.Int32LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Int32LinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int32LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int32LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Int64LinearPcmSampleFormat">
            <summary>
            Represents a format of a 64-bit Linear PCM sample source.
            </summary>
        </member>
        <member name="M:Shamisen.Int64LinearPcmSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Int64LinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:Shamisen.Int64LinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.Int64LinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.Int64LinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.Int64LinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.Int64LinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int64"/> values are required per whole frame.<br/>
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.Int64LinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int64"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.Int64LinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Int64"/>s.
            </value>
        </member>
        <member name="M:Shamisen.Int64LinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int64LinearPcmSampleFormat.Equals(Shamisen.Int64LinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int64LinearPcmSampleFormat.Equals(Shamisen.IAudioFormat{System.Int64})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.Int64LinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Shamisen.Int64LinearPcmSampleFormat.op_Equality(Shamisen.Int64LinearPcmSampleFormat,Shamisen.Int64LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Int64LinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int64LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int64LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.Int64LinearPcmSampleFormat.op_Inequality(Shamisen.Int64LinearPcmSampleFormat,Shamisen.Int64LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.Int64LinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.Int64LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.Int64LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.OffsetSByteLinearPcmSampleFormat">
            <summary>
            Represents a format of an 8-bit Linear PCM sample source.
            </summary>
        </member>
        <member name="M:Shamisen.OffsetSByteLinearPcmSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.OffsetSByteLinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:Shamisen.OffsetSByteLinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.OffsetSByteLinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.OffsetSByteLinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.OffsetSByteLinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.OffsetSByteLinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:Shamisen.OffsetSByte"/> values are required per whole frame.<br/>
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.OffsetSByteLinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:Shamisen.OffsetSByte"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.OffsetSByteLinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:Shamisen.OffsetSByte"/>s.
            </value>
        </member>
        <member name="M:Shamisen.OffsetSByteLinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.OffsetSByteLinearPcmSampleFormat.Equals(Shamisen.OffsetSByteLinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.OffsetSByteLinearPcmSampleFormat.Equals(Shamisen.IAudioFormat{Shamisen.OffsetSByte})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.OffsetSByteLinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Shamisen.OffsetSByteLinearPcmSampleFormat.op_Equality(Shamisen.OffsetSByteLinearPcmSampleFormat,Shamisen.OffsetSByteLinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.OffsetSByteLinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.OffsetSByteLinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.OffsetSByteLinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.OffsetSByteLinearPcmSampleFormat.op_Inequality(Shamisen.OffsetSByteLinearPcmSampleFormat,Shamisen.OffsetSByteLinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.OffsetSByteLinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.OffsetSByteLinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.OffsetSByteLinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.SampleFormat">
            <summary>
            Represents a format of a 32-bit IEEE 754 Floating-Point sample source.
            </summary>
        </member>
        <member name="M:Shamisen.SampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.SampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:Shamisen.SampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.SampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.SampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.SampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.SampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Single"/> values are required per whole frame.<br/>
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.SampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Single"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:Shamisen.SampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Single"/>s.
            </value>
        </member>
        <member name="M:Shamisen.SampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.SampleFormat.Equals(Shamisen.SampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.SampleFormat.Equals(Shamisen.IAudioFormat{System.Single})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Shamisen.SampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Shamisen.SampleFormat.op_Equality(Shamisen.SampleFormat,Shamisen.SampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.SampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.SampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.SampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.SampleFormat.op_Inequality(Shamisen.SampleFormat,Shamisen.SampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.SampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.SampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.SampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.Speakers">
            <summary>
            Represents a mask of channels' combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.None">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FrontLeft">
            <summary>
            The speaker placed in left front of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FrontRight">
            <summary>
            The speaker placed in right front of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FrontCenter">
            <summary>
            The speaker placed in front of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FrontCenterLowFrequency">
            <summary>
            The subwoofer speaker placed in front of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.RearLeft">
            <summary>
            The speaker placed in left rear of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.RearRight">
            <summary>
            The speaker placed in right rear of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FrontLeftOfCenter">
            <summary>
            The speaker placed between <see cref="F:Shamisen.Speakers.FrontCenter"/> and <see cref="F:Shamisen.Speakers.FrontLeft"/>, of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FrontRightOfCenter">
            <summary>
            The speaker placed between <see cref="F:Shamisen.Speakers.FrontCenter"/> and <see cref="F:Shamisen.Speakers.FrontRight"/>, of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.RearCenter">
            <summary>
            The speaker placed behind the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.SideLeft">
            <summary>
            The speaker placed to the left of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.SideRight">
            <summary>
            The speaker placed to the right of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.RearLowFrequency">
            <summary>
            The subwoofer speaker placed behind the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopFrontLeft">
            <summary>
            The speaker placed at the upper left front of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopFrontCenter">
            <summary>
            The speaker placed at the upper front of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopFrontRight">
            <summary>
            The speaker placed at the upper right front of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopRearLeft">
            <summary>
            The speaker placed at the upper left rear of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopRearCenter">
            <summary>
            The speaker placed at the upper rear of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopRearRight">
            <summary>
            The speaker placed at the upper right rear of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopSideLeft">
            <summary>
            The speaker placed at the upper left of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopSideCenter">
            <summary>
            The speaker placed above the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopSideRight">
            <summary>
            The speaker placed at the upper right of the listener.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.Monaural">
            <summary>
            The representation of single speaker.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FrontStereo">
            <summary>
            The ordinal Stereo combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.SideStereo">
            <summary>
            The side Stereo combination suitable for headphones.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.RearStereo">
            <summary>
            The rear Stereo combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopFrontStereo">
            <summary>
            The top front Stereo combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopSideStereo">
            <summary>
            The top side Stereo combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TopRearStereo">
            <summary>
            The top rear Stereo combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.TwoPointOne">
            <summary>
            The 2.1ch combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FrontThree">
            <summary>
            The 3ch surround combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.ThreePointOne">
            <summary>
            The 3.1ch combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.Quad">
            <summary>
            The 4ch surround combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FrontFive">
            <summary>
            The 5ch surround combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.SideFive">
            <summary>
            The 5ch surround combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FourPointOne">
            <summary>
            The 4.1ch combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.FrontFivePointOne">
            <summary>
            The standard 5.1ch combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.SideFivePointOne">
            <summary>
            The side 5.1ch combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.Hexagonal">
            <summary>
            The hexagonal 6ch combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.ShamisenSixPointOne">
            <summary>
            The 6.1ch combination with top-side center.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.DolbySixPointOne">
            <summary>
            The 6.1ch combination with rear center.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.SevenSurround">
            <summary>
            The 7ch surround combination.
            </summary>
        </member>
        <member name="F:Shamisen.Speakers.SevenPointOne">
            <summary>
            The 7.1ch combination.
            </summary>
        </member>
        <member name="T:Shamisen.SpeakersUtils">
            <summary>
            Contains some utility functions for <see cref="T:Shamisen.Speakers"/>.
            </summary>
        </member>
        <member name="M:Shamisen.SpeakersUtils.CountChannels(Shamisen.Speakers)">
            <summary>
            Counts the number of channels of specified <paramref name="speakers"/>.
            </summary>
            <param name="speakers">The speakers.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.WaveFormat">
            <summary>
            Represents a wave format.
            </summary>
            <seealso cref="T:Shamisen.IAudioFormat`1" />
        </member>
        <member name="M:Shamisen.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,Shamisen.AudioEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.WaveFormat"/> struct.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="channels">The channels.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Shamisen.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,Shamisen.AudioEncoding,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.WaveFormat"/> struct.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="channels">The channels.</param>
            <param name="encoding">The encoding.</param>
            <param name="extraSize">Size of the extra.</param>
        </member>
        <member name="M:Shamisen.WaveFormat.#ctor(Shamisen.AudioEncoding,System.Int32,System.Int32,System.Int32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.WaveFormat"/> struct.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="P:Shamisen.WaveFormat.BlockSize">
            <summary>
            Gets the value indicates how many bytes are required per whole sample.
            It depends on <see cref="P:Shamisen.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:Shamisen.WaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:Shamisen.WaveFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Shamisen.WaveFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:Shamisen.WaveFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:Shamisen.WaveFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:Shamisen.WaveFormat.ExtraSize">
            <summary>
            Gets the size of the extra information.
            </summary>
            <value>
            The size of the extra information.
            </value>
        </member>
        <member name="P:Shamisen.WaveFormat.SampleSize">
            <summary>
            Gets the size of the frame.
            </summary>
            <value>
            The size of the frame.
            </value>
        </member>
        <member name="P:Shamisen.WaveFormat.ExtraData">
            <summary>
            Gets the extra data.
            </summary>
            <value>
            The extra data.
            </value>
        </member>
        <member name="M:Shamisen.WaveFormat.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.WaveFormat.Equals(Shamisen.WaveFormat)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.WaveFormat.Equals(Shamisen.IAudioFormat{System.Byte})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.WaveFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Shamisen.WaveFormat.op_Equality(Shamisen.WaveFormat,Shamisen.WaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.WaveFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.WaveFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:Shamisen.WaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Shamisen.WaveFormat.op_Inequality(Shamisen.WaveFormat,Shamisen.WaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:Shamisen.WaveFormat"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:Shamisen.WaveFormat"/> to compare.</param>
            <param name="right">The second  <see cref="T:Shamisen.WaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Shamisen.IAggregator`3">
            <summary>
            Defines a base infrastructure of a filter.
            </summary>
            <typeparam name="TSample"></typeparam>
            <typeparam name="TSource">The type of the aggregator.</typeparam>
            <typeparam name="TDestinationFormat">The format of output audio.</typeparam>
        </member>
        <member name="P:Shamisen.IAggregator`3.BaseSource">
            <summary>
            Gets the base source.
            </summary>
            <value>
            The base source.
            </value>
        </member>
        <member name="T:Shamisen.InternalExtensions">
            <summary>
            Provides some functions that supports implementing some functions.
            </summary>
        </member>
        <member name="M:Shamisen.InternalExtensions.ThrowIfDisposed``1(``0,System.Boolean)">
            <summary>
            Throws if the specified <paramref name="instance"/> is disposed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance of <typeparamref name="T"/>.</param>
            <param name="isDisposed">if set to <c>true</c> it throws.</param>
            <exception cref="T:System.ObjectDisposedException">This instance of <typeparamref name="T"/> is disposed!</exception>
        </member>
        <member name="T:Shamisen.Mathematics.Fraction32">
            <summary>
            Represents a 32bit/32bit fractions.
            Supports high-precision arithmetics over fractions.
            Its total size is 64bit.
            </summary>
        </member>
        <member name="F:Shamisen.Mathematics.Fraction32.Numerator">
            <summary>
            The numerator.
            </summary>
        </member>
        <member name="F:Shamisen.Mathematics.Fraction32.Denominator">
            <summary>
            The denominator.
            </summary>
        </member>
        <member name="T:Shamisen.Mathematics.MathHelper">
            <summary>
            Helps some calculations.
            </summary>
        </member>
        <member name="F:Shamisen.Mathematics.MathHelper.DoublePI">
            <summary>
            The double pi.
            </summary>
        </member>
        <member name="M:Shamisen.Mathematics.MathHelper.MinimizeDivisor(System.Int32,System.Int32)">
            <summary>
            Minimizes the divisor.
            </summary>
            <param name="mul">The multiplier.</param>
            <param name="div">The divisor.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">div</exception>
        </member>
        <member name="M:Shamisen.Mathematics.MathHelper.MinimizeDivisor(System.UInt64,System.UInt64)">
            <summary>
            Minimizes the divisor.
            </summary>
            <param name="mul">The multiplier.</param>
            <param name="div">The divisor.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">div</exception>
        </member>
        <member name="M:Shamisen.Mathematics.MathHelper.Gcd(System.Int32,System.Int32)">
            <summary>
            Calculates a greatest common divisor for <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Mathematics.MathHelper.Gcd(System.UInt64,System.UInt64)">
            <summary>
            Calculates a greatest common divisor for <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:Shamisen.Modifier.FractionalSeekSupport">
            <summary>
            Implements an <see cref="T:Shamisen.ISkipSupport"/> with fraction and source.
            </summary>
            <seealso cref="T:Shamisen.ISkipSupport" />
        </member>
        <member name="M:Shamisen.Modifier.FractionalSeekSupport.#ctor(Shamisen.ISeekSupport,System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Modifier.FractionalSeekSupport"/> struct.
            </summary>
            <param name="source">The source.</param>
            <param name="divisor">The divisor.</param>
            <param name="multiplier">The multiplier.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Shamisen.Modifier.FractionalSeekSupport.#ctor(Shamisen.ISeekSupport,DivideSharp.UInt64Divisor,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Modifier.FractionalSeekSupport"/> struct.
            </summary>
            <param name="source">The source.</param>
            <param name="divisor">The divisor.</param>
            <param name="multiplier">The multiplier.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Shamisen.Modifier.FractionalSeekSupport.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2" /> with the specified offset in frames.
            </summary>
            <param name="offset">The offset in frames.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Shamisen.Modifier.FractionalSeekSupport.SeekLast(System.UInt64)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2" /> to the specified index in frames from the end of stream.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Shamisen.Modifier.FractionalSeekSupport.SeekTo(System.UInt64)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2" /> to the specified index in frames.
            </summary>
            <param name="index">The index in frames.</param>
        </member>
        <member name="M:Shamisen.Modifier.FractionalSeekSupport.Skip(System.UInt64)">
            <summary>
            Skips the source the specified step in frames.
            </summary>
            <param name="step">The number of frames to skip.</param>
        </member>
        <member name="M:Shamisen.Modifier.FractionalSeekSupport.StepBack(System.UInt64)">
            <summary>
            Steps this data source the specified step back in frames.
            </summary>
            <param name="step">The number of frames to step back.</param>
        </member>
        <member name="T:Shamisen.Modifier.FractionalSkipSupport">
            <summary>
            Implements an <see cref="T:Shamisen.ISkipSupport"/> with fraction and source.
            </summary>
            <seealso cref="T:Shamisen.ISkipSupport" />
        </member>
        <member name="M:Shamisen.Modifier.FractionalSkipSupport.#ctor(Shamisen.ISkipSupport,DivideSharp.UInt64Divisor,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Modifier.FractionalSkipSupport"/> struct.
            </summary>
            <param name="source">The source.</param>
            <param name="divisor">The divisor.</param>
            <param name="multiplier">The multiplier.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Shamisen.Modifier.FractionalSkipSupport.#ctor(Shamisen.ISkipSupport,System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Modifier.FractionalSkipSupport"/> struct.
            </summary>
            <param name="source">The source.</param>
            <param name="divisor">The divisor.</param>
            <param name="multiplier">The multiplier.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Shamisen.Modifier.FractionalSkipSupport.Skip(System.UInt64)">
            <summary>
            Skips the source the specified step in frames.
            </summary>
            <param name="step">The number of frames to skip.</param>
        </member>
        <member name="T:Shamisen.Modifier.OffsetSeekSupport">
            <summary>
            Implements an <see cref="T:Shamisen.ISeekSupport"/> with offset.
            </summary>
        </member>
        <member name="M:Shamisen.Modifier.OffsetSeekSupport.#ctor(Shamisen.ISeekSupport,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Modifier.OffsetSeekSupport"/> class.
            </summary>
            <param name="seekSupport">The seek support.</param>
            <param name="offset">The offset.</param>
            <exception cref="T:System.ArgumentNullException">seekSupport</exception>
        </member>
        <member name="P:Shamisen.Modifier.OffsetSeekSupport.Offset">
            <summary>
            Gets the offset.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="M:Shamisen.Modifier.OffsetSeekSupport.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2" /> with the specified offset in frames.
            </summary>
            <param name="offset">The offset in frames.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Shamisen.Modifier.OffsetSeekSupport.SeekLast(System.UInt64)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2" /> to the specified index in frames from the end of stream.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Shamisen.Modifier.OffsetSeekSupport.SeekTo(System.UInt64)">
            <summary>
            Seeks the <see cref="T:Shamisen.IAudioSource`2" /> to the specified index in frames.
            </summary>
            <param name="index">The index in frames.</param>
        </member>
        <member name="M:Shamisen.Modifier.OffsetSeekSupport.Skip(System.UInt64)">
            <summary>
            Skips the source the specified step in frames.
            </summary>
            <param name="step">The number of frames to skip.</param>
        </member>
        <member name="M:Shamisen.Modifier.OffsetSeekSupport.StepBack(System.UInt64)">
            <summary>
            Steps this data source the specified step back in frames.
            </summary>
            <param name="step">The number of frames to step back.</param>
        </member>
        <member name="T:Shamisen.ModifierUtils">
            <summary>
            Contains some utility functions for <see cref="T:Shamisen.IAudioSource`2"/>'s modifiers.
            </summary>
        </member>
        <member name="M:Shamisen.ModifierUtils.WithFraction(Shamisen.ISkipSupport,System.UInt64,System.UInt64)">
            <summary>
            Returns the new <see cref="T:Shamisen.ISkipSupport"/> with specified fraction.
            </summary>
            <param name="skipSupport">The skip support.</param>
            <param name="divisor">The divisor.</param>
            <param name="multiplier">The multiplier.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.ModifierUtils.WithFraction(Shamisen.ISkipSupport,DivideSharp.UInt64Divisor,System.UInt64)">
            <summary>
            Returns the new <see cref="T:Shamisen.ISkipSupport"/> with specified fraction.
            </summary>
            <param name="skipSupport">The skip support.</param>
            <param name="divisor">The divisor.</param>
            <param name="multiplier">The multiplier.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.ModifierUtils.WithFraction(Shamisen.ISeekSupport,System.UInt64,System.UInt64)">
            <summary>
            Returns the new <see cref="T:Shamisen.ISeekSupport"/> with specified fraction.
            </summary>
            <param name="seekSupport">The seek support.</param>
            <param name="divisor">The divisor.</param>
            <param name="multiplier">The multiplier.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.ModifierUtils.NullOrMax(System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Returns <c>null</c> if either or both of <paramref name="lengthA"/> and <paramref name="lengthB"/> are null, otherwise the maximum value of <paramref name="lengthA"/> and <paramref name="lengthB"/>.
            </summary>
            <param name="lengthA">The length a.</param>
            <param name="lengthB">The length b.</param>
            <returns><c>null</c> if either or both of <paramref name="lengthA"/> and <paramref name="lengthB"/> are null, otherwise the maximum value of <paramref name="lengthA"/> and <paramref name="lengthB"/>.</returns>
        </member>
        <member name="T:Shamisen.Pipeline.AudioSourceProperties`2">
            <summary>
            Represents properties of corresponding <see cref="T:Shamisen.IAudioSource`2"/>
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="P:Shamisen.Pipeline.AudioSourceProperties`2.IsDynamic">
            <summary>
            Gets a value indicating whether the source is dynamic.
            </summary>
            <value>
              <c>true</c> if the source is dynamic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Shamisen.Pipeline.AudioSourceProperties`2.PreferredLatency">
            <summary>
            Gets the preferred latency in seconds.<br/>
            Only positive non-infinity values are accepted.
            </summary>
            <value>
            The preferred latency.
            </value>
        </member>
        <member name="M:Shamisen.Pipeline.AudioSourceProperties`2.#ctor(Shamisen.IAudioSource{`0,`1},System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Pipeline.AudioSourceProperties`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="isDynamic">The value which indicates whether the source is either synthetic or changed in real-time, or not.</param>
            <param name="preferredLatency">The preferred latency.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Shamisen.Pipeline.AudioSourceProperties`2.GetRequiredBufferSize(Shamisen.IInterleavedAudioFormat{`0})">
            <summary>
            Gets the size of the required buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Shamisen.StoppedEventArgs">
            <summary>
            Represents an event arguments that tells you that something has (been) stopped and holds why.<br/>
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Shamisen.StoppedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.StoppedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Shamisen.StoppedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.StoppedEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:Shamisen.StoppedEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:Shamisen.StoppedEventArgs.HasError">
            <summary>
            Gets a value indicating whether this instance has error.
            </summary>
            <value>
              <c>true</c> if this instance has error; otherwise, <c>false</c> meaning recording was stopped manually by <see cref="M:Shamisen.IO.IRecordingController.Stop"/>.
            </value>
        </member>
        <member name="T:Shamisen.Synthesis.DummySource`2">
            <summary>
            Implements an audio source that does nothing when the <see cref="M:Shamisen.Synthesis.DummySource`2.Read(System.Span{`0})"/> is called.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <seealso cref="T:Shamisen.IReadableAudioSource`2" />
        </member>
        <member name="P:Shamisen.Synthesis.DummySource`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.DummySource`2.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.DummySource`2.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2" />.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Synthesis.DummySource`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Synthesis.SilenceSource`2"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="P:Shamisen.Synthesis.DummySource`2.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.DummySource`2.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.DummySource`2.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br />
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2" /> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="M:Shamisen.Synthesis.DummySource`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:Shamisen.Synthesis.DummySource`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Shamisen.Synthesis.DummySource`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Synthesis.IFrequencyGeneratorSource">
            <summary>
            Defines a base infrastructure of a frequency waveform generator.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.IFrequencyGeneratorSource.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="T:Shamisen.Synthesis.PseudoMonauralSignalSourceBase">
            <summary>
            Defines a base infrastructure of the source generates a deterministic pseudo-monaural wave with specified frequency.
            </summary>
            <seealso cref="T:Shamisen.ISampleSource" />
        </member>
        <member name="M:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.#ctor(Shamisen.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Synthesis.SinusoidSource"/> class.
            </summary>
            <param name="format">The output format.</param>
        </member>
        <member name="P:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.Length">
            <summary>
            Gets the remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The remaining length of the <see cref="T:Shamisen.IAudioSource`2"/> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.TotalLength">
            <summary>
            Gets the total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> continues infinitely.
            </summary>
            <value>
            The total length of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.Position">
            <summary>
            Gets the position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.<br/>
            The <c>null</c> means that the <see cref="T:Shamisen.IAudioSource`2"/> doesn't support this property.
            </summary>
            <value>
            The position of the <see cref="T:Shamisen.IAudioSource`2" /> in frames.
            </value>
        </member>
        <member name="M:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.GenerateMonauralSample(System.Double)">
            <summary>
            Generates the monaural sample.
            </summary>
            <param name="theta">The theta(from -pi to pi).</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.DisposeInternal(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Synthesis.PseudoMonauralSignalSourceBase.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:Shamisen.Synthesis.SawtoothWaveSource">
            <summary>
            Generates a square wave with specified frequency.
            </summary>
            <seealso cref="T:Shamisen.ISampleSource" />
        </member>
        <member name="M:Shamisen.Synthesis.SawtoothWaveSource.#ctor(Shamisen.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Synthesis.SquareWaveSource"/> class.
            </summary>
            <param name="format">The output format.</param>
        </member>
        <member name="P:Shamisen.Synthesis.SawtoothWaveSource.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.SawtoothWaveSource.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.SawtoothWaveSource.Position">
            <summary>
            Gets or sets where the <see cref="T:Shamisen.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SawtoothWaveSource.Theta">
            <summary>
            Gets or sets the current phase of this <see cref="T:Shamisen.Synthesis.SawtoothWaveSource"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SawtoothWaveSource.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of this <see cref="T:Shamisen.Synthesis.SquareWaveSource"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SawtoothWaveSource.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.SawtoothWaveSource.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Synthesis.SawtoothWaveSource.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Synthesis.SawtoothWaveSource.GenerateMonauralSample(Shamisen.Fixed64)">
            <summary>
            Generates the monaural sample.
            </summary>
            <param name="theta">The theta(from -pi to pi).</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Synthesis.SawtoothWaveSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Synthesis.SawtoothWaveSource.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:Shamisen.Synthesis.SilenceSampleSource">
            <summary>
            Generates a silence or DC offset with <see cref="T:Shamisen.SampleFormat"/>.<br/>
            This variant is specialized for <see cref="T:System.Single"/> samples for performance reason.<br/>
            If the type of sample is known to be <see cref="T:System.Single"/>, use this instead of <see cref="T:Shamisen.Synthesis.SilenceSource`2"/>.
            </summary>
        </member>
        <member name="M:Shamisen.Synthesis.SilenceSampleSource.#ctor(Shamisen.SampleFormat,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Synthesis.SilenceSampleSource"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="offset">The DC offset to generate.</param>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSampleSource.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSampleSource.Shamisen#IAudioSource{System#Single,Shamisen#SampleFormat}#Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSampleSource.Shamisen#IAudioSource{System#Single,Shamisen#SampleFormat}#TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSampleSource.Shamisen#IAudioSource{System#Single,Shamisen#SampleFormat}#Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSampleSource.Offset">
            <summary>
            Gets and sets the DC offset that this <see cref="T:Shamisen.Synthesis.SilenceSampleSource"/> generates.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSampleSource.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSampleSource.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Synthesis.SilenceSampleSource.Read(System.Span{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Synthesis.SilenceSampleSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.Synthesis.SilenceSource`2">
            <summary>
            Generates a silence or DC offset.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <seealso cref="T:Shamisen.IReadableAudioSource`2" />
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSource`2.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSource`2.Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSource`2.Offset">
            <summary>
            Gets and sets the DC offset that this <see cref="T:Shamisen.Synthesis.SilenceSource`2"/> generates.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSource`2.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSource`2.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSource`2.Shamisen#IAudioSource{TSample,TFormat}#Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSource`2.Shamisen#IAudioSource{TSample,TFormat}#TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceSource`2.Shamisen#IAudioSource{TSample,TFormat}#Position">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Synthesis.SilenceSource`2.#ctor(`1,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Synthesis.SilenceSource`2"/> class.
            </summary>
            <param name="format">The format.</param>
            <param name="offset">The DC offset to generate.</param>
        </member>
        <member name="M:Shamisen.Synthesis.SilenceSource`2.Read(System.Span{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Synthesis.SilenceSource`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Synthesis.SilenceSource`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Shamisen.Synthesis.SilenceWaveSource">
            <summary>
            Generates a silence.
            </summary>
            <seealso cref="T:Shamisen.IWaveSource" />
        </member>
        <member name="M:Shamisen.Synthesis.SilenceWaveSource.#ctor(Shamisen.IWaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Synthesis.SilenceWaveSource"/> class.
            </summary>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">format</exception>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceWaveSource.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceWaveSource.Position">
            <summary>
            Gets or sets where the <see cref="T:Shamisen.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceWaveSource.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.SilenceWaveSource.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Synthesis.SilenceWaveSource.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Synthesis.SilenceWaveSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Synthesis.SinusoidSource">
            <summary>
            Generates a sinusoid wave with specified frequency.
            </summary>
        </member>
        <member name="M:Shamisen.Synthesis.SinusoidSource.#ctor(Shamisen.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Synthesis.SinusoidSource"/> class.
            </summary>
            <param name="format">The output format.</param>
        </member>
        <member name="P:Shamisen.Synthesis.SinusoidSource.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SinusoidSource.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="M:Shamisen.Synthesis.SinusoidSource.CalculateAngularVelocity(System.Double,System.Int32)">
            <summary>
            Calculates angular velocity from <paramref name="sampleRate"/> and <paramref name="frequency"/>.
            </summary>
            <param name="frequency">The frequency.</param>
            <param name="sampleRate">The sampling rate.</param>
            <returns>The angular velocity that can be used for <see cref="T:Shamisen.Synthesis.IFrequencyGeneratorSource"/>.</returns>
        </member>
        <member name="P:Shamisen.Synthesis.SinusoidSource.AllowFma">
            <summary>
            Gets or sets the value which indicates whether the <see cref="T:Shamisen.Synthesis.SinusoidSource"/> can utilize fused multiply-adds for calculation, or not.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SinusoidSource.Theta">
            <summary>
            Gets or sets the current phase of this <see cref="T:Shamisen.Synthesis.SinusoidSource"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SinusoidSource.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of this <see cref="T:Shamisen.Synthesis.SinusoidSource"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SinusoidSource.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.SinusoidSource.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Synthesis.SinusoidSource.Read(System.Span{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Synthesis.SinusoidSource.GenerateMonauralSample(Shamisen.Fixed64)">
            <summary>
            Generates the monaural sample.
            </summary>
            <param name="theta">The theta(from -pi to pi).</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Synthesis.SinusoidSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Synthesis.SinusoidSource.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:Shamisen.Synthesis.SquareWaveSource">
            <summary>
            Generates a square wave with specified frequency.
            </summary>
            <seealso cref="T:Shamisen.ISampleSource" />
        </member>
        <member name="M:Shamisen.Synthesis.SquareWaveSource.#ctor(Shamisen.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Synthesis.SquareWaveSource"/> class.
            </summary>
            <param name="format">The output format.</param>
        </member>
        <member name="P:Shamisen.Synthesis.SquareWaveSource.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.SquareWaveSource.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.SquareWaveSource.Position">
            <summary>
            Gets or sets where the <see cref="T:Shamisen.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SquareWaveSource.Theta">
            <summary>
            Gets or sets the current phase of this <see cref="T:Shamisen.Synthesis.SquareWaveSource"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SquareWaveSource.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of this <see cref="T:Shamisen.Synthesis.SquareWaveSource"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.SquareWaveSource.SkipSupport">
            <summary>
            Gets the skip support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The skip support.
            </value>
        </member>
        <member name="P:Shamisen.Synthesis.SquareWaveSource.SeekSupport">
            <summary>
            Gets the seek support of the <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
            <value>
            The seek support.
            </value>
        </member>
        <member name="M:Shamisen.Synthesis.SquareWaveSource.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:Shamisen.Synthesis.SquareWaveSource.GenerateMonauralSample(Shamisen.Fixed64)">
            <summary>
            Generates the monaural sample.
            </summary>
            <param name="theta">The theta(from -pi to pi).</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Synthesis.SquareWaveSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Synthesis.SquareWaveSource.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:Shamisen.Synthesis.TriangleWaveSource">
            <summary>
            Generates a triangular wave with specified frequency.
            </summary>
        </member>
        <member name="M:Shamisen.Synthesis.TriangleWaveSource.#ctor(Shamisen.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Synthesis.TriangleWaveSource"/> class.
            </summary>
            <param name="format">The output format.</param>
        </member>
        <member name="P:Shamisen.Synthesis.TriangleWaveSource.Frequency">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.TriangleWaveSource.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of this <see cref="T:Shamisen.Synthesis.TriangleWaveSource"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.TriangleWaveSource.Theta">
            <summary>
            Gets or sets the current phase of this <see cref="T:Shamisen.Synthesis.TriangleWaveSource"/>.
            </summary>
        </member>
        <member name="P:Shamisen.Synthesis.TriangleWaveSource.Format">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.TriangleWaveSource.Length">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.TriangleWaveSource.TotalLength">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.TriangleWaveSource.Position">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.TriangleWaveSource.SkipSupport">
            <inheritdoc/>
        </member>
        <member name="P:Shamisen.Synthesis.TriangleWaveSource.SeekSupport">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Synthesis.TriangleWaveSource.Read(System.Span{System.Single})">
            <inheritdoc/>
        </member>
        <member name="M:Shamisen.Synthesis.TriangleWaveSource.GenerateMonauralSample(Shamisen.Fixed64)">
            <summary>
            Generates the monaural sample.
            </summary>
            <param name="theta">The theta(from -pi to pi).</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.Synthesis.TriangleWaveSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Shamisen.AudioSourceUtils">
            <summary>
            Contains some utility functions for <see cref="T:Shamisen.IAudioSource`2"/>.
            </summary>
        </member>
        <member name="M:Shamisen.AudioSourceUtils.EnsureBlocks``2(Shamisen.IReadableAudioSource{``0,``1})">
            <summary>
            Ensures the blocks are aligned for the <paramref name="source"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.AudioSourceUtils.ToSampleSource(Shamisen.IReadableAudioSource{System.Single,Shamisen.SampleFormat})">
            <summary>
            Converts the <paramref name="source"/> to <see cref="T:Shamisen.ISampleSource"/>.
            </summary>
            <param name="source">The source to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.AudioSourceUtils.ToWaveSource(Shamisen.IReadableAudioSource{System.Byte,Shamisen.IWaveFormat})">
            <summary>
            Converts the <paramref name="source"/> to <see cref="T:Shamisen.IWaveSource"/>.
            </summary>
            <param name="source">The source to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.AudioSourceUtils.Preload(Shamisen.ISampleSource,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:Shamisen.Filters.StreamBuffer`2.#ctor(Shamisen.IReadableAudioSource{`0,`1},System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Shamisen.AudioSourceUtils.Preload(Shamisen.IWaveSource,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc cref="M:Shamisen.Filters.StreamBuffer`2.#ctor(Shamisen.IReadableAudioSource{`0,`1},System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Shamisen.AudioSourceUtils.Loop``2(Shamisen.IReadableAudioSource{``0,``1})">
            <summary>
            Loops the specified source.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.AudioSourceUtils.ConvertToSample(Shamisen.IWaveSource)">
            <summary>
            Converts the <paramref name="source"/> to <see cref="T:Shamisen.ISampleSource"/>.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.AudioSourceUtils.ReadAsAsync``2(Shamisen.IReadableAudioSource{``0,``1},System.Memory{``0})">
            <summary>
            Reads the audio to the specified buffer asynchronously if possible.
            </summary>
            <param name="source"></param>
            <param name="destination">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="T:Shamisen.Utils.BufferInstance`1">
            <summary>
            Provides a simple internal buffer instancing.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:Shamisen.Utils.Buffers.PooledArrayResizer`1">
            <summary>
            Handles resizing of <see cref="T:System.Array"/>s.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Buffers.PooledArrayResizer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Utils.Buffers.PooledArrayResizer`1"/> class.
            </summary>
            <param name="initialSize">The initial size.</param>
        </member>
        <member name="P:Shamisen.Utils.Buffers.PooledArrayResizer`1.Array">
            <summary>
            Gets the array.
            </summary>
            <value>
            The array.
            </value>
        </member>
        <member name="M:Shamisen.Utils.Buffers.PooledArrayResizer`1.Resize(System.Int32)">
            <summary>
            Resizes this <see cref="T:Shamisen.Utils.Buffers.PooledArrayResizer`1"/> to specified size.
            </summary>
            <param name="newSize">The new size.</param>
            <returns>The resized array.</returns>
        </member>
        <member name="M:Shamisen.Utils.Buffers.PooledArrayResizer`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Shamisen.Utils.Buffers.PooledArrayResizer`1"/> class.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.Buffers.PooledArrayResizer`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Utils.ResizableBufferWrapper`1">
            <summary>
            Provides a Buffer wrapper.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.ResizableBufferWrapper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Utils.ResizableBufferWrapper`1"/> class.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.ResizableBufferWrapper`1.CurrentSizeInBytes">
            <summary>
            Gets the current size in bytes.
            </summary>
            <value>
            The current size in bytes.
            </value>
        </member>
        <member name="P:Shamisen.Utils.ResizableBufferWrapper`1.ActualBuffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="P:Shamisen.Utils.ResizableBufferWrapper`1.Buffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="M:Shamisen.Utils.ResizableBufferWrapper`1.Resize(System.Int32)">
            <summary>
            Resizes the buffer to the specified new size.
            </summary>
            <param name="newSize">The new size in <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Shamisen.Utils.ResizableBufferWrapper`1.ResizeInternal(System.Int32)">
            <summary>
            Resizes the buffer to the specified new size.
            </summary>
            <param name="newSize">The new size in bytes.</param>
        </member>
        <member name="M:Shamisen.Utils.ResizableBufferWrapper`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Utils.ResizableBufferWrapper`1.DisposeInternal(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Utils.ResizableBufferWrapper`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Shamisen.Utils.ResizableBufferWrapper`1"/> class.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.ResizableBufferWrapper`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Shamisen.Utils.ResizablePooledBufferWrapper`1">
            <summary>
            Provides a Buffer wrapper.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:Shamisen.Utils.ResizableBufferWrapper`1" />
        </member>
        <member name="M:Shamisen.Utils.ResizablePooledBufferWrapper`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Utils.ResizablePooledBufferWrapper`1"/> class.
            </summary>
            <param name="initialSize">The initial size in <typeparamref name="T"/>.</param>
        </member>
        <member name="P:Shamisen.Utils.ResizablePooledBufferWrapper`1.ActualBuffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="M:Shamisen.Utils.ResizablePooledBufferWrapper`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Shamisen.Utils.ResizablePooledBufferWrapper`1.ResizeInternal(System.Int32)">
            <summary>
            Resizes the buffer to the specified new size.
            </summary>
            <param name="newSize">The new size in bytes.</param>
        </member>
        <member name="T:Shamisen.Utils.ContentSwapper`1">
            <summary>
            Swaps two <typeparamref name="T"/> instances.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Shamisen.Utils.ContentSwapper`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Shamisen.Utils.ContentSwapper`1"/> class.
            </summary>
            <param name="initialVisibleValue">The value initial visible.</param>
            <param name="initiallyHiddenValue">The value initially hidden.</param>
        </member>
        <member name="M:Shamisen.Utils.ContentSwapper`1.Swap">
            <summary>
            Swaps two values of this instance.
            </summary>
        </member>
        <member name="P:Shamisen.Utils.ContentSwapper`1.Value">
            <summary>
            Gets the current value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Shamisen.Utils.MathV">
            <summary>
            Contains <see cref="T:System.Math"/>-like functions for <see cref="T:System.Numerics.Vector`1"/> and its close relatives.
            </summary>
        </member>
        <member name="T:Shamisen.Utils.ReadOnceObjectContainer`1">
            <summary>
            Prevents the stored <see cref="P:Shamisen.Utils.ReadOnceObjectContainer`1.Value"/> from being read after the <see cref="P:Shamisen.Utils.ReadOnceObjectContainer`1.Value"/> has been read for the first time.
            </summary>
        </member>
        <member name="M:Shamisen.Utils.ReadOnceObjectContainer`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:Shamisen.Utils.ReadOnceObjectContainer`1"/>.
            </summary>
            <param name="value">The value to store.</param>
        </member>
        <member name="P:Shamisen.Utils.ReadOnceObjectContainer`1.Value">
            <summary>
            Gets the contained value.
            </summary>
        </member>
        <member name="T:Shamisen.DebugUtils">
            <summary>
            Contains debug utilities.
            </summary>
        </member>
        <member name="M:Shamisen.DebugUtils.WriteLine(System.String)">
            <summary>
            Equivalent to <see cref="M:System.Console.WriteLine(System.String)"/> but executed only in Debug mode.
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:Shamisen.MemoryUtils">
            <summary>
            Provides useful methods to interoperate with <see cref="T:System.Span`1"/> and <see cref="T:System.Memory`1"/>.
            </summary>
        </member>
        <member name="M:Shamisen.MemoryUtils.CastSplit``2(System.Span{``0},System.Span{``0}@)">
            <summary>
            Casts and splits the specified span.
            </summary>
            <typeparam name="TFrom">The type of from.</typeparam>
            <typeparam name="TTo">The type of to.</typeparam>
            <param name="span">The span.</param>
            <param name="residue">The residue part of <paramref name="span"/></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MemoryUtils.CastSplit``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0}@)">
            <summary>
            Casts and splits the specified span.
            </summary>
            <typeparam name="TFrom">The type of from.</typeparam>
            <typeparam name="TTo">The type of to.</typeparam>
            <param name="span">The span.</param>
            <param name="residue">The residue part of <paramref name="span"/></param>
            <returns></returns>
        </member>
        <member name="M:Shamisen.MemoryUtils.Deconstruct``1(System.Nullable{``0},System.Boolean@,``0@)">
            <summary>
            Deconstructs the <see cref="T:System.Nullable`1"/> with bool and <typeparamref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value to deconstruct.</param>
            <param name="hasValue">The value which indicates whether the <paramref name="result"/> is valid.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:System.ThrowHelper">
            <summary>
            Helps throwing exceptions while in-lining aggressively.
            </summary>
        </member>
        <member name="M:System.ThrowHelper.Throw``1(``0)">
            <summary>
            Throws the specified exception.
            </summary>
            <typeparam name="T">The type of exception.</typeparam>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:System.PointerExtensions">
            <summary>
            Provides some extensions for <code>ref T</code>s,  <code>void*</code>s, and <see cref="T:System.IntPtr"/>s.
            </summary>
        </member>
        <member name="M:System.PointerExtensions.Increment(System.IntPtr)">
            <summary>
            Increments the specified <see cref="T:System.IntPtr"/> value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>The incremented <see cref="T:System.IntPtr"/> value.</returns>
        </member>
        <member name="M:System.PointerExtensions.Increment(System.UIntPtr)">
            <summary>
            Increments the specified <see cref="T:System.UIntPtr"/> value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>The incremented <see cref="T:System.UIntPtr"/> value.</returns>
        </member>
    </members>
</doc>
