<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var channelAssignments = Enumerable.Range(5, 8 - 5 + 1).ToArray();
    static int Log2(int a){
        uint v = (uint)a;
        int u = 0;
        while(v > 0){
            v >>= 1;
            u++;
        }
        return u;
    }
#>
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

using Shamisen.Utils.Tuples;

namespace Shamisen.Utils
{
    public static partial class AudioUtils
    {
        internal static partial class Fallback
        {
<#
    foreach(var channels in channelAssignments){#>
            [MethodImpl(OptimizationUtils.InlineAndOptimizeIfPossible)]
            internal static void Interleave<#=channels#>ChannelsInt32(Span<int> buffer, <#=string.Join(", ", Enumerable.Range(0, channels).Select(a=>$"ReadOnlySpan<int> a{a}"))#>)
            {
                unsafe
                {
                    const int Channels = <#=channels#>;
                    nint <#=string.Join(", ", Enumerable.Range(0, Log2(channels)).Select(a=>$"length{a}"))#>;
<#      int p;
        Stack<(int order, int index)> tower = new();
        var a = Enumerable.Range(0, channels).ToArray();
        for(p = 0; p < channels; p++){
            var nind = tower.Count > 0 ? tower.Peek().index + 1 : 0;
        #>
                    length<#=nind#> = a<#=p#>.Length;
<#
            tower.Push((0, nind));
            while(tower.Count > 1){
                var t1 = tower.Pop();
                if(tower.Peek().order == t1.order){
                    var t2 = tower.Pop();
                    tower.Push((t2.order + 1, t2.index));
#>
                    length<#=t2.index#> = MathI.Min(length<#=t2.index#>, length<#=t1.index#>);
<#              
                }else{
                    tower.Push(t1);
                    break;
                }
            }
        }
        while(tower.Count > 1){
            var t = tower.Pop();
            var t2 = tower.Pop();
            tower.Push((t2.order + 1, t2.index));
#>
                    length<#=t2.index#> = MathI.Min(length<#=t.index#>, length<#=t2.index#>);
<#
        }
        
#>
                    <#=string.Join("\r\n\t\t\t\t\t", Enumerable.Range(0, channels).Select(a=>$"ref var rA{a} = ref MemoryMarshal.GetReference(a{a});"))#>
                    ref var rB = ref MemoryMarshal.GetReference(buffer);
                    nint length = MathI.Min(length0, buffer.Length / Channels);
                    nint u8Length = length & ~1;
                    nint j = 0;
                    nint i = 0;
                    for (; i < u8Length; i += 2)
                    {
                        //The Unsafe.Add(ref Unsafe.Add(ref T, IntPtr), int) pattern avoids extra lea instructions.
                        var a = Unsafe.Add(ref rA0, i);
                        Unsafe.Add(ref rB, j) = a;
                        <#=string.Join("\r\n\t\t\t\t\t\t", Enumerable.Range(1, channels - 1).Select(a=>$"a = Unsafe.Add(ref rA{a}, i);\r\n\t\t\t\t\t\t" + $"Unsafe.Add(ref Unsafe.Add(ref rB, j), {a}) = a;"))#>
                        <#=string.Join("\r\n\t\t\t\t\t\t", Enumerable.Range(0, channels).Select(a=>$"a = Unsafe.Add(ref Unsafe.Add(ref rA{a}, i), 1);\r\n\t\t\t\t\t\t" + $"Unsafe.Add(ref Unsafe.Add(ref rB, j), {a + channels}) = a;"))#>
                        j += Channels * 2;
                    }
                    for (; i < length; i += 1)
                    {
                        var a = Unsafe.Add(ref rA0, i);
                        Unsafe.Add(ref rB, j) = a;
                        <#=string.Join("\r\n\t\t\t\t\t\t", Enumerable.Range(1, channels - 1).Select(a=>$"a = Unsafe.Add(ref rA{a}, i);\r\n\t\t\t\t\t\t" + $"Unsafe.Add(ref Unsafe.Add(ref rB, j), {a}) = a;"))#>
                        j += Channels;
                    }
                }
            }

<#    }#>
        }
    }
}
