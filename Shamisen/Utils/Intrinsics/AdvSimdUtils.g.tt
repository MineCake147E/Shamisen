<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#    var typesVectorized = new string[]{"float","double","byte","ushort","uint","ulong","sbyte","short","int","long"};#>
// <auto-generated />
#if NET5_0_OR_GREATER
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.Arm;
using System.Text;
using System.Threading.Tasks;

namespace Shamisen.Utils.Intrinsics
{
    public static partial class AdvSimdUtils
    {
        public static partial class Arm64
        {
<# foreach(var t in typesVectorized){#>
            /// <summary>
            /// Executes <see cref="AdvSimd.Arm64.StorePair(<#=t#>*, Vector128{<#=t#>}, Vector128{<#=t#>})" /> when in Release mode, but falls back in Debug mode.
            /// </summary>
            /// <param name="address">The target address.</param>
            /// <param name="value1">The first value to write.</param>
            /// <param name="value2">The second value to write.</param>
            public static void StorePair(ref <#=t#> address, Vector128<<#=t#>> value1, Vector128<<#=t#>> value2)
            {
#if DEBUG
                Unsafe.As<<#=t#>, Vector128<<#=t#>>>(ref address) = value1;
                Unsafe.Add(ref Unsafe.As<<#=t#>, Vector128<<#=t#>>>(ref address), 1) = value2;
#else
                unsafe
                {
                    AdvSimd.Arm64.StorePair((<#=t#>*)Unsafe.AsPointer(ref address), value1, value2);
                }
#endif
            }

            /// <summary>
            /// Executes <see cref="AdvSimd.Arm64.StorePair(<#=t#>*, Vector64{<#=t#>}, Vector64{<#=t#>})" /> when in Release mode, but falls back in Debug mode.
            /// </summary>
            /// <param name="address">The target address.</param>
            /// <param name="value1">The first value to write.</param>
            /// <param name="value2">The second value to write.</param>
            public static void StorePair(ref <#=t#> address, Vector64<<#=t#>> value1, Vector64<<#=t#>> value2)
            {
#if DEBUG
                Unsafe.As<<#=t#>, Vector64<<#=t#>>>(ref address) = value1;
                Unsafe.Add(ref Unsafe.As<<#=t#>, Vector64<<#=t#>>>(ref address), 1) = value2;
#else
                unsafe
                {
                    AdvSimd.Arm64.StorePair((<#=t#>*)Unsafe.AsPointer(ref address), value1, value2);
                }
#endif
            }

<#}#>
        }
    }
}

#endif